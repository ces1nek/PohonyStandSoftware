
G474RE_Stand_DCM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ff4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f8  080091cc  080091cc  0000a1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ac4  08009ac4  0000b014  2**0
                  CONTENTS
  4 .ARM          00000008  08009ac4  08009ac4  0000aac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009acc  08009acc  0000b014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009acc  08009acc  0000aacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ad0  08009ad0  0000aad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08009ad4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be4  20000018  08009ae8  0000b018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001bfc  08009ae8  0000bbfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000403aa  00000000  00000000  0000b044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000794b  00000000  00000000  0004b3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0002051b  00000000  00000000  00052d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002090  00000000  00000000  00073258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000033b2  00000000  00000000  000752e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003446d  00000000  00000000  0007869a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004926d  00000000  00000000  000acb07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014afae  00000000  00000000  000f5d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      0000006e  00000000  00000000  00240d22  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005908  00000000  00000000  00240d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  00246698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080091b4 	.word	0x080091b4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	080091b4 	.word	0x080091b4

08000218 <Phi2Speed_Float32_Update>:
 8000218:	6843      	ldr	r3, [r0, #4]
 800021a:	edd0 6a05 	vldr	s13, [r0, #20]
 800021e:	ed93 7a00 	vldr	s14, [r3]
 8000222:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8000278 <Phi2Speed_Float32_Update+0x60>
 8000226:	ee37 7a66 	vsub.f32	s14, s14, s13
 800022a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800022e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000232:	d514      	bpl.n	800025e <Phi2Speed_Float32_Update+0x46>
 8000234:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800027c <Phi2Speed_Float32_Update+0x64>
 8000238:	ee37 7a27 	vadd.f32	s14, s14, s15
 800023c:	ed90 6a06 	vldr	s12, [r0, #24]
 8000240:	edd0 7a04 	vldr	s15, [r0, #16]
 8000244:	edd0 6a03 	vldr	s13, [r0, #12]
 8000248:	ee67 7ac6 	vnmul.f32	s15, s15, s12
 800024c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8000250:	edc0 7a02 	vstr	s15, [r0, #8]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	6143      	str	r3, [r0, #20]
 8000258:	edc0 7a06 	vstr	s15, [r0, #24]
 800025c:	4770      	bx	lr
 800025e:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8000280 <Phi2Speed_Float32_Update+0x68>
 8000262:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800026a:	bfc4      	itt	gt
 800026c:	eddf 7a03 	vldrgt	s15, [pc, #12]	@ 800027c <Phi2Speed_Float32_Update+0x64>
 8000270:	ee37 7a67 	vsubgt.f32	s14, s14, s15
 8000274:	e7e2      	b.n	800023c <Phi2Speed_Float32_Update+0x24>
 8000276:	bf00      	nop
 8000278:	c0490fdb 	.word	0xc0490fdb
 800027c:	40c90fdb 	.word	0x40c90fdb
 8000280:	40490fdb 	.word	0x40490fdb

08000284 <Phi2Speed_Float32_Init>:
 8000284:	2300      	movs	r3, #0
 8000286:	f240 7203 	movw	r2, #1795	@ 0x703
 800028a:	8002      	strh	r2, [r0, #0]
 800028c:	6083      	str	r3, [r0, #8]
 800028e:	6143      	str	r3, [r0, #20]
 8000290:	6183      	str	r3, [r0, #24]
 8000292:	4770      	bx	lr

08000294 <Phi2Speed_Float32_Load>:
 8000294:	2b07      	cmp	r3, #7
 8000296:	d915      	bls.n	80002c4 <Phi2Speed_Float32_Load+0x30>
 8000298:	68c3      	ldr	r3, [r0, #12]
 800029a:	700b      	strb	r3, [r1, #0]
 800029c:	68c3      	ldr	r3, [r0, #12]
 800029e:	0a1b      	lsrs	r3, r3, #8
 80002a0:	704b      	strb	r3, [r1, #1]
 80002a2:	89c3      	ldrh	r3, [r0, #14]
 80002a4:	708b      	strb	r3, [r1, #2]
 80002a6:	7bc3      	ldrb	r3, [r0, #15]
 80002a8:	70cb      	strb	r3, [r1, #3]
 80002aa:	6903      	ldr	r3, [r0, #16]
 80002ac:	710b      	strb	r3, [r1, #4]
 80002ae:	6903      	ldr	r3, [r0, #16]
 80002b0:	0a1b      	lsrs	r3, r3, #8
 80002b2:	714b      	strb	r3, [r1, #5]
 80002b4:	8a43      	ldrh	r3, [r0, #18]
 80002b6:	718b      	strb	r3, [r1, #6]
 80002b8:	7cc3      	ldrb	r3, [r0, #19]
 80002ba:	71cb      	strb	r3, [r1, #7]
 80002bc:	2308      	movs	r3, #8
 80002be:	8013      	strh	r3, [r2, #0]
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	2001      	movs	r0, #1
 80002c6:	4770      	bx	lr

080002c8 <Phi2Speed_Float32_Save>:
 80002c8:	2a08      	cmp	r2, #8
 80002ca:	d001      	beq.n	80002d0 <Phi2Speed_Float32_Save+0x8>
 80002cc:	2001      	movs	r0, #1
 80002ce:	4770      	bx	lr
 80002d0:	788b      	ldrb	r3, [r1, #2]
 80002d2:	78ca      	ldrb	r2, [r1, #3]
 80002d4:	b430      	push	{r4, r5}
 80002d6:	784d      	ldrb	r5, [r1, #1]
 80002d8:	780c      	ldrb	r4, [r1, #0]
 80002da:	041b      	lsls	r3, r3, #16
 80002dc:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80002e0:	4423      	add	r3, r4
 80002e2:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 80002e6:	60c3      	str	r3, [r0, #12]
 80002e8:	798b      	ldrb	r3, [r1, #6]
 80002ea:	794d      	ldrb	r5, [r1, #5]
 80002ec:	790c      	ldrb	r4, [r1, #4]
 80002ee:	79ca      	ldrb	r2, [r1, #7]
 80002f0:	041b      	lsls	r3, r3, #16
 80002f2:	eb03 2305 	add.w	r3, r3, r5, lsl #8
 80002f6:	4423      	add	r3, r4
 80002f8:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 80002fc:	6103      	str	r3, [r0, #16]
 80002fe:	bc30      	pop	{r4, r5}
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr

08000304 <Phi2Speed_Float32_GetAddress>:
 8000304:	2901      	cmp	r1, #1
 8000306:	d005      	beq.n	8000314 <Phi2Speed_Float32_GetAddress+0x10>
 8000308:	2902      	cmp	r1, #2
 800030a:	d101      	bne.n	8000310 <Phi2Speed_Float32_GetAddress+0xc>
 800030c:	3008      	adds	r0, #8
 800030e:	4770      	bx	lr
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	6840      	ldr	r0, [r0, #4]
 8000316:	4770      	bx	lr

08000318 <TFlipFlop_Bool_Update>:
 8000318:	6842      	ldr	r2, [r0, #4]
 800031a:	7813      	ldrb	r3, [r2, #0]
 800031c:	b13b      	cbz	r3, 800032e <TFlipFlop_Bool_Update+0x16>
 800031e:	7a83      	ldrb	r3, [r0, #10]
 8000320:	b92b      	cbnz	r3, 800032e <TFlipFlop_Bool_Update+0x16>
 8000322:	7a03      	ldrb	r3, [r0, #8]
 8000324:	7243      	strb	r3, [r0, #9]
 8000326:	f083 0301 	eor.w	r3, r3, #1
 800032a:	7203      	strb	r3, [r0, #8]
 800032c:	7813      	ldrb	r3, [r2, #0]
 800032e:	7283      	strb	r3, [r0, #10]
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop

08000334 <TFlipFlop_Bool_Init>:
 8000334:	f243 22ef 	movw	r2, #13039	@ 0x32ef
 8000338:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800033c:	8002      	strh	r2, [r0, #0]
 800033e:	8103      	strh	r3, [r0, #8]
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop

08000344 <TFlipFlop_Bool_GetAddress>:
 8000344:	2902      	cmp	r1, #2
 8000346:	d005      	beq.n	8000354 <TFlipFlop_Bool_GetAddress+0x10>
 8000348:	2903      	cmp	r1, #3
 800034a:	d007      	beq.n	800035c <TFlipFlop_Bool_GetAddress+0x18>
 800034c:	2901      	cmp	r1, #1
 800034e:	d003      	beq.n	8000358 <TFlipFlop_Bool_GetAddress+0x14>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3008      	adds	r0, #8
 8000356:	4770      	bx	lr
 8000358:	6840      	ldr	r0, [r0, #4]
 800035a:	4770      	bx	lr
 800035c:	3009      	adds	r0, #9
 800035e:	4770      	bx	lr

08000360 <__gedf2>:
 8000360:	f04f 3cff 	mov.w	ip, #4294967295
 8000364:	e006      	b.n	8000374 <__cmpdf2+0x4>
 8000366:	bf00      	nop

08000368 <__ledf2>:
 8000368:	f04f 0c01 	mov.w	ip, #1
 800036c:	e002      	b.n	8000374 <__cmpdf2+0x4>
 800036e:	bf00      	nop

08000370 <__cmpdf2>:
 8000370:	f04f 0c01 	mov.w	ip, #1
 8000374:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000378:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800037c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000380:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000384:	bf18      	it	ne
 8000386:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800038a:	d01b      	beq.n	80003c4 <__cmpdf2+0x54>
 800038c:	b001      	add	sp, #4
 800038e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000392:	bf0c      	ite	eq
 8000394:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000398:	ea91 0f03 	teqne	r1, r3
 800039c:	bf02      	ittt	eq
 800039e:	ea90 0f02 	teqeq	r0, r2
 80003a2:	2000      	moveq	r0, #0
 80003a4:	4770      	bxeq	lr
 80003a6:	f110 0f00 	cmn.w	r0, #0
 80003aa:	ea91 0f03 	teq	r1, r3
 80003ae:	bf58      	it	pl
 80003b0:	4299      	cmppl	r1, r3
 80003b2:	bf08      	it	eq
 80003b4:	4290      	cmpeq	r0, r2
 80003b6:	bf2c      	ite	cs
 80003b8:	17d8      	asrcs	r0, r3, #31
 80003ba:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80003be:	f040 0001 	orr.w	r0, r0, #1
 80003c2:	4770      	bx	lr
 80003c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80003c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80003cc:	d102      	bne.n	80003d4 <__cmpdf2+0x64>
 80003ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80003d2:	d107      	bne.n	80003e4 <__cmpdf2+0x74>
 80003d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80003d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80003dc:	d1d6      	bne.n	800038c <__cmpdf2+0x1c>
 80003de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80003e2:	d0d3      	beq.n	800038c <__cmpdf2+0x1c>
 80003e4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop

080003ec <__aeabi_cdrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	4610      	mov	r0, r2
 80003f0:	4662      	mov	r2, ip
 80003f2:	468c      	mov	ip, r1
 80003f4:	4619      	mov	r1, r3
 80003f6:	4663      	mov	r3, ip
 80003f8:	e000      	b.n	80003fc <__aeabi_cdcmpeq>
 80003fa:	bf00      	nop

080003fc <__aeabi_cdcmpeq>:
 80003fc:	b501      	push	{r0, lr}
 80003fe:	f7ff ffb7 	bl	8000370 <__cmpdf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	bf48      	it	mi
 8000406:	f110 0f00 	cmnmi.w	r0, #0
 800040a:	bd01      	pop	{r0, pc}

0800040c <__aeabi_dcmpeq>:
 800040c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000410:	f7ff fff4 	bl	80003fc <__aeabi_cdcmpeq>
 8000414:	bf0c      	ite	eq
 8000416:	2001      	moveq	r0, #1
 8000418:	2000      	movne	r0, #0
 800041a:	f85d fb08 	ldr.w	pc, [sp], #8
 800041e:	bf00      	nop

08000420 <__aeabi_dcmplt>:
 8000420:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000424:	f7ff ffea 	bl	80003fc <__aeabi_cdcmpeq>
 8000428:	bf34      	ite	cc
 800042a:	2001      	movcc	r0, #1
 800042c:	2000      	movcs	r0, #0
 800042e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000432:	bf00      	nop

08000434 <__aeabi_dcmple>:
 8000434:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000438:	f7ff ffe0 	bl	80003fc <__aeabi_cdcmpeq>
 800043c:	bf94      	ite	ls
 800043e:	2001      	movls	r0, #1
 8000440:	2000      	movhi	r0, #0
 8000442:	f85d fb08 	ldr.w	pc, [sp], #8
 8000446:	bf00      	nop

08000448 <__aeabi_dcmpge>:
 8000448:	f84d ed08 	str.w	lr, [sp, #-8]!
 800044c:	f7ff ffce 	bl	80003ec <__aeabi_cdrcmple>
 8000450:	bf94      	ite	ls
 8000452:	2001      	movls	r0, #1
 8000454:	2000      	movhi	r0, #0
 8000456:	f85d fb08 	ldr.w	pc, [sp], #8
 800045a:	bf00      	nop

0800045c <__aeabi_dcmpgt>:
 800045c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000460:	f7ff ffc4 	bl	80003ec <__aeabi_cdrcmple>
 8000464:	bf34      	ite	cc
 8000466:	2001      	movcc	r0, #1
 8000468:	2000      	movcs	r0, #0
 800046a:	f85d fb08 	ldr.w	pc, [sp], #8
 800046e:	bf00      	nop

08000470 <__aeabi_uldivmod>:
 8000470:	b953      	cbnz	r3, 8000488 <__aeabi_uldivmod+0x18>
 8000472:	b94a      	cbnz	r2, 8000488 <__aeabi_uldivmod+0x18>
 8000474:	2900      	cmp	r1, #0
 8000476:	bf08      	it	eq
 8000478:	2800      	cmpeq	r0, #0
 800047a:	bf1c      	itt	ne
 800047c:	f04f 31ff 	movne.w	r1, #4294967295
 8000480:	f04f 30ff 	movne.w	r0, #4294967295
 8000484:	f000 b988 	b.w	8000798 <__aeabi_idiv0>
 8000488:	f1ad 0c08 	sub.w	ip, sp, #8
 800048c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000490:	f000 f806 	bl	80004a0 <__udivmoddi4>
 8000494:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000498:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800049c:	b004      	add	sp, #16
 800049e:	4770      	bx	lr

080004a0 <__udivmoddi4>:
 80004a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80004a4:	9d08      	ldr	r5, [sp, #32]
 80004a6:	468e      	mov	lr, r1
 80004a8:	4604      	mov	r4, r0
 80004aa:	4688      	mov	r8, r1
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d14a      	bne.n	8000546 <__udivmoddi4+0xa6>
 80004b0:	428a      	cmp	r2, r1
 80004b2:	4617      	mov	r7, r2
 80004b4:	d962      	bls.n	800057c <__udivmoddi4+0xdc>
 80004b6:	fab2 f682 	clz	r6, r2
 80004ba:	b14e      	cbz	r6, 80004d0 <__udivmoddi4+0x30>
 80004bc:	f1c6 0320 	rsb	r3, r6, #32
 80004c0:	fa01 f806 	lsl.w	r8, r1, r6
 80004c4:	fa20 f303 	lsr.w	r3, r0, r3
 80004c8:	40b7      	lsls	r7, r6
 80004ca:	ea43 0808 	orr.w	r8, r3, r8
 80004ce:	40b4      	lsls	r4, r6
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	fa1f fc87 	uxth.w	ip, r7
 80004d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	fb0e 8811 	mls	r8, lr, r1, r8
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fb01 f20c 	mul.w	r2, r1, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d909      	bls.n	8000502 <__udivmoddi4+0x62>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80004f4:	f080 80ea 	bcs.w	80006cc <__udivmoddi4+0x22c>
 80004f8:	429a      	cmp	r2, r3
 80004fa:	f240 80e7 	bls.w	80006cc <__udivmoddi4+0x22c>
 80004fe:	3902      	subs	r1, #2
 8000500:	443b      	add	r3, r7
 8000502:	1a9a      	subs	r2, r3, r2
 8000504:	b2a3      	uxth	r3, r4
 8000506:	fbb2 f0fe 	udiv	r0, r2, lr
 800050a:	fb0e 2210 	mls	r2, lr, r0, r2
 800050e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000512:	fb00 fc0c 	mul.w	ip, r0, ip
 8000516:	459c      	cmp	ip, r3
 8000518:	d909      	bls.n	800052e <__udivmoddi4+0x8e>
 800051a:	18fb      	adds	r3, r7, r3
 800051c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000520:	f080 80d6 	bcs.w	80006d0 <__udivmoddi4+0x230>
 8000524:	459c      	cmp	ip, r3
 8000526:	f240 80d3 	bls.w	80006d0 <__udivmoddi4+0x230>
 800052a:	443b      	add	r3, r7
 800052c:	3802      	subs	r0, #2
 800052e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000532:	eba3 030c 	sub.w	r3, r3, ip
 8000536:	2100      	movs	r1, #0
 8000538:	b11d      	cbz	r5, 8000542 <__udivmoddi4+0xa2>
 800053a:	40f3      	lsrs	r3, r6
 800053c:	2200      	movs	r2, #0
 800053e:	e9c5 3200 	strd	r3, r2, [r5]
 8000542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000546:	428b      	cmp	r3, r1
 8000548:	d905      	bls.n	8000556 <__udivmoddi4+0xb6>
 800054a:	b10d      	cbz	r5, 8000550 <__udivmoddi4+0xb0>
 800054c:	e9c5 0100 	strd	r0, r1, [r5]
 8000550:	2100      	movs	r1, #0
 8000552:	4608      	mov	r0, r1
 8000554:	e7f5      	b.n	8000542 <__udivmoddi4+0xa2>
 8000556:	fab3 f183 	clz	r1, r3
 800055a:	2900      	cmp	r1, #0
 800055c:	d146      	bne.n	80005ec <__udivmoddi4+0x14c>
 800055e:	4573      	cmp	r3, lr
 8000560:	d302      	bcc.n	8000568 <__udivmoddi4+0xc8>
 8000562:	4282      	cmp	r2, r0
 8000564:	f200 8105 	bhi.w	8000772 <__udivmoddi4+0x2d2>
 8000568:	1a84      	subs	r4, r0, r2
 800056a:	eb6e 0203 	sbc.w	r2, lr, r3
 800056e:	2001      	movs	r0, #1
 8000570:	4690      	mov	r8, r2
 8000572:	2d00      	cmp	r5, #0
 8000574:	d0e5      	beq.n	8000542 <__udivmoddi4+0xa2>
 8000576:	e9c5 4800 	strd	r4, r8, [r5]
 800057a:	e7e2      	b.n	8000542 <__udivmoddi4+0xa2>
 800057c:	2a00      	cmp	r2, #0
 800057e:	f000 8090 	beq.w	80006a2 <__udivmoddi4+0x202>
 8000582:	fab2 f682 	clz	r6, r2
 8000586:	2e00      	cmp	r6, #0
 8000588:	f040 80a4 	bne.w	80006d4 <__udivmoddi4+0x234>
 800058c:	1a8a      	subs	r2, r1, r2
 800058e:	0c03      	lsrs	r3, r0, #16
 8000590:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000594:	b280      	uxth	r0, r0
 8000596:	b2bc      	uxth	r4, r7
 8000598:	2101      	movs	r1, #1
 800059a:	fbb2 fcfe 	udiv	ip, r2, lr
 800059e:	fb0e 221c 	mls	r2, lr, ip, r2
 80005a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80005a6:	fb04 f20c 	mul.w	r2, r4, ip
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x11e>
 80005ae:	18fb      	adds	r3, r7, r3
 80005b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80005b4:	d202      	bcs.n	80005bc <__udivmoddi4+0x11c>
 80005b6:	429a      	cmp	r2, r3
 80005b8:	f200 80e0 	bhi.w	800077c <__udivmoddi4+0x2dc>
 80005bc:	46c4      	mov	ip, r8
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80005c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80005c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80005cc:	fb02 f404 	mul.w	r4, r2, r4
 80005d0:	429c      	cmp	r4, r3
 80005d2:	d907      	bls.n	80005e4 <__udivmoddi4+0x144>
 80005d4:	18fb      	adds	r3, r7, r3
 80005d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80005da:	d202      	bcs.n	80005e2 <__udivmoddi4+0x142>
 80005dc:	429c      	cmp	r4, r3
 80005de:	f200 80ca 	bhi.w	8000776 <__udivmoddi4+0x2d6>
 80005e2:	4602      	mov	r2, r0
 80005e4:	1b1b      	subs	r3, r3, r4
 80005e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80005ea:	e7a5      	b.n	8000538 <__udivmoddi4+0x98>
 80005ec:	f1c1 0620 	rsb	r6, r1, #32
 80005f0:	408b      	lsls	r3, r1
 80005f2:	fa22 f706 	lsr.w	r7, r2, r6
 80005f6:	431f      	orrs	r7, r3
 80005f8:	fa0e f401 	lsl.w	r4, lr, r1
 80005fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000600:	fa2e fe06 	lsr.w	lr, lr, r6
 8000604:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000608:	4323      	orrs	r3, r4
 800060a:	fa00 f801 	lsl.w	r8, r0, r1
 800060e:	fa1f fc87 	uxth.w	ip, r7
 8000612:	fbbe f0f9 	udiv	r0, lr, r9
 8000616:	0c1c      	lsrs	r4, r3, #16
 8000618:	fb09 ee10 	mls	lr, r9, r0, lr
 800061c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000620:	fb00 fe0c 	mul.w	lr, r0, ip
 8000624:	45a6      	cmp	lr, r4
 8000626:	fa02 f201 	lsl.w	r2, r2, r1
 800062a:	d909      	bls.n	8000640 <__udivmoddi4+0x1a0>
 800062c:	193c      	adds	r4, r7, r4
 800062e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000632:	f080 809c 	bcs.w	800076e <__udivmoddi4+0x2ce>
 8000636:	45a6      	cmp	lr, r4
 8000638:	f240 8099 	bls.w	800076e <__udivmoddi4+0x2ce>
 800063c:	3802      	subs	r0, #2
 800063e:	443c      	add	r4, r7
 8000640:	eba4 040e 	sub.w	r4, r4, lr
 8000644:	fa1f fe83 	uxth.w	lr, r3
 8000648:	fbb4 f3f9 	udiv	r3, r4, r9
 800064c:	fb09 4413 	mls	r4, r9, r3, r4
 8000650:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000654:	fb03 fc0c 	mul.w	ip, r3, ip
 8000658:	45a4      	cmp	ip, r4
 800065a:	d908      	bls.n	800066e <__udivmoddi4+0x1ce>
 800065c:	193c      	adds	r4, r7, r4
 800065e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000662:	f080 8082 	bcs.w	800076a <__udivmoddi4+0x2ca>
 8000666:	45a4      	cmp	ip, r4
 8000668:	d97f      	bls.n	800076a <__udivmoddi4+0x2ca>
 800066a:	3b02      	subs	r3, #2
 800066c:	443c      	add	r4, r7
 800066e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000672:	eba4 040c 	sub.w	r4, r4, ip
 8000676:	fba0 ec02 	umull	lr, ip, r0, r2
 800067a:	4564      	cmp	r4, ip
 800067c:	4673      	mov	r3, lr
 800067e:	46e1      	mov	r9, ip
 8000680:	d362      	bcc.n	8000748 <__udivmoddi4+0x2a8>
 8000682:	d05f      	beq.n	8000744 <__udivmoddi4+0x2a4>
 8000684:	b15d      	cbz	r5, 800069e <__udivmoddi4+0x1fe>
 8000686:	ebb8 0203 	subs.w	r2, r8, r3
 800068a:	eb64 0409 	sbc.w	r4, r4, r9
 800068e:	fa04 f606 	lsl.w	r6, r4, r6
 8000692:	fa22 f301 	lsr.w	r3, r2, r1
 8000696:	431e      	orrs	r6, r3
 8000698:	40cc      	lsrs	r4, r1
 800069a:	e9c5 6400 	strd	r6, r4, [r5]
 800069e:	2100      	movs	r1, #0
 80006a0:	e74f      	b.n	8000542 <__udivmoddi4+0xa2>
 80006a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80006a6:	0c01      	lsrs	r1, r0, #16
 80006a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80006ac:	b280      	uxth	r0, r0
 80006ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80006b2:	463b      	mov	r3, r7
 80006b4:	4638      	mov	r0, r7
 80006b6:	463c      	mov	r4, r7
 80006b8:	46b8      	mov	r8, r7
 80006ba:	46be      	mov	lr, r7
 80006bc:	2620      	movs	r6, #32
 80006be:	fbb1 f1f7 	udiv	r1, r1, r7
 80006c2:	eba2 0208 	sub.w	r2, r2, r8
 80006c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80006ca:	e766      	b.n	800059a <__udivmoddi4+0xfa>
 80006cc:	4601      	mov	r1, r0
 80006ce:	e718      	b.n	8000502 <__udivmoddi4+0x62>
 80006d0:	4610      	mov	r0, r2
 80006d2:	e72c      	b.n	800052e <__udivmoddi4+0x8e>
 80006d4:	f1c6 0220 	rsb	r2, r6, #32
 80006d8:	fa2e f302 	lsr.w	r3, lr, r2
 80006dc:	40b7      	lsls	r7, r6
 80006de:	40b1      	lsls	r1, r6
 80006e0:	fa20 f202 	lsr.w	r2, r0, r2
 80006e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006e8:	430a      	orrs	r2, r1
 80006ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80006ee:	b2bc      	uxth	r4, r7
 80006f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80006f4:	0c11      	lsrs	r1, r2, #16
 80006f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80006fa:	fb08 f904 	mul.w	r9, r8, r4
 80006fe:	40b0      	lsls	r0, r6
 8000700:	4589      	cmp	r9, r1
 8000702:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000706:	b280      	uxth	r0, r0
 8000708:	d93e      	bls.n	8000788 <__udivmoddi4+0x2e8>
 800070a:	1879      	adds	r1, r7, r1
 800070c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000710:	d201      	bcs.n	8000716 <__udivmoddi4+0x276>
 8000712:	4589      	cmp	r9, r1
 8000714:	d81f      	bhi.n	8000756 <__udivmoddi4+0x2b6>
 8000716:	eba1 0109 	sub.w	r1, r1, r9
 800071a:	fbb1 f9fe 	udiv	r9, r1, lr
 800071e:	fb09 f804 	mul.w	r8, r9, r4
 8000722:	fb0e 1119 	mls	r1, lr, r9, r1
 8000726:	b292      	uxth	r2, r2
 8000728:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800072c:	4542      	cmp	r2, r8
 800072e:	d229      	bcs.n	8000784 <__udivmoddi4+0x2e4>
 8000730:	18ba      	adds	r2, r7, r2
 8000732:	f109 31ff 	add.w	r1, r9, #4294967295
 8000736:	d2c4      	bcs.n	80006c2 <__udivmoddi4+0x222>
 8000738:	4542      	cmp	r2, r8
 800073a:	d2c2      	bcs.n	80006c2 <__udivmoddi4+0x222>
 800073c:	f1a9 0102 	sub.w	r1, r9, #2
 8000740:	443a      	add	r2, r7
 8000742:	e7be      	b.n	80006c2 <__udivmoddi4+0x222>
 8000744:	45f0      	cmp	r8, lr
 8000746:	d29d      	bcs.n	8000684 <__udivmoddi4+0x1e4>
 8000748:	ebbe 0302 	subs.w	r3, lr, r2
 800074c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000750:	3801      	subs	r0, #1
 8000752:	46e1      	mov	r9, ip
 8000754:	e796      	b.n	8000684 <__udivmoddi4+0x1e4>
 8000756:	eba7 0909 	sub.w	r9, r7, r9
 800075a:	4449      	add	r1, r9
 800075c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000760:	fbb1 f9fe 	udiv	r9, r1, lr
 8000764:	fb09 f804 	mul.w	r8, r9, r4
 8000768:	e7db      	b.n	8000722 <__udivmoddi4+0x282>
 800076a:	4673      	mov	r3, lr
 800076c:	e77f      	b.n	800066e <__udivmoddi4+0x1ce>
 800076e:	4650      	mov	r0, sl
 8000770:	e766      	b.n	8000640 <__udivmoddi4+0x1a0>
 8000772:	4608      	mov	r0, r1
 8000774:	e6fd      	b.n	8000572 <__udivmoddi4+0xd2>
 8000776:	443b      	add	r3, r7
 8000778:	3a02      	subs	r2, #2
 800077a:	e733      	b.n	80005e4 <__udivmoddi4+0x144>
 800077c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000780:	443b      	add	r3, r7
 8000782:	e71c      	b.n	80005be <__udivmoddi4+0x11e>
 8000784:	4649      	mov	r1, r9
 8000786:	e79c      	b.n	80006c2 <__udivmoddi4+0x222>
 8000788:	eba1 0109 	sub.w	r1, r1, r9
 800078c:	46c4      	mov	ip, r8
 800078e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000792:	fb09 f804 	mul.w	r8, r9, r4
 8000796:	e7c4      	b.n	8000722 <__udivmoddi4+0x282>

08000798 <__aeabi_idiv0>:
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	0000      	movs	r0, r0
	...

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b510      	push	{r4, lr}
 80007a2:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a4:	2238      	movs	r2, #56	@ 0x38
 80007a6:	2100      	movs	r1, #0
 80007a8:	a806      	add	r0, sp, #24
 80007aa:	f007 ffa7 	bl	80086fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ae:	2000      	movs	r0, #0
 80007b0:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80007b4:	e9cd 0003 	strd	r0, r0, [sp, #12]
 80007b8:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80007ba:	f003 fbe7 	bl	8003f8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007be:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8000810 <SystemClock_Config+0x70>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007c2:	2302      	movs	r3, #2
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007c4:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007c6:	2403      	movs	r4, #3
 80007c8:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007cc:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007d0:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007d2:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007d4:	2206      	movs	r2, #6
 80007d6:	2355      	movs	r3, #85	@ 0x55
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d8:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80007da:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLN = 85;
 80007de:	e9cd 230f 	strd	r2, r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e2:	f003 fc4d 	bl	8004080 <HAL_RCC_OscConfig>
 80007e6:	b108      	cbz	r0, 80007ec <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ea:	e7fe      	b.n	80007ea <SystemClock_Config+0x4a>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ec:	2104      	movs	r1, #4
 80007ee:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f0:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007f2:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007f6:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fa:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007fe:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000800:	f003 febc 	bl	800457c <HAL_RCC_ClockConfig>
 8000804:	b108      	cbz	r0, 800080a <SystemClock_Config+0x6a>
 8000806:	b672      	cpsid	i
  while (1)
 8000808:	e7fe      	b.n	8000808 <SystemClock_Config+0x68>
}
 800080a:	b014      	add	sp, #80	@ 0x50
 800080c:	bd10      	pop	{r4, pc}
 800080e:	bf00      	nop
 8000810:	00000009 	.word	0x00000009
 8000814:	00010000 	.word	0x00010000

08000818 <main>:
{
 8000818:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800081c:	2400      	movs	r4, #0
{
 800081e:	b0cb      	sub	sp, #300	@ 0x12c
  HAL_Init();
 8000820:	f001 f92a 	bl	8001a78 <HAL_Init>
  stand_im_init_1();
 8000824:	f007 fd2c 	bl	8008280 <stand_im_init_1>
  SystemClock_Config();
 8000828:	f7ff ffba 	bl	80007a0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	e9cd 4432 	strd	r4, r4, [sp, #200]	@ 0xc8
 8000830:	e9cd 4434 	strd	r4, r4, [sp, #208]	@ 0xd0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000834:	4da6      	ldr	r5, [pc, #664]	@ (8000ad0 <main+0x2b8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	9436      	str	r4, [sp, #216]	@ 0xd8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000838:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000840:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000842:	f003 0304 	and.w	r3, r3, #4
 8000846:	9305      	str	r3, [sp, #20]
 8000848:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800084a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800084c:	f043 0320 	orr.w	r3, r3, #32
 8000850:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000852:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000854:	f003 0320 	and.w	r3, r3, #32
 8000858:	9306      	str	r3, [sp, #24]
 800085a:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000864:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	9307      	str	r3, [sp, #28]
 800086c:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000876:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000878:	f003 0302 	and.w	r3, r3, #2
 800087c:	9308      	str	r3, [sp, #32]
 800087e:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000880:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8000882:	f043 0308 	orr.w	r3, r3, #8
 8000886:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8000888:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800088a:	f003 0308 	and.w	r3, r3, #8
 800088e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000890:	4622      	mov	r2, r4
 8000892:	2140      	movs	r1, #64	@ 0x40
 8000894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800089a:	f002 f9a5 	bl	8002be8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5, GPIO_PIN_RESET);
 800089e:	488d      	ldr	r0, [pc, #564]	@ (8000ad4 <main+0x2bc>)
 80008a0:	4622      	mov	r2, r4
 80008a2:	f24c 0120 	movw	r1, #49184	@ 0xc020
 80008a6:	f002 f99f 	bl	8002be8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ERR_CLEAR_GPIO_Port, ERR_CLEAR_Pin, GPIO_PIN_RESET);
 80008aa:	4622      	mov	r2, r4
 80008ac:	488a      	ldr	r0, [pc, #552]	@ (8000ad8 <main+0x2c0>)
 80008ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008b2:	f002 f999 	bl	8002be8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80008b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008ba:	4887      	ldr	r0, [pc, #540]	@ (8000ad8 <main+0x2c0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	9434      	str	r4, [sp, #208]	@ 0xd0
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008be:	a932      	add	r1, sp, #200	@ 0xc8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c0:	2601      	movs	r6, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c2:	e9cd 3432 	strd	r3, r4, [sp, #200]	@ 0xc8
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f002 f887 	bl	80029d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2340      	movs	r3, #64	@ 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	a932      	add	r1, sp, #200	@ 0xc8
 80008ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	e9cd 3632 	strd	r3, r6, [sp, #200]	@ 0xc8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	e9cd 4434 	strd	r4, r4, [sp, #208]	@ 0xd0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f002 f87d 	bl	80029d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5;
 80008de:	f24c 0320 	movw	r3, #49184	@ 0xc020
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	487c      	ldr	r0, [pc, #496]	@ (8000ad4 <main+0x2bc>)
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5;
 80008e4:	9332      	str	r3, [sp, #200]	@ 0xc8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e6:	a932      	add	r1, sp, #200	@ 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	9435      	str	r4, [sp, #212]	@ 0xd4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f002 f873 	bl	80029d8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ERR_CLEAR_Pin;
 80008f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  HAL_GPIO_Init(ERR_CLEAR_GPIO_Port, &GPIO_InitStruct);
 80008f6:	4878      	ldr	r0, [pc, #480]	@ (8000ad8 <main+0x2c0>)
  GPIO_InitStruct.Pin = ERR_CLEAR_Pin;
 80008f8:	9332      	str	r3, [sp, #200]	@ 0xc8
  HAL_GPIO_Init(ERR_CLEAR_GPIO_Port, &GPIO_InitStruct);
 80008fa:	a932      	add	r1, sp, #200	@ 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	e9cd 6433 	strd	r6, r4, [sp, #204]	@ 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	9435      	str	r4, [sp, #212]	@ 0xd4
  HAL_GPIO_Init(ERR_CLEAR_GPIO_Port, &GPIO_InitStruct);
 8000902:	f002 f869 	bl	80029d8 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000906:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000908:	f043 0304 	orr.w	r3, r3, #4
 800090c:	64ab      	str	r3, [r5, #72]	@ 0x48
 800090e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	9303      	str	r3, [sp, #12]
 8000916:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000918:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800091a:	4333      	orrs	r3, r6
 800091c:	64ab      	str	r3, [r5, #72]	@ 0x48
 800091e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
  hhrtim1.Instance = HRTIM1;
 8000920:	4d6e      	ldr	r5, [pc, #440]	@ (8000adc <main+0x2c4>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000922:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 10, 0);
 8000924:	4622      	mov	r2, r4
 8000926:	210a      	movs	r1, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000928:	9304      	str	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 10, 0);
 800092a:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800092c:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 10, 0);
 800092e:	f001 ff05 	bl	800273c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000932:	200b      	movs	r0, #11
 8000934:	f001 ff3e 	bl	80027b4 <HAL_NVIC_EnableIRQ>
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000938:	2260      	movs	r2, #96	@ 0x60
 800093a:	4621      	mov	r1, r4
 800093c:	a832      	add	r0, sp, #200	@ 0xc8
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 800093e:	e9cd 4413 	strd	r4, r4, [sp, #76]	@ 0x4c
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
 8000942:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000946:	e9cd 4417 	strd	r4, r4, [sp, #92]	@ 0x5c
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 800094a:	9412      	str	r4, [sp, #72]	@ 0x48
  HRTIM_FaultBlankingCfgTypeDef pFaultBlkCfg = {0};
 800094c:	940c      	str	r4, [sp, #48]	@ 0x30
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 800094e:	9416      	str	r4, [sp, #88]	@ 0x58
  HRTIM_FaultCfgTypeDef pFaultCfg = {0};
 8000950:	9415      	str	r4, [sp, #84]	@ 0x54
  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 8000952:	940b      	str	r4, [sp, #44]	@ 0x2c
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8000954:	9419      	str	r4, [sp, #100]	@ 0x64
  HRTIM_ADCTriggerCfgTypeDef pADCTriggerCfg = {0};
 8000956:	940a      	str	r4, [sp, #40]	@ 0x28
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8000958:	f007 fed0 	bl	80086fc <memset>
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 800095c:	2224      	movs	r2, #36	@ 0x24
 800095e:	4621      	mov	r1, r4
 8000960:	a829      	add	r0, sp, #164	@ 0xa4
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8000962:	e9cd 4410 	strd	r4, r4, [sp, #64]	@ 0x40
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8000966:	e9cd 441b 	strd	r4, r4, [sp, #108]	@ 0x6c
 800096a:	e9cd 441d 	strd	r4, r4, [sp, #116]	@ 0x74
 800096e:	e9cd 441f 	strd	r4, r4, [sp, #124]	@ 0x7c
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8000972:	940f      	str	r4, [sp, #60]	@ 0x3c
  HRTIM_TimerCtlTypeDef pTimerCtl = {0};
 8000974:	941a      	str	r4, [sp, #104]	@ 0x68
  HRTIM_DeadTimeCfgTypeDef pDeadTimeCfg = {0};
 8000976:	f007 fec1 	bl	80086fc <memset>
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800097a:	2220      	movs	r2, #32
 800097c:	4621      	mov	r1, r4
 800097e:	a821      	add	r0, sp, #132	@ 0x84
 8000980:	f007 febc 	bl	80086fc <memset>
  hhrtim1.Instance = HRTIM1;
 8000984:	4b56      	ldr	r3, [pc, #344]	@ (8000ae0 <main+0x2c8>)
 8000986:	602b      	str	r3, [r5, #0]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 8000988:	4628      	mov	r0, r5
  hhrtim1.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800098a:	e9c5 4401 	strd	r4, r4, [r5, #4]
  if (HAL_HRTIM_Init(&hhrtim1) != HAL_OK)
 800098e:	f002 f9d9 	bl	8002d44 <HAL_HRTIM_Init>
 8000992:	b108      	cbz	r0, 8000998 <main+0x180>
 8000994:	b672      	cpsid	i
  while (1)
 8000996:	e7fe      	b.n	8000996 <main+0x17e>
  if (HAL_HRTIM_DLLCalibrationStart(&hhrtim1, HRTIM_CALIBRATIONRATE_3) != HAL_OK)
 8000998:	210c      	movs	r1, #12
 800099a:	4628      	mov	r0, r5
 800099c:	f002 fa2c 	bl	8002df8 <HAL_HRTIM_DLLCalibrationStart>
 80009a0:	b108      	cbz	r0, 80009a6 <main+0x18e>
 80009a2:	b672      	cpsid	i
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <main+0x18c>
  if (HAL_HRTIM_PollForDLLCalibration(&hhrtim1, 10) != HAL_OK)
 80009a6:	210a      	movs	r1, #10
 80009a8:	4628      	mov	r0, r5
 80009aa:	f002 fa5d 	bl	8002e68 <HAL_HRTIM_PollForDLLCalibration>
 80009ae:	4601      	mov	r1, r0
 80009b0:	b108      	cbz	r0, 80009b6 <main+0x19e>
 80009b2:	b672      	cpsid	i
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <main+0x19c>
  if (HAL_HRTIM_FaultPrescalerConfig(&hhrtim1, HRTIM_FAULTPRESCALER_DIV1) != HAL_OK)
 80009b6:	4628      	mov	r0, r5
 80009b8:	f002 fb94 	bl	80030e4 <HAL_HRTIM_FaultPrescalerConfig>
 80009bc:	b108      	cbz	r0, 80009c2 <main+0x1aa>
 80009be:	b672      	cpsid	i
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <main+0x1a8>
  pFaultCfg.Filter = HRTIM_FAULTFILTER_3;
 80009c2:	2202      	movs	r2, #2
 80009c4:	2318      	movs	r3, #24
 80009c6:	e9cd 2313 	strd	r2, r3, [sp, #76]	@ 0x4c
  pFaultCfg.Source = HRTIM_FAULTSOURCE_DIGITALINPUT;
 80009ca:	9012      	str	r0, [sp, #72]	@ 0x48
  pFaultCfg.Lock = HRTIM_FAULTLOCK_READWRITE;
 80009cc:	9015      	str	r0, [sp, #84]	@ 0x54
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultCfg) != HAL_OK)
 80009ce:	aa12      	add	r2, sp, #72	@ 0x48
 80009d0:	4631      	mov	r1, r6
 80009d2:	4628      	mov	r0, r5
 80009d4:	f002 faa0 	bl	8002f18 <HAL_HRTIM_FaultConfig>
 80009d8:	b108      	cbz	r0, 80009de <main+0x1c6>
 80009da:	b672      	cpsid	i
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x1c4>
  pFaultBlkCfg.ResetMode = HRTIM_FAULTCOUNTERRST_UNCONDITIONAL;
 80009de:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
 80009e2:	aa0c      	add	r2, sp, #48	@ 0x30
 80009e4:	4631      	mov	r1, r6
 80009e6:	4628      	mov	r0, r5
  pFaultBlkCfg.BlankingSource = HRTIM_FAULTBLANKINGMODE_MOVING;
 80009e8:	960e      	str	r6, [sp, #56]	@ 0x38
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
 80009ea:	f002 fc29 	bl	8003240 <HAL_HRTIM_FaultCounterConfig>
 80009ee:	b108      	cbz	r0, 80009f4 <main+0x1dc>
 80009f0:	b672      	cpsid	i
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <main+0x1da>
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_1, &pFaultBlkCfg) != HAL_OK)
 80009f4:	aa0c      	add	r2, sp, #48	@ 0x30
 80009f6:	4631      	mov	r1, r6
 80009f8:	4628      	mov	r0, r5
 80009fa:	f002 fb95 	bl	8003128 <HAL_HRTIM_FaultBlankingConfigAndEnable>
 80009fe:	4604      	mov	r4, r0
 8000a00:	b108      	cbz	r0, 8000a06 <main+0x1ee>
 8000a02:	b672      	cpsid	i
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <main+0x1ec>
  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_1, HRTIM_FAULTMODECTL_DISABLED);
 8000a06:	4602      	mov	r2, r0
 8000a08:	4631      	mov	r1, r6
 8000a0a:	4628      	mov	r0, r5
 8000a0c:	f002 fcb4 	bl	8003378 <HAL_HRTIM_FaultModeCtl>
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_4, &pFaultBlkCfg) != HAL_OK)
 8000a10:	aa0c      	add	r2, sp, #48	@ 0x30
 8000a12:	2108      	movs	r1, #8
 8000a14:	4628      	mov	r0, r5
  pFaultBlkCfg.BlankingSource = HRTIM_FAULTBLANKINGMODE_RSTALIGNED;
 8000a16:	940e      	str	r4, [sp, #56]	@ 0x38
  if (HAL_HRTIM_FaultCounterConfig(&hhrtim1, HRTIM_FAULT_4, &pFaultBlkCfg) != HAL_OK)
 8000a18:	f002 fc12 	bl	8003240 <HAL_HRTIM_FaultCounterConfig>
 8000a1c:	b108      	cbz	r0, 8000a22 <main+0x20a>
 8000a1e:	b672      	cpsid	i
  while (1)
 8000a20:	e7fe      	b.n	8000a20 <main+0x208>
  if (HAL_HRTIM_FaultBlankingConfigAndEnable(&hhrtim1, HRTIM_FAULT_4, &pFaultBlkCfg) != HAL_OK)
 8000a22:	aa0c      	add	r2, sp, #48	@ 0x30
 8000a24:	2108      	movs	r1, #8
 8000a26:	4628      	mov	r0, r5
 8000a28:	f002 fb7e 	bl	8003128 <HAL_HRTIM_FaultBlankingConfigAndEnable>
 8000a2c:	b108      	cbz	r0, 8000a32 <main+0x21a>
 8000a2e:	b672      	cpsid	i
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <main+0x218>
  pFaultCfg.Filter = HRTIM_FAULTFILTER_NONE;
 8000a32:	9014      	str	r0, [sp, #80]	@ 0x50
  if (HAL_HRTIM_FaultConfig(&hhrtim1, HRTIM_FAULT_4, &pFaultCfg) != HAL_OK)
 8000a34:	aa12      	add	r2, sp, #72	@ 0x48
 8000a36:	4628      	mov	r0, r5
 8000a38:	2108      	movs	r1, #8
 8000a3a:	f002 fa6d 	bl	8002f18 <HAL_HRTIM_FaultConfig>
 8000a3e:	b108      	cbz	r0, 8000a44 <main+0x22c>
 8000a40:	b672      	cpsid	i
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <main+0x22a>
  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_4, HRTIM_FAULTMODECTL_DISABLED);
 8000a44:	4825      	ldr	r0, [pc, #148]	@ (8000adc <main+0x2c4>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	2108      	movs	r1, #8
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_MASTER;
 8000a4a:	2401      	movs	r4, #1
  HAL_HRTIM_FaultModeCtl(&hhrtim1, HRTIM_FAULT_4, HRTIM_FAULTMODECTL_DISABLED);
 8000a4c:	f002 fc94 	bl	8003378 <HAL_HRTIM_FaultModeCtl>
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_MASTER;
 8000a50:	2300      	movs	r3, #0
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 8000a52:	aa0a      	add	r2, sp, #40	@ 0x28
 8000a54:	4821      	ldr	r0, [pc, #132]	@ (8000adc <main+0x2c4>)
 8000a56:	4621      	mov	r1, r4
  pADCTriggerCfg.UpdateSource = HRTIM_ADCTRIGGERUPDATE_MASTER;
 8000a58:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
  if (HAL_HRTIM_ADCTriggerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, &pADCTriggerCfg) != HAL_OK)
 8000a5c:	f002 fcc6 	bl	80033ec <HAL_HRTIM_ADCTriggerConfig>
 8000a60:	4602      	mov	r2, r0
 8000a62:	b108      	cbz	r0, 8000a68 <main+0x250>
 8000a64:	b672      	cpsid	i
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <main+0x24e>
  if (HAL_HRTIM_ADCPostScalerConfig(&hhrtim1, HRTIM_ADCTRIGGER_1, 0x0) != HAL_OK)
 8000a68:	481c      	ldr	r0, [pc, #112]	@ (8000adc <main+0x2c4>)
 8000a6a:	4621      	mov	r1, r4
 8000a6c:	f002 fde6 	bl	800363c <HAL_HRTIM_ADCPostScalerConfig>
 8000a70:	b108      	cbz	r0, 8000a76 <main+0x25e>
 8000a72:	b672      	cpsid	i
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <main+0x25c>
  pTimeBaseCfg.Period = HRTIM_PERIOD;
 8000a76:	f244 2368 	movw	r3, #17000	@ 0x4268
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8000a7a:	9017      	str	r0, [sp, #92]	@ 0x5c
  pTimeBaseCfg.Period = HRTIM_PERIOD;
 8000a7c:	9316      	str	r3, [sp, #88]	@ 0x58
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000a7e:	f04f 0b04 	mov.w	fp, #4
 8000a82:	2308      	movs	r3, #8
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8000a84:	4815      	ldr	r0, [pc, #84]	@ (8000adc <main+0x2c4>)
 8000a86:	aa16      	add	r2, sp, #88	@ 0x58
 8000a88:	2106      	movs	r1, #6
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8000a8a:	e9cd b318 	strd	fp, r3, [sp, #96]	@ 0x60
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimeBaseCfg) != HAL_OK)
 8000a8e:	f002 fa0f 	bl	8002eb0 <HAL_HRTIM_TimeBaseConfig>
 8000a92:	b108      	cbz	r0, 8000a98 <main+0x280>
 8000a94:	b672      	cpsid	i
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <main+0x27e>
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8000a98:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
  pTimerCfg.DMARequests = HRTIM_MASTER_DMA_NONE;
 8000a9c:	e9cd 4032 	strd	r4, r0, [sp, #200]	@ 0xc8
  pTimerCfg.DMADstAddress = 0x0000;
 8000aa0:	e9cd 0034 	strd	r0, r0, [sp, #208]	@ 0xd0
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8000aa4:	e9cd 4036 	strd	r4, r0, [sp, #216]	@ 0xd8
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8000aa8:	e9cd 0038 	strd	r0, r0, [sp, #224]	@ 0xe0
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8000aac:	e9cd 003a 	strd	r0, r0, [sp, #232]	@ 0xe8
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8000ab0:	e9cd 003d 	strd	r0, r0, [sp, #244]	@ 0xf4
  pTimerCfg.ReSyncUpdate = HRTIM_TIMERESYNC_UPDATE_UNCONDITIONAL;
 8000ab4:	9049      	str	r0, [sp, #292]	@ 0x124
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_ENABLED;
 8000ab6:	933c      	str	r3, [sp, #240]	@ 0xf0
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8000ab8:	4808      	ldr	r0, [pc, #32]	@ (8000adc <main+0x2c4>)
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 8000aba:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8000abe:	aa32      	add	r2, sp, #200	@ 0xc8
 8000ac0:	2106      	movs	r1, #6
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_ENABLED;
 8000ac2:	933f      	str	r3, [sp, #252]	@ 0xfc
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, &pTimerCfg) != HAL_OK)
 8000ac4:	f002 fe80 	bl	80037c8 <HAL_HRTIM_WaveformTimerConfig>
 8000ac8:	b160      	cbz	r0, 8000ae4 <main+0x2cc>
 8000aca:	b672      	cpsid	i
  while (1)
 8000acc:	e7fe      	b.n	8000acc <main+0x2b4>
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	48000400 	.word	0x48000400
 8000ad8:	48000800 	.word	0x48000800
 8000adc:	200002ec 	.word	0x200002ec
 8000ae0:	40016800 	.word	0x40016800
  pCompareCfg.CompareValue = (HRTIM_PERIOD/2);
 8000ae4:	f242 1334 	movw	r3, #8500	@ 0x2134
 8000ae8:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_MASTER, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000aea:	2106      	movs	r1, #6
 8000aec:	4892      	ldr	r0, [pc, #584]	@ (8000d38 <main+0x520>)
 8000aee:	ab0f      	add	r3, sp, #60	@ 0x3c
 8000af0:	4622      	mov	r2, r4
 8000af2:	f003 f84d 	bl	8003b90 <HAL_HRTIM_WaveformCompareConfig>
 8000af6:	4601      	mov	r1, r0
 8000af8:	b108      	cbz	r0, 8000afe <main+0x2e6>
 8000afa:	b672      	cpsid	i
  while (1)
 8000afc:	e7fe      	b.n	8000afc <main+0x2e4>
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL4;
 8000afe:	2303      	movs	r3, #3
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000b00:	488d      	ldr	r0, [pc, #564]	@ (8000d38 <main+0x520>)
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_MUL4;
 8000b02:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8000b04:	aa16      	add	r2, sp, #88	@ 0x58
 8000b06:	f002 f9d3 	bl	8002eb0 <HAL_HRTIM_TimeBaseConfig>
 8000b0a:	4601      	mov	r1, r0
 8000b0c:	b108      	cbz	r0, 8000b12 <main+0x2fa>
 8000b0e:	b672      	cpsid	i
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <main+0x2f8>
  pTimerCtl.GreaterCMP1 = HRTIM_TIMERGTCMP1_EQUAL;
 8000b12:	901d      	str	r0, [sp, #116]	@ 0x74
  pTimerCtl.DualChannelDacEnable = HRTIM_TIMER_DCDE_DISABLED;
 8000b14:	9020      	str	r0, [sp, #128]	@ 0x80
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8000b16:	aa1a      	add	r2, sp, #104	@ 0x68
 8000b18:	4887      	ldr	r0, [pc, #540]	@ (8000d38 <main+0x520>)
  pTimerCtl.UpDownMode = HRTIM_TIMERUPDOWNMODE_UPDOWN;
 8000b1a:	941a      	str	r4, [sp, #104]	@ 0x68
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCtl) != HAL_OK)
 8000b1c:	f002 ffa4 	bl	8003a68 <HAL_HRTIM_WaveformTimerControl>
 8000b20:	4602      	mov	r2, r0
 8000b22:	b108      	cbz	r0, 8000b28 <main+0x310>
 8000b24:	b672      	cpsid	i
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <main+0x30e>
  if (HAL_HRTIM_RollOverModeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_TIM_FEROM_BOTH|HRTIM_TIM_BMROM_BOTH
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4883      	ldr	r0, [pc, #524]	@ (8000d38 <main+0x520>)
 8000b2c:	f002 fe22 	bl	8003774 <HAL_HRTIM_RollOverModeConfig>
 8000b30:	4601      	mov	r1, r0
 8000b32:	b108      	cbz	r0, 8000b38 <main+0x320>
 8000b34:	b672      	cpsid	i
  while (1)
 8000b36:	e7fe      	b.n	8000b36 <main+0x31e>
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8000b38:	f44f 7380 	mov.w	r3, #256	@ 0x100
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8000b3c:	e9cd 0032 	strd	r0, r0, [sp, #200]	@ 0xc8
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8000b40:	e9cd 003f 	strd	r0, r0, [sp, #252]	@ 0xfc
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8000b44:	e9cd 4041 	strd	r4, r0, [sp, #260]	@ 0x104
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8000b48:	9044      	str	r0, [sp, #272]	@ 0x110
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8000b4a:	9046      	str	r0, [sp, #280]	@ 0x118
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_ENABLED;
 8000b4c:	9343      	str	r3, [sp, #268]	@ 0x10c
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8000b4e:	f04f 0810 	mov.w	r8, #16
 8000b52:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000b56:	4878      	ldr	r0, [pc, #480]	@ (8000d38 <main+0x520>)
 8000b58:	aa32      	add	r2, sp, #200	@ 0xc8
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_ENABLED;
 8000b5a:	e9cd 8347 	strd	r8, r3, [sp, #284]	@ 0x11c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8000b5e:	f002 fe33 	bl	80037c8 <HAL_HRTIM_WaveformTimerConfig>
 8000b62:	b108      	cbz	r0, 8000b68 <main+0x350>
 8000b64:	b672      	cpsid	i
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <main+0x34e>
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCfg) != HAL_OK)
 8000b68:	4873      	ldr	r0, [pc, #460]	@ (8000d38 <main+0x520>)
 8000b6a:	4621      	mov	r1, r4
 8000b6c:	aa32      	add	r2, sp, #200	@ 0xc8
 8000b6e:	f002 fe2b 	bl	80037c8 <HAL_HRTIM_WaveformTimerConfig>
 8000b72:	b108      	cbz	r0, 8000b78 <main+0x360>
 8000b74:	b672      	cpsid	i
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <main+0x35e>
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCfg) != HAL_OK)
 8000b78:	2102      	movs	r1, #2
 8000b7a:	486f      	ldr	r0, [pc, #444]	@ (8000d38 <main+0x520>)
 8000b7c:	aa32      	add	r2, sp, #200	@ 0xc8
 8000b7e:	f002 fe23 	bl	80037c8 <HAL_HRTIM_WaveformTimerConfig>
 8000b82:	4601      	mov	r1, r0
 8000b84:	b108      	cbz	r0, 8000b8a <main+0x372>
 8000b86:	b672      	cpsid	i
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <main+0x370>
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000b8a:	486b      	ldr	r0, [pc, #428]	@ (8000d38 <main+0x520>)
 8000b8c:	ab0f      	add	r3, sp, #60	@ 0x3c
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f002 fffe 	bl	8003b90 <HAL_HRTIM_WaveformCompareConfig>
 8000b94:	4601      	mov	r1, r0
 8000b96:	b108      	cbz	r0, 8000b9c <main+0x384>
 8000b98:	b672      	cpsid	i
  while (1)
 8000b9a:	e7fe      	b.n	8000b9a <main+0x382>
  pDeadTimeCfg.RisingValue = HRTIM_DEADTIME;
 8000b9c:	23aa      	movs	r3, #170	@ 0xaa
  pDeadTimeCfg.RisingLock = HRTIM_TIMDEADTIME_RISINGLOCK_WRITE;
 8000b9e:	e9cd 002b 	strd	r0, r0, [sp, #172]	@ 0xac
  pDeadTimeCfg.FallingLock = HRTIM_TIMDEADTIME_FALLINGLOCK_WRITE;
 8000ba2:	e9cd 002f 	strd	r0, r0, [sp, #188]	@ 0xbc
  pDeadTimeCfg.RisingSignLock = HRTIM_TIMDEADTIME_RISINGSIGNLOCK_WRITE;
 8000ba6:	902d      	str	r0, [sp, #180]	@ 0xb4
  pDeadTimeCfg.FallingSignLock = HRTIM_TIMDEADTIME_FALLINGSIGNLOCK_WRITE;
 8000ba8:	9031      	str	r0, [sp, #196]	@ 0xc4
  pDeadTimeCfg.RisingValue = HRTIM_DEADTIME;
 8000baa:	932a      	str	r3, [sp, #168]	@ 0xa8
  pDeadTimeCfg.FallingValue = HRTIM_DEADTIME;
 8000bac:	932e      	str	r3, [sp, #184]	@ 0xb8
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8000bae:	4862      	ldr	r0, [pc, #392]	@ (8000d38 <main+0x520>)
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_DIV1;
 8000bb0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8000bb4:	aa29      	add	r2, sp, #164	@ 0xa4
  pDeadTimeCfg.Prescaler = HRTIM_TIMDEADTIME_PRESCALERRATIO_DIV1;
 8000bb6:	9329      	str	r3, [sp, #164]	@ 0xa4
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, &pDeadTimeCfg) != HAL_OK)
 8000bb8:	f002 ff9c 	bl	8003af4 <HAL_HRTIM_DeadTimeConfig>
 8000bbc:	b108      	cbz	r0, 8000bc2 <main+0x3aa>
 8000bbe:	b672      	cpsid	i
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <main+0x3a8>
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pDeadTimeCfg) != HAL_OK)
 8000bc2:	485d      	ldr	r0, [pc, #372]	@ (8000d38 <main+0x520>)
 8000bc4:	aa29      	add	r2, sp, #164	@ 0xa4
 8000bc6:	2101      	movs	r1, #1
 8000bc8:	f002 ff94 	bl	8003af4 <HAL_HRTIM_DeadTimeConfig>
 8000bcc:	b108      	cbz	r0, 8000bd2 <main+0x3ba>
 8000bce:	b672      	cpsid	i
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <main+0x3b8>
  if (HAL_HRTIM_DeadTimeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pDeadTimeCfg) != HAL_OK)
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	4858      	ldr	r0, [pc, #352]	@ (8000d38 <main+0x520>)
 8000bd6:	aa29      	add	r2, sp, #164	@ 0xa4
 8000bd8:	f002 ff8c 	bl	8003af4 <HAL_HRTIM_DeadTimeConfig>
 8000bdc:	4601      	mov	r1, r0
 8000bde:	b108      	cbz	r0, 8000be4 <main+0x3cc>
 8000be0:	b672      	cpsid	i
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <main+0x3ca>
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_INACTIVE;
 8000be4:	2320      	movs	r3, #32
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_NONE;
 8000be6:	e9cd 0021 	strd	r0, r0, [sp, #132]	@ 0x84
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8000bea:	e9cd 0024 	strd	r0, r0, [sp, #144]	@ 0x90
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8000bee:	e9cd 0027 	strd	r0, r0, [sp, #156]	@ 0x9c
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8000bf2:	2408      	movs	r4, #8
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_INACTIVE;
 8000bf4:	9326      	str	r3, [sp, #152]	@ 0x98
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000bf6:	4850      	ldr	r0, [pc, #320]	@ (8000d38 <main+0x520>)
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP1;
 8000bf8:	9423      	str	r4, [sp, #140]	@ 0x8c
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8000bfa:	ab21      	add	r3, sp, #132	@ 0x84
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f003 f887 	bl	8003d10 <HAL_HRTIM_WaveformOutputConfig>
 8000c02:	b108      	cbz	r0, 8000c08 <main+0x3f0>
 8000c04:	b672      	cpsid	i
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <main+0x3ee>
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB1, &pOutputCfg) != HAL_OK)
 8000c08:	484b      	ldr	r0, [pc, #300]	@ (8000d38 <main+0x520>)
 8000c0a:	ab21      	add	r3, sp, #132	@ 0x84
 8000c0c:	2204      	movs	r2, #4
 8000c0e:	2101      	movs	r1, #1
 8000c10:	f003 f87e 	bl	8003d10 <HAL_HRTIM_WaveformOutputConfig>
 8000c14:	b108      	cbz	r0, 8000c1a <main+0x402>
 8000c16:	b672      	cpsid	i
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <main+0x400>
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC1, &pOutputCfg) != HAL_OK)
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	4846      	ldr	r0, [pc, #280]	@ (8000d38 <main+0x520>)
 8000c1e:	ab21      	add	r3, sp, #132	@ 0x84
 8000c20:	2210      	movs	r2, #16
 8000c22:	f003 f875 	bl	8003d10 <HAL_HRTIM_WaveformOutputConfig>
 8000c26:	4601      	mov	r1, r0
 8000c28:	b108      	cbz	r0, 8000c2e <main+0x416>
 8000c2a:	b672      	cpsid	i
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <main+0x414>
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_NONE;
 8000c2e:	9023      	str	r0, [sp, #140]	@ 0x8c
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8000c30:	ab21      	add	r3, sp, #132	@ 0x84
 8000c32:	4841      	ldr	r0, [pc, #260]	@ (8000d38 <main+0x520>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	f003 f86b 	bl	8003d10 <HAL_HRTIM_WaveformOutputConfig>
 8000c3a:	b108      	cbz	r0, 8000c40 <main+0x428>
 8000c3c:	b672      	cpsid	i
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <main+0x426>
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_OUTPUT_TB2, &pOutputCfg) != HAL_OK)
 8000c40:	483d      	ldr	r0, [pc, #244]	@ (8000d38 <main+0x520>)
 8000c42:	4622      	mov	r2, r4
 8000c44:	ab21      	add	r3, sp, #132	@ 0x84
 8000c46:	2101      	movs	r1, #1
 8000c48:	f003 f862 	bl	8003d10 <HAL_HRTIM_WaveformOutputConfig>
 8000c4c:	b108      	cbz	r0, 8000c52 <main+0x43a>
 8000c4e:	b672      	cpsid	i
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <main+0x438>
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_OUTPUT_TC2, &pOutputCfg) != HAL_OK)
 8000c52:	4839      	ldr	r0, [pc, #228]	@ (8000d38 <main+0x520>)
 8000c54:	ab21      	add	r3, sp, #132	@ 0x84
 8000c56:	2220      	movs	r2, #32
 8000c58:	2102      	movs	r1, #2
 8000c5a:	f003 f859 	bl	8003d10 <HAL_HRTIM_WaveformOutputConfig>
 8000c5e:	b108      	cbz	r0, 8000c64 <main+0x44c>
 8000c60:	b672      	cpsid	i
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <main+0x44a>
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimeBaseCfg) != HAL_OK)
 8000c64:	4834      	ldr	r0, [pc, #208]	@ (8000d38 <main+0x520>)
 8000c66:	aa16      	add	r2, sp, #88	@ 0x58
 8000c68:	2101      	movs	r1, #1
 8000c6a:	f002 f921 	bl	8002eb0 <HAL_HRTIM_TimeBaseConfig>
 8000c6e:	b108      	cbz	r0, 8000c74 <main+0x45c>
 8000c70:	b672      	cpsid	i
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <main+0x45a>
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, &pTimerCtl) != HAL_OK)
 8000c74:	aa1a      	add	r2, sp, #104	@ 0x68
 8000c76:	4830      	ldr	r0, [pc, #192]	@ (8000d38 <main+0x520>)
 8000c78:	2101      	movs	r1, #1
 8000c7a:	f002 fef5 	bl	8003a68 <HAL_HRTIM_WaveformTimerControl>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	b108      	cbz	r0, 8000c86 <main+0x46e>
 8000c82:	b672      	cpsid	i
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <main+0x46c>
  if (HAL_HRTIM_RollOverModeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_TIM_FEROM_BOTH|HRTIM_TIM_BMROM_BOTH
 8000c86:	482c      	ldr	r0, [pc, #176]	@ (8000d38 <main+0x520>)
 8000c88:	2101      	movs	r1, #1
 8000c8a:	f002 fd73 	bl	8003774 <HAL_HRTIM_RollOverModeConfig>
 8000c8e:	b108      	cbz	r0, 8000c94 <main+0x47c>
 8000c90:	b672      	cpsid	i
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <main+0x47a>
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000c94:	2201      	movs	r2, #1
  pCompareCfg.CompareValue = HRTIM_PERIOD/2;
 8000c96:	f242 1434 	movw	r4, #8500	@ 0x2134
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000c9a:	4827      	ldr	r0, [pc, #156]	@ (8000d38 <main+0x520>)
  pCompareCfg.CompareValue = HRTIM_PERIOD/2;
 8000c9c:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_B, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000c9e:	ab0f      	add	r3, sp, #60	@ 0x3c
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	f002 ff75 	bl	8003b90 <HAL_HRTIM_WaveformCompareConfig>
 8000ca6:	b108      	cbz	r0, 8000cac <main+0x494>
 8000ca8:	b672      	cpsid	i
  while (1)
 8000caa:	e7fe      	b.n	8000caa <main+0x492>
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimeBaseCfg) != HAL_OK)
 8000cac:	4822      	ldr	r0, [pc, #136]	@ (8000d38 <main+0x520>)
 8000cae:	aa16      	add	r2, sp, #88	@ 0x58
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	f002 f8fd 	bl	8002eb0 <HAL_HRTIM_TimeBaseConfig>
 8000cb6:	b108      	cbz	r0, 8000cbc <main+0x4a4>
 8000cb8:	b672      	cpsid	i
  while (1)
 8000cba:	e7fe      	b.n	8000cba <main+0x4a2>
  if (HAL_HRTIM_WaveformTimerControl(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, &pTimerCtl) != HAL_OK)
 8000cbc:	aa1a      	add	r2, sp, #104	@ 0x68
 8000cbe:	481e      	ldr	r0, [pc, #120]	@ (8000d38 <main+0x520>)
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	f002 fed1 	bl	8003a68 <HAL_HRTIM_WaveformTimerControl>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	b108      	cbz	r0, 8000cce <main+0x4b6>
 8000cca:	b672      	cpsid	i
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <main+0x4b4>
  if (HAL_HRTIM_RollOverModeConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_TIM_FEROM_BOTH|HRTIM_TIM_BMROM_BOTH
 8000cce:	481a      	ldr	r0, [pc, #104]	@ (8000d38 <main+0x520>)
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	f002 fd4f 	bl	8003774 <HAL_HRTIM_RollOverModeConfig>
 8000cd6:	b108      	cbz	r0, 8000cdc <main+0x4c4>
 8000cd8:	b672      	cpsid	i
  while (1)
 8000cda:	e7fe      	b.n	8000cda <main+0x4c2>
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000cdc:	4816      	ldr	r0, [pc, #88]	@ (8000d38 <main+0x520>)
  pCompareCfg.CompareValue = (HRTIM_PERIOD/2);
 8000cde:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim1, HRTIM_TIMERINDEX_TIMER_C, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8000ce0:	ab0f      	add	r3, sp, #60	@ 0x3c
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2102      	movs	r1, #2
 8000ce6:	f002 ff53 	bl	8003b90 <HAL_HRTIM_WaveformCompareConfig>
 8000cea:	4604      	mov	r4, r0
 8000cec:	b108      	cbz	r0, 8000cf2 <main+0x4da>
 8000cee:	b672      	cpsid	i
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <main+0x4d8>
  HAL_HRTIM_MspPostInit(&hhrtim1);
 8000cf2:	4811      	ldr	r0, [pc, #68]	@ (8000d38 <main+0x520>)
 8000cf4:	f000 fc30 	bl	8001558 <HAL_HRTIM_MspPostInit>
  hi2c1.Instance = I2C1;
 8000cf8:	4810      	ldr	r0, [pc, #64]	@ (8000d3c <main+0x524>)
 8000cfa:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <main+0x528>)
 8000cfc:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000cfe:	f1a3 6375 	sub.w	r3, r3, #256901120	@ 0xf500000
 8000d02:	f5a3 237a 	sub.w	r3, r3, #1024000	@ 0xfa000
 8000d06:	f6a3 4305 	subw	r3, r3, #3077	@ 0xc05
 8000d0a:	6043      	str	r3, [r0, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d0c:	2301      	movs	r3, #1
  hi2c1.Init.OwnAddress2 = 0;
 8000d0e:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d12:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.OwnAddress1 = 0;
 8000d16:	6084      	str	r4, [r0, #8]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d18:	6204      	str	r4, [r0, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1a:	60c3      	str	r3, [r0, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d1c:	f003 f852 	bl	8003dc4 <HAL_I2C_Init>
 8000d20:	b108      	cbz	r0, 8000d26 <main+0x50e>
 8000d22:	b672      	cpsid	i
  while (1)
 8000d24:	e7fe      	b.n	8000d24 <main+0x50c>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d26:	2100      	movs	r1, #0
 8000d28:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <main+0x524>)
 8000d2a:	f003 f8a5 	bl	8003e78 <HAL_I2CEx_ConfigAnalogFilter>
 8000d2e:	4601      	mov	r1, r0
 8000d30:	b140      	cbz	r0, 8000d44 <main+0x52c>
 8000d32:	b672      	cpsid	i
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <main+0x51c>
 8000d36:	bf00      	nop
 8000d38:	200002ec 	.word	0x200002ec
 8000d3c:	20000298 	.word	0x20000298
 8000d40:	40005400 	.word	0x40005400
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d44:	48ac      	ldr	r0, [pc, #688]	@ (8000ff8 <main+0x7e0>)
 8000d46:	f003 f8c1 	bl	8003ecc <HAL_I2CEx_ConfigDigitalFilter>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	b108      	cbz	r0, 8000d52 <main+0x53a>
 8000d4e:	b672      	cpsid	i
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <main+0x538>
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000d52:	4601      	mov	r1, r0
 8000d54:	2228      	movs	r2, #40	@ 0x28
 8000d56:	a832      	add	r0, sp, #200	@ 0xc8
 8000d58:	f007 fcd0 	bl	80086fc <memset>
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	e9cd 442b 	strd	r4, r4, [sp, #172]	@ 0xac
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d60:	4ba6      	ldr	r3, [pc, #664]	@ (8000ffc <main+0x7e4>)
 8000d62:	942d      	str	r4, [sp, #180]	@ 0xb4
 8000d64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d6a:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000d6e:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8000d72:	920f      	str	r2, [sp, #60]	@ 0x3c
  (void)tmpreg;
 8000d74:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d78:	f042 0201 	orr.w	r2, r2, #1
 8000d7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d80:	f002 0201 	and.w	r2, r2, #1
 8000d84:	9212      	str	r2, [sp, #72]	@ 0x48
  (void)tmpreg;
 8000d86:	9a12      	ldr	r2, [sp, #72]	@ 0x48
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d8a:	f042 0202 	orr.w	r2, r2, #2
 8000d8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000d92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d96:	f003 0302 	and.w	r3, r3, #2
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d9a:	2602      	movs	r6, #2
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000d9c:	2505      	movs	r5, #5
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000d9e:	9129      	str	r1, [sp, #164]	@ 0xa4
 8000da0:	9316      	str	r3, [sp, #88]	@ 0x58
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	a929      	add	r1, sp, #164	@ 0xa4
 8000da4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
  (void)tmpreg;
 8000da8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000daa:	962a      	str	r6, [sp, #168]	@ 0xa8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000dac:	952e      	str	r5, [sp, #184]	@ 0xb8
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f004 fca7 	bl	8005700 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000db2:	2308      	movs	r3, #8
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	a929      	add	r1, sp, #164	@ 0xa4
 8000db6:	4892      	ldr	r0, [pc, #584]	@ (8001000 <main+0x7e8>)
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000db8:	9329      	str	r3, [sp, #164]	@ 0xa4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dba:	e9cd 642a 	strd	r6, r4, [sp, #168]	@ 0xa8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dbe:	e9cd 442c 	strd	r4, r4, [sp, #176]	@ 0xb0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000dc2:	952e      	str	r5, [sp, #184]	@ 0xb8
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc4:	f004 fc9c 	bl	8005700 <LL_GPIO_Init>
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000dc8:	2310      	movs	r3, #16
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	a929      	add	r1, sp, #164	@ 0xa4
 8000dcc:	488c      	ldr	r0, [pc, #560]	@ (8001000 <main+0x7e8>)
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dce:	942d      	str	r4, [sp, #180]	@ 0xb4
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dd0:	e9cd 442b 	strd	r4, r4, [sp, #172]	@ 0xac
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000dd4:	9329      	str	r3, [sp, #164]	@ 0xa4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000dd6:	962a      	str	r6, [sp, #168]	@ 0xa8
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000dd8:	952e      	str	r5, [sp, #184]	@ 0xb8
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dda:	f004 fc91 	bl	8005700 <LL_GPIO_Init>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dde:	4b89      	ldr	r3, [pc, #548]	@ (8001004 <main+0x7ec>)
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000de6:	f1c3 0207 	rsb	r2, r3, #7
 8000dea:	2a04      	cmp	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dec:	f103 0104 	add.w	r1, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000df0:	bf28      	it	cs
 8000df2:	2204      	movcs	r2, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000df4:	2906      	cmp	r1, #6
 8000df6:	bf88      	it	hi
 8000df8:	1edc      	subhi	r4, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	4093      	lsls	r3, r2
 8000e00:	43db      	mvns	r3, r3
 8000e02:	f003 0306 	and.w	r3, r3, #6
 8000e06:	40a3      	lsls	r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	4a7f      	ldr	r2, [pc, #508]	@ (8001008 <main+0x7f0>)
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	f882 3323 	strb.w	r3, [r2, #803]	@ 0x323
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e12:	2608      	movs	r6, #8
 8000e14:	6056      	str	r6, [r2, #4]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000e16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e1a:	f44f 7382 	mov.w	r3, #260	@ 0x104
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000e1e:	4d7b      	ldr	r5, [pc, #492]	@ (800100c <main+0x7f4>)
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000e20:	e9cd 1332 	strd	r1, r3, [sp, #200]	@ 0xc8
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_16BIT;
 8000e24:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000e28:	9334      	str	r3, [sp, #208]	@ 0xd0
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8000e2a:	f44f 2780 	mov.w	r7, #262144	@ 0x40000
 8000e2e:	2310      	movs	r3, #16
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000e30:	2400      	movs	r4, #0
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV8;
 8000e32:	e9cd 7337 	strd	r7, r3, [sp, #220]	@ 0xdc
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000e36:	a932      	add	r1, sp, #200	@ 0xc8
  SPI_InitStruct.CRCPoly = 7;
 8000e38:	2307      	movs	r3, #7
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000e3a:	4628      	mov	r0, r5
  SPI_InitStruct.CRCPoly = 7;
 8000e3c:	933b      	str	r3, [sp, #236]	@ 0xec
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000e3e:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000e42:	e9cd 4439 	strd	r4, r4, [sp, #228]	@ 0xe4
  LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000e46:	f004 fd13 	bl	8005870 <LL_SPI_Init>
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000e4a:	686b      	ldr	r3, [r5, #4]
 8000e4c:	f023 0310 	bic.w	r3, r3, #16
 8000e50:	606b      	str	r3, [r5, #4]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000e52:	686b      	ldr	r3, [r5, #4]
 8000e54:	4333      	orrs	r3, r6
 8000e56:	606b      	str	r3, [r5, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e58:	2224      	movs	r2, #36	@ 0x24
  htim2.Instance = TIM2;
 8000e5a:	4d6d      	ldr	r5, [pc, #436]	@ (8001010 <main+0x7f8>)
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e5c:	4621      	mov	r1, r4
 8000e5e:	a832      	add	r0, sp, #200	@ 0xc8
 8000e60:	f007 fc4c 	bl	80086fc <memset>
  htim2.Instance = TIM2;
 8000e64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e68:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e6a:	4628      	mov	r0, r5
  htim2.Init.Period = 2047;
 8000e6c:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e74:	e9cd 4421 	strd	r4, r4, [sp, #132]	@ 0x84
 8000e78:	e9cd 4423 	strd	r4, r4, [sp, #140]	@ 0x8c
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 8000e7c:	e9cd 4429 	strd	r4, r4, [sp, #164]	@ 0xa4
 8000e80:	e9cd 442b 	strd	r4, r4, [sp, #172]	@ 0xac
 8000e84:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8c:	941c      	str	r4, [sp, #112]	@ 0x70
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8e:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e90:	61ac      	str	r4, [r5, #24]
  htim2.Init.Period = 2047;
 8000e92:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e94:	f003 fee4 	bl	8004c60 <HAL_TIM_IC_Init>
 8000e98:	b108      	cbz	r0, 8000e9e <main+0x686>
 8000e9a:	b672      	cpsid	i
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <main+0x684>
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e9e:	2701      	movs	r7, #1
  sConfig.IC1Filter = 0;
 8000ea0:	e9cd 0035 	strd	r0, r0, [sp, #212]	@ 0xd4
  sConfig.IC2Filter = 0;
 8000ea4:	e9cd 0039 	strd	r0, r0, [sp, #228]	@ 0xe4
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ea8:	9033      	str	r0, [sp, #204]	@ 0xcc
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000eaa:	9037      	str	r0, [sp, #220]	@ 0xdc
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000eac:	a932      	add	r1, sp, #200	@ 0xc8
 8000eae:	4628      	mov	r0, r5
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000eb0:	9732      	str	r7, [sp, #200]	@ 0xc8
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000eb2:	9734      	str	r7, [sp, #208]	@ 0xd0
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000eb4:	9738      	str	r7, [sp, #224]	@ 0xe0
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000eb6:	f003 ff05 	bl	8004cc4 <HAL_TIM_Encoder_Init>
 8000eba:	b108      	cbz	r0, 8000ec0 <main+0x6a8>
 8000ebc:	b672      	cpsid	i
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <main+0x6a6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec0:	901a      	str	r0, [sp, #104]	@ 0x68
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec2:	901c      	str	r0, [sp, #112]	@ 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ec4:	a91a      	add	r1, sp, #104	@ 0x68
 8000ec6:	4628      	mov	r0, r5
 8000ec8:	f004 f82e 	bl	8004f28 <HAL_TIMEx_MasterConfigSynchronization>
 8000ecc:	b108      	cbz	r0, 8000ed2 <main+0x6ba>
 8000ece:	b672      	cpsid	i
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <main+0x6b8>
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ed2:	e9cd 0721 	strd	r0, r7, [sp, #132]	@ 0x84
  sConfigIC.ICFilter = 0;
 8000ed6:	e9cd 0023 	strd	r0, r0, [sp, #140]	@ 0x8c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000eda:	4632      	mov	r2, r6
 8000edc:	a921      	add	r1, sp, #132	@ 0x84
 8000ede:	4628      	mov	r0, r5
 8000ee0:	f003 ff82 	bl	8004de8 <HAL_TIM_IC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b108      	cbz	r0, 8000eec <main+0x6d4>
 8000ee8:	b672      	cpsid	i
  while (1)
 8000eea:	e7fe      	b.n	8000eea <main+0x6d2>
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 8000eec:	e9cd 3329 	strd	r3, r3, [sp, #164]	@ 0xa4
  sEncoderIndexConfig.Filter = 0;
 8000ef0:	932b      	str	r3, [sp, #172]	@ 0xac
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 8000ef2:	f88d 30b0 	strb.w	r3, [sp, #176]	@ 0xb0
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 8000ef6:	932e      	str	r3, [sp, #184]	@ 0xb8
  if (HAL_TIMEx_ConfigEncoderIndex(&htim2, &sEncoderIndexConfig) != HAL_OK)
 8000ef8:	4628      	mov	r0, r5
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_10;
 8000efa:	2380      	movs	r3, #128	@ 0x80
  if (HAL_TIMEx_ConfigEncoderIndex(&htim2, &sEncoderIndexConfig) != HAL_OK)
 8000efc:	a929      	add	r1, sp, #164	@ 0xa4
  sEncoderIndexConfig.Position = TIM_ENCODERINDEX_POSITION_10;
 8000efe:	932d      	str	r3, [sp, #180]	@ 0xb4
  if (HAL_TIMEx_ConfigEncoderIndex(&htim2, &sEncoderIndexConfig) != HAL_OK)
 8000f00:	f004 f86c 	bl	8004fdc <HAL_TIMEx_ConfigEncoderIndex>
 8000f04:	4604      	mov	r4, r0
 8000f06:	b108      	cbz	r0, 8000f0c <main+0x6f4>
 8000f08:	b672      	cpsid	i
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <main+0x6f2>
  htim3.Instance = TIM3;
 8000f0c:	4d41      	ldr	r5, [pc, #260]	@ (8001014 <main+0x7fc>)
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f0e:	4601      	mov	r1, r0
 8000f10:	2224      	movs	r2, #36	@ 0x24
 8000f12:	a832      	add	r0, sp, #200	@ 0xc8
 8000f14:	f007 fbf2 	bl	80086fc <memset>
  htim3.Instance = TIM3;
 8000f18:	4b3f      	ldr	r3, [pc, #252]	@ (8001018 <main+0x800>)
 8000f1a:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000f1c:	4628      	mov	r0, r5
  htim3.Init.Period = 65535;
 8000f1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f22:	e9cd 441a 	strd	r4, r4, [sp, #104]	@ 0x68
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f26:	e9cd 4421 	strd	r4, r4, [sp, #132]	@ 0x84
 8000f2a:	e9cd 4423 	strd	r4, r4, [sp, #140]	@ 0x8c
  TIMEx_EncoderIndexConfigTypeDef sEncoderIndexConfig = {0};
 8000f2e:	e9cd 4429 	strd	r4, r4, [sp, #164]	@ 0xa4
 8000f32:	e9cd 442b 	strd	r4, r4, [sp, #172]	@ 0xac
 8000f36:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3a:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3e:	941c      	str	r4, [sp, #112]	@ 0x70
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f40:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f42:	61ac      	str	r4, [r5, #24]
  htim3.Init.Period = 65535;
 8000f44:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000f46:	f003 fe8b 	bl	8004c60 <HAL_TIM_IC_Init>
 8000f4a:	b108      	cbz	r0, 8000f50 <main+0x738>
 8000f4c:	b672      	cpsid	i
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <main+0x736>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f50:	e9cd 7032 	strd	r7, r0, [sp, #200]	@ 0xc8
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f54:	e9cd 7034 	strd	r7, r0, [sp, #208]	@ 0xd0
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f58:	e9cd 0036 	strd	r0, r0, [sp, #216]	@ 0xd8
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f5c:	e9cd 7038 	strd	r7, r0, [sp, #224]	@ 0xe0
  sConfig.IC2Filter = 0;
 8000f60:	903a      	str	r0, [sp, #232]	@ 0xe8
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f62:	a932      	add	r1, sp, #200	@ 0xc8
 8000f64:	4628      	mov	r0, r5
 8000f66:	f003 fead 	bl	8004cc4 <HAL_TIM_Encoder_Init>
 8000f6a:	b108      	cbz	r0, 8000f70 <main+0x758>
 8000f6c:	b672      	cpsid	i
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <main+0x756>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f70:	901a      	str	r0, [sp, #104]	@ 0x68
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f72:	901c      	str	r0, [sp, #112]	@ 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f74:	a91a      	add	r1, sp, #104	@ 0x68
 8000f76:	4628      	mov	r0, r5
 8000f78:	f003 ffd6 	bl	8004f28 <HAL_TIMEx_MasterConfigSynchronization>
 8000f7c:	b108      	cbz	r0, 8000f82 <main+0x76a>
 8000f7e:	b672      	cpsid	i
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <main+0x768>
  sConfigIC.ICFilter = 0;
 8000f82:	e9cd 0023 	strd	r0, r0, [sp, #140]	@ 0x8c
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000f86:	9021      	str	r0, [sp, #132]	@ 0x84
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f88:	4632      	mov	r2, r6
 8000f8a:	a921      	add	r1, sp, #132	@ 0x84
 8000f8c:	4628      	mov	r0, r5
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000f8e:	9722      	str	r7, [sp, #136]	@ 0x88
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000f90:	f003 ff2a 	bl	8004de8 <HAL_TIM_IC_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	b108      	cbz	r0, 8000f9c <main+0x784>
 8000f98:	b672      	cpsid	i
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <main+0x782>
  if (HAL_TIMEx_ConfigEncoderIndex(&htim3, &sEncoderIndexConfig) != HAL_OK)
 8000f9c:	a929      	add	r1, sp, #164	@ 0xa4
 8000f9e:	4628      	mov	r0, r5
  sEncoderIndexConfig.Prescaler = TIM_ENCODERINDEX_PRESCALER_DIV1;
 8000fa0:	e9cd 3329 	strd	r3, r3, [sp, #164]	@ 0xa4
  sEncoderIndexConfig.Direction = TIM_ENCODERINDEX_DIRECTION_UP_DOWN;
 8000fa4:	e9cd 332d 	strd	r3, r3, [sp, #180]	@ 0xb4
  sEncoderIndexConfig.Filter = 0;
 8000fa8:	932b      	str	r3, [sp, #172]	@ 0xac
  sEncoderIndexConfig.FirstIndexEnable = DISABLE;
 8000faa:	f88d 30b0 	strb.w	r3, [sp, #176]	@ 0xb0
  if (HAL_TIMEx_ConfigEncoderIndex(&htim3, &sEncoderIndexConfig) != HAL_OK)
 8000fae:	f004 f815 	bl	8004fdc <HAL_TIMEx_ConfigEncoderIndex>
 8000fb2:	b108      	cbz	r0, 8000fb8 <main+0x7a0>
 8000fb4:	b672      	cpsid	i
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <main+0x79e>
  huart3.Instance = USART3;
 8000fb8:	4c18      	ldr	r4, [pc, #96]	@ (800101c <main+0x804>)
  huart3.Init.BaudRate = 115200;
 8000fba:	4a19      	ldr	r2, [pc, #100]	@ (8001020 <main+0x808>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbc:	2300      	movs	r3, #0
  huart3.Init.BaudRate = 115200;
 8000fbe:	f44f 36e1 	mov.w	r6, #115200	@ 0x1c200
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fc2:	4620      	mov	r0, r4
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	250c      	movs	r5, #12
  huart3.Init.BaudRate = 115200;
 8000fc6:	e9c4 2600 	strd	r2, r6, [r4]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fca:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fce:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fd2:	e9c4 3308 	strd	r3, r3, [r4, #32]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fd6:	6123      	str	r3, [r4, #16]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fd8:	62a3      	str	r3, [r4, #40]	@ 0x28
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000fda:	6165      	str	r5, [r4, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000fdc:	f004 fab2 	bl	8005544 <HAL_UART_Init>
 8000fe0:	4601      	mov	r1, r0
 8000fe2:	b108      	cbz	r0, 8000fe8 <main+0x7d0>
 8000fe4:	b672      	cpsid	i
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <main+0x7ce>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fe8:	4620      	mov	r0, r4
 8000fea:	f004 fb3d 	bl	8005668 <HAL_UARTEx_SetTxFifoThreshold>
 8000fee:	4601      	mov	r1, r0
 8000ff0:	b1c0      	cbz	r0, 8001024 <main+0x80c>
 8000ff2:	b672      	cpsid	i
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <main+0x7dc>
 8000ff6:	bf00      	nop
 8000ff8:	20000298 	.word	0x20000298
 8000ffc:	40021000 	.word	0x40021000
 8001000:	48000400 	.word	0x48000400
 8001004:	e000ed00 	.word	0xe000ed00
 8001008:	e000e100 	.word	0xe000e100
 800100c:	40013000 	.word	0x40013000
 8001010:	20000080 	.word	0x20000080
 8001014:	20000034 	.word	0x20000034
 8001018:	40000400 	.word	0x40000400
 800101c:	200000cc 	.word	0x200000cc
 8001020:	40004800 	.word	0x40004800
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001024:	4620      	mov	r0, r4
 8001026:	f004 fb45 	bl	80056b4 <HAL_UARTEx_SetRxFifoThreshold>
 800102a:	b108      	cbz	r0, 8001030 <main+0x818>
 800102c:	b672      	cpsid	i
  while (1)
 800102e:	e7fe      	b.n	800102e <main+0x816>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001030:	4620      	mov	r0, r4
 8001032:	f004 fafb 	bl	800562c <HAL_UARTEx_DisableFifoMode>
 8001036:	b108      	cbz	r0, 800103c <main+0x824>
 8001038:	b672      	cpsid	i
  while (1)
 800103a:	e7fe      	b.n	800103a <main+0x822>
  hlpuart1.Instance = LPUART1;
 800103c:	4c8e      	ldr	r4, [pc, #568]	@ (8001278 <main+0xa60>)
 800103e:	4b8f      	ldr	r3, [pc, #572]	@ (800127c <main+0xa64>)
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001040:	62a0      	str	r0, [r4, #40]	@ 0x28
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001042:	e9c4 6001 	strd	r6, r0, [r4, #4]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001046:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	e9c4 5005 	strd	r5, r0, [r4, #20]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800104e:	e9c4 0008 	strd	r0, r0, [r4, #32]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001052:	4620      	mov	r0, r4
  hlpuart1.Instance = LPUART1;
 8001054:	6023      	str	r3, [r4, #0]
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001056:	f004 fa75 	bl	8005544 <HAL_UART_Init>
 800105a:	b108      	cbz	r0, 8001060 <main+0x848>
 800105c:	b672      	cpsid	i
  while (1)
 800105e:	e7fe      	b.n	800105e <main+0x846>
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_2) != HAL_OK)
 8001060:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001064:	4620      	mov	r0, r4
 8001066:	f004 faff 	bl	8005668 <HAL_UARTEx_SetTxFifoThreshold>
 800106a:	b108      	cbz	r0, 8001070 <main+0x858>
 800106c:	b672      	cpsid	i
  while (1)
 800106e:	e7fe      	b.n	800106e <main+0x856>
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_2) != HAL_OK)
 8001070:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 8001074:	4620      	mov	r0, r4
 8001076:	f004 fb1d 	bl	80056b4 <HAL_UARTEx_SetRxFifoThreshold>
 800107a:	b108      	cbz	r0, 8001080 <main+0x868>
 800107c:	b672      	cpsid	i
  while (1)
 800107e:	e7fe      	b.n	800107e <main+0x866>
  if (HAL_UARTEx_EnableFifoMode(&hlpuart1) != HAL_OK)
 8001080:	4620      	mov	r0, r4
 8001082:	f004 fab3 	bl	80055ec <HAL_UARTEx_EnableFifoMode>
 8001086:	4603      	mov	r3, r0
 8001088:	b108      	cbz	r0, 800108e <main+0x876>
 800108a:	b672      	cpsid	i
  while (1)
 800108c:	e7fe      	b.n	800108c <main+0x874>
  huart1.Instance = USART1;
 800108e:	4c7c      	ldr	r4, [pc, #496]	@ (8001280 <main+0xa68>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001090:	e9c4 6001 	strd	r6, r0, [r4, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001094:	e9c4 0003 	strd	r0, r0, [r4, #12]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001098:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800109c:	e9c4 3308 	strd	r3, r3, [r4, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010a0:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010a2:	4620      	mov	r0, r4
  huart1.Instance = USART1;
 80010a4:	4b77      	ldr	r3, [pc, #476]	@ (8001284 <main+0xa6c>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010a6:	6165      	str	r5, [r4, #20]
  huart1.Instance = USART1;
 80010a8:	6023      	str	r3, [r4, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010aa:	f004 fa4b 	bl	8005544 <HAL_UART_Init>
 80010ae:	4601      	mov	r1, r0
 80010b0:	b108      	cbz	r0, 80010b6 <main+0x89e>
 80010b2:	b672      	cpsid	i
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <main+0x89c>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010b6:	4620      	mov	r0, r4
 80010b8:	f004 fad6 	bl	8005668 <HAL_UARTEx_SetTxFifoThreshold>
 80010bc:	b108      	cbz	r0, 80010c2 <main+0x8aa>
 80010be:	b672      	cpsid	i
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <main+0x8a8>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010c2:	486f      	ldr	r0, [pc, #444]	@ (8001280 <main+0xa68>)
 80010c4:	2100      	movs	r1, #0
 80010c6:	f004 faf5 	bl	80056b4 <HAL_UARTEx_SetRxFifoThreshold>
 80010ca:	b108      	cbz	r0, 80010d0 <main+0x8b8>
 80010cc:	b672      	cpsid	i
  while (1)
 80010ce:	e7fe      	b.n	80010ce <main+0x8b6>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80010d0:	486b      	ldr	r0, [pc, #428]	@ (8001280 <main+0xa68>)
 80010d2:	f004 faab 	bl	800562c <HAL_UARTEx_DisableFifoMode>
 80010d6:	4605      	mov	r5, r0
 80010d8:	b108      	cbz	r0, 80010de <main+0x8c6>
 80010da:	b672      	cpsid	i
  while (1)
 80010dc:	e7fe      	b.n	80010dc <main+0x8c4>
  hadc3.Instance = ADC3;
 80010de:	4c6a      	ldr	r4, [pc, #424]	@ (8001288 <main+0xa70>)
  ADC_MultiModeTypeDef multimode = {0};
 80010e0:	902b      	str	r0, [sp, #172]	@ 0xac
 80010e2:	e9cd 0029 	strd	r0, r0, [sp, #164]	@ 0xa4
  ADC_ChannelConfTypeDef sConfig = {0};
 80010e6:	4601      	mov	r1, r0
 80010e8:	2220      	movs	r2, #32
 80010ea:	a832      	add	r0, sp, #200	@ 0xc8
 80010ec:	f007 fb06 	bl	80086fc <memset>
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010f0:	4b66      	ldr	r3, [pc, #408]	@ (800128c <main+0xa74>)
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80010f2:	83a5      	strh	r5, [r4, #28]
  hadc3.Init.NbrOfConversion = 1;
 80010f4:	2601      	movs	r6, #1
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f6:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010fa:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010fe:	f44f 3a40 	mov.w	sl, #196608	@ 0x30000
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001102:	f884 5024 	strb.w	r5, [r4, #36]	@ 0x24
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001106:	63e5      	str	r5, [r4, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001108:	f884 5040 	strb.w	r5, [r4, #64]	@ 0x40
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800110c:	f44f 69d4 	mov.w	r9, #1696	@ 0x6a0
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001110:	2504      	movs	r5, #4
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001112:	f44f 6880 	mov.w	r8, #1024	@ 0x400
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001116:	4620      	mov	r0, r4
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001118:	e9c4 3a00 	strd	r3, sl, [r4]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800111c:	e9c4 980b 	strd	r9, r8, [r4, #44]	@ 0x2c
  hadc3.Init.NbrOfConversion = 1;
 8001120:	6226      	str	r6, [r4, #32]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001122:	f884 6038 	strb.w	r6, [r4, #56]	@ 0x38
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001126:	61a5      	str	r5, [r4, #24]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001128:	f000 fcc8 	bl	8001abc <HAL_ADC_Init>
 800112c:	b108      	cbz	r0, 8001132 <main+0x91a>
 800112e:	b672      	cpsid	i
  while (1)
 8001130:	e7fe      	b.n	8001130 <main+0x918>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001132:	9029      	str	r0, [sp, #164]	@ 0xa4
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001134:	a929      	add	r1, sp, #164	@ 0xa4
 8001136:	4620      	mov	r0, r4
 8001138:	f001 fa44 	bl	80025c4 <HAL_ADCEx_MultiModeConfigChannel>
 800113c:	b108      	cbz	r0, 8001142 <main+0x92a>
 800113e:	b672      	cpsid	i
  while (1)
 8001140:	e7fe      	b.n	8001140 <main+0x928>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001142:	4b53      	ldr	r3, [pc, #332]	@ (8001290 <main+0xa78>)
  sConfig.Offset = 0;
 8001144:	9037      	str	r0, [sp, #220]	@ 0xdc
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001146:	a932      	add	r1, sp, #200	@ 0xc8
 8001148:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800114a:	f04f 0b06 	mov.w	fp, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800114e:	277f      	movs	r7, #127	@ 0x7f
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001150:	e9cd 3b32 	strd	r3, fp, [sp, #200]	@ 0xc8
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001154:	9534      	str	r5, [sp, #208]	@ 0xd0
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001156:	9536      	str	r5, [sp, #216]	@ 0xd8
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001158:	9735      	str	r7, [sp, #212]	@ 0xd4
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800115a:	f000 fe09 	bl	8001d70 <HAL_ADC_ConfigChannel>
 800115e:	4601      	mov	r1, r0
 8001160:	b108      	cbz	r0, 8001166 <main+0x94e>
 8001162:	b672      	cpsid	i
  while (1)
 8001164:	e7fe      	b.n	8001164 <main+0x94c>
  hadc1.Instance = ADC1;
 8001166:	4c4b      	ldr	r4, [pc, #300]	@ (8001294 <main+0xa7c>)
  ADC_MultiModeTypeDef multimode = {0};
 8001168:	902b      	str	r0, [sp, #172]	@ 0xac
 800116a:	e9cd 0029 	strd	r0, r0, [sp, #164]	@ 0xa4
  ADC_ChannelConfTypeDef sConfig = {0};
 800116e:	9001      	str	r0, [sp, #4]
 8001170:	2220      	movs	r2, #32
 8001172:	a832      	add	r0, sp, #200	@ 0xc8
 8001174:	f007 fac2 	bl	80086fc <memset>
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001178:	9901      	ldr	r1, [sp, #4]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800117a:	f8c4 a004 	str.w	sl, [r4, #4]
  hadc1.Instance = ADC1;
 800117e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001182:	4620      	mov	r0, r4
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001184:	e9c4 1102 	strd	r1, r1, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001188:	e9c4 1104 	strd	r1, r1, [r4, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800118c:	e9c4 980b 	strd	r9, r8, [r4, #44]	@ 0x2c
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001190:	61a5      	str	r5, [r4, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001192:	83a1      	strh	r1, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 8001194:	6226      	str	r6, [r4, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001196:	f884 1024 	strb.w	r1, [r4, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800119a:	f884 6038 	strb.w	r6, [r4, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800119e:	63e1      	str	r1, [r4, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80011a0:	f884 1040 	strb.w	r1, [r4, #64]	@ 0x40
  hadc1.Instance = ADC1;
 80011a4:	6023      	str	r3, [r4, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a6:	f000 fc89 	bl	8001abc <HAL_ADC_Init>
 80011aa:	b108      	cbz	r0, 80011b0 <main+0x998>
 80011ac:	b672      	cpsid	i
  while (1)
 80011ae:	e7fe      	b.n	80011ae <main+0x996>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011b0:	9029      	str	r0, [sp, #164]	@ 0xa4
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011b2:	a929      	add	r1, sp, #164	@ 0xa4
 80011b4:	4620      	mov	r0, r4
 80011b6:	f001 fa05 	bl	80025c4 <HAL_ADCEx_MultiModeConfigChannel>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b108      	cbz	r0, 80011c2 <main+0x9aa>
 80011be:	b672      	cpsid	i
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <main+0x9a8>
  sConfig.OffsetNumber = ADC_OFFSET_1;
 80011c2:	e9cd 7335 	strd	r7, r3, [sp, #212]	@ 0xd4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c6:	4620      	mov	r0, r4
  sConfig.OffsetSign = ADC_OFFSET_SIGN_NEGATIVE;
 80011c8:	9338      	str	r3, [sp, #224]	@ 0xe0
  sConfig.OffsetSaturation = DISABLE;
 80011ca:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ce:	a932      	add	r1, sp, #200	@ 0xc8
  sConfig.Channel = ADC_CHANNEL_6;
 80011d0:	4b31      	ldr	r3, [pc, #196]	@ (8001298 <main+0xa80>)
 80011d2:	9332      	str	r3, [sp, #200]	@ 0xc8
  sConfig.Offset = 2047;
 80011d4:	f240 74ff 	movw	r4, #2047	@ 0x7ff
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80011d8:	e9cd b533 	strd	fp, r5, [sp, #204]	@ 0xcc
  sConfig.Offset = 2047;
 80011dc:	9437      	str	r4, [sp, #220]	@ 0xdc
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011de:	f000 fdc7 	bl	8001d70 <HAL_ADC_ConfigChannel>
 80011e2:	4601      	mov	r1, r0
 80011e4:	b108      	cbz	r0, 80011ea <main+0x9d2>
 80011e6:	b672      	cpsid	i
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <main+0x9d0>
  ADC_ChannelConfTypeDef sConfig = {0};
 80011ea:	2220      	movs	r2, #32
 80011ec:	9001      	str	r0, [sp, #4]
 80011ee:	a832      	add	r0, sp, #200	@ 0xc8
 80011f0:	f007 fa84 	bl	80086fc <memset>
  hadc2.Instance = ADC2;
 80011f4:	4b29      	ldr	r3, [pc, #164]	@ (800129c <main+0xa84>)
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011f6:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 80011f8:	4a29      	ldr	r2, [pc, #164]	@ (80012a0 <main+0xa88>)
 80011fa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011fc:	4618      	mov	r0, r3
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011fe:	e9c3 980b 	strd	r9, r8, [r3, #44]	@ 0x2c
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001202:	e9c3 1102 	strd	r1, r1, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001206:	e9c3 1104 	strd	r1, r1, [r3, #16]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800120a:	f8c3 a004 	str.w	sl, [r3, #4]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800120e:	619d      	str	r5, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001210:	8399      	strh	r1, [r3, #28]
  hadc2.Init.NbrOfConversion = 1;
 8001212:	621e      	str	r6, [r3, #32]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001214:	f883 6038 	strb.w	r6, [r3, #56]	@ 0x38
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001218:	f883 1024 	strb.w	r1, [r3, #36]	@ 0x24
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800121c:	63d9      	str	r1, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800121e:	f883 1040 	strb.w	r1, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001222:	f000 fc4b 	bl	8001abc <HAL_ADC_Init>
 8001226:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <main+0xa84>)
 8001228:	4602      	mov	r2, r0
 800122a:	b108      	cbz	r0, 8001230 <main+0xa18>
 800122c:	b672      	cpsid	i
  while (1)
 800122e:	e7fe      	b.n	800122e <main+0xa16>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001230:	4618      	mov	r0, r3
 8001232:	a932      	add	r1, sp, #200	@ 0xc8
  sConfig.Channel = ADC_CHANNEL_7;
 8001234:	4b1b      	ldr	r3, [pc, #108]	@ (80012a4 <main+0xa8c>)
  sConfig.OffsetSaturation = DISABLE;
 8001236:	f88d 20e4 	strb.w	r2, [sp, #228]	@ 0xe4
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 800123a:	e9cd b533 	strd	fp, r5, [sp, #204]	@ 0xcc
  sConfig.OffsetNumber = ADC_OFFSET_1;
 800123e:	e9cd 7235 	strd	r7, r2, [sp, #212]	@ 0xd4
  sConfig.OffsetSign = ADC_OFFSET_SIGN_NEGATIVE;
 8001242:	e9cd 4237 	strd	r4, r2, [sp, #220]	@ 0xdc
  sConfig.Channel = ADC_CHANNEL_7;
 8001246:	9332      	str	r3, [sp, #200]	@ 0xc8
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001248:	f000 fd92 	bl	8001d70 <HAL_ADC_ConfigChannel>
 800124c:	b108      	cbz	r0, 8001252 <main+0xa3a>
 800124e:	b672      	cpsid	i
  while (1)
 8001250:	e7fe      	b.n	8001250 <main+0xa38>
  hiwdg.Instance = IWDG;
 8001252:	4815      	ldr	r0, [pc, #84]	@ (80012a8 <main+0xa90>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001254:	4915      	ldr	r1, [pc, #84]	@ (80012ac <main+0xa94>)
  hiwdg.Init.Window = 4095;
 8001256:	f640 73ff 	movw	r3, #4095	@ 0xfff
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800125a:	2200      	movs	r2, #0
 800125c:	e9c0 1200 	strd	r1, r2, [r0]
  hiwdg.Init.Reload = 4095;
 8001260:	e9c0 3302 	strd	r3, r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001264:	f002 fe5e 	bl	8003f24 <HAL_IWDG_Init>
 8001268:	b108      	cbz	r0, 800126e <main+0xa56>
 800126a:	b672      	cpsid	i
  while (1)
 800126c:	e7fe      	b.n	800126c <main+0xa54>
  stand_im_init_2();
 800126e:	f007 f809 	bl	8008284 <stand_im_init_2>
    stand_im_loop();
 8001272:	f007 f8ab 	bl	80083cc <stand_im_loop>
  while (1)
 8001276:	e7fc      	b.n	8001272 <main+0xa5a>
 8001278:	200001f4 	.word	0x200001f4
 800127c:	40008000 	.word	0x40008000
 8001280:	20000160 	.word	0x20000160
 8001284:	40013800 	.word	0x40013800
 8001288:	20000508 	.word	0x20000508
 800128c:	50000400 	.word	0x50000400
 8001290:	32601000 	.word	0x32601000
 8001294:	200005e0 	.word	0x200005e0
 8001298:	19200040 	.word	0x19200040
 800129c:	20000574 	.word	0x20000574
 80012a0:	50000100 	.word	0x50000100
 80012a4:	1d500080 	.word	0x1d500080
 80012a8:	20000288 	.word	0x20000288
 80012ac:	40003000 	.word	0x40003000

080012b0 <Error_Handler>:
 80012b0:	b672      	cpsid	i
  while (1)
 80012b2:	e7fe      	b.n	80012b2 <Error_Handler+0x2>

080012b4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b4:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <HAL_MspInit+0x30>)
 80012b6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012b8:	f042 0201 	orr.w	r2, r2, #1
{
 80012bc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	661a      	str	r2, [r3, #96]	@ 0x60
 80012c0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012c2:	f002 0201 	and.w	r2, r2, #1
 80012c6:	9200      	str	r2, [sp, #0]
 80012c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80012cc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80012d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80012d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d8:	9301      	str	r3, [sp, #4]
 80012da:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012dc:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 80012de:	f002 bec7 	b.w	8004070 <HAL_PWREx_DisableUCPDDeadBattery>
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000

080012e8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012e8:	b570      	push	{r4, r5, r6, lr}
 80012ea:	4604      	mov	r4, r0
 80012ec:	b0a0      	sub	sp, #128	@ 0x80
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ee:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	2254      	movs	r2, #84	@ 0x54
 80012f2:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80012f8:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80012fc:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012fe:	f007 f9fd 	bl	80086fc <memset>
  if(hadc->Instance==ADC1)
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001308:	d008      	beq.n	800131c <HAL_ADC_MspInit+0x34>

    /* USER CODE BEGIN ADC1_MspInit 1 */

    /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800130a:	4a5e      	ldr	r2, [pc, #376]	@ (8001484 <HAL_ADC_MspInit+0x19c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d052      	beq.n	80013b6 <HAL_ADC_MspInit+0xce>

    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8001310:	4a5d      	ldr	r2, [pc, #372]	@ (8001488 <HAL_ADC_MspInit+0x1a0>)
 8001312:	4293      	cmp	r3, r2
 8001314:	f000 8082 	beq.w	800141c <HAL_ADC_MspInit+0x134>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001318:	b020      	add	sp, #128	@ 0x80
 800131a:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800131c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001320:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001324:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001326:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001328:	931c      	str	r3, [sp, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132a:	f003 fa4f 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 800132e:	2800      	cmp	r0, #0
 8001330:	f040 809f 	bne.w	8001472 <HAL_ADC_MspInit+0x18a>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001334:	4a55      	ldr	r2, [pc, #340]	@ (800148c <HAL_ADC_MspInit+0x1a4>)
 8001336:	6813      	ldr	r3, [r2, #0]
 8001338:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800133a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800133c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800133e:	d109      	bne.n	8001354 <HAL_ADC_MspInit+0x6c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001340:	4b53      	ldr	r3, [pc, #332]	@ (8001490 <HAL_ADC_MspInit+0x1a8>)
 8001342:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001344:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001348:	64da      	str	r2, [r3, #76]	@ 0x4c
 800134a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001354:	4b4e      	ldr	r3, [pc, #312]	@ (8001490 <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001356:	484f      	ldr	r0, [pc, #316]	@ (8001494 <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001358:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    hdma_adc1.Instance = DMA1_Channel1;
 800135a:	4d4f      	ldr	r5, [pc, #316]	@ (8001498 <HAL_ADC_MspInit+0x1b0>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800135c:	f042 0204 	orr.w	r2, r2, #4
 8001360:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800136a:	2201      	movs	r2, #1
 800136c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001372:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001378:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137a:	f001 fb2d 	bl	80029d8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 800137e:	4a47      	ldr	r2, [pc, #284]	@ (800149c <HAL_ADC_MspInit+0x1b4>)
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001380:	2305      	movs	r3, #5
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001382:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001386:	2280      	movs	r2, #128	@ 0x80
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001388:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800138c:	e9c5 2304 	strd	r2, r3, [r5, #16]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001390:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001394:	2320      	movs	r3, #32
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001396:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800139a:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800139e:	4628      	mov	r0, r5
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80013a0:	622e      	str	r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80013a2:	f001 fa2f 	bl	8002804 <HAL_DMA_Init>
 80013a6:	b918      	cbnz	r0, 80013b0 <HAL_ADC_MspInit+0xc8>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80013a8:	6565      	str	r5, [r4, #84]	@ 0x54
 80013aa:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 80013ac:	b020      	add	sp, #128	@ 0x80
 80013ae:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80013b0:	f7ff ff7e 	bl	80012b0 <Error_Handler>
 80013b4:	e7f8      	b.n	80013a8 <HAL_ADC_MspInit+0xc0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013ba:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013be:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013c0:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013c2:	931c      	str	r3, [sp, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c4:	f003 fa02 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 80013c8:	2800      	cmp	r0, #0
 80013ca:	d155      	bne.n	8001478 <HAL_ADC_MspInit+0x190>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013cc:	4a2f      	ldr	r2, [pc, #188]	@ (800148c <HAL_ADC_MspInit+0x1a4>)
 80013ce:	6813      	ldr	r3, [r2, #0]
 80013d0:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013d2:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013d4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013d6:	d109      	bne.n	80013ec <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001490 <HAL_ADC_MspInit+0x1a8>)
 80013da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80013dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80013e0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80013e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013e8:	9302      	str	r3, [sp, #8]
 80013ea:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ec:	4b28      	ldr	r3, [pc, #160]	@ (8001490 <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ee:	4829      	ldr	r0, [pc, #164]	@ (8001494 <HAL_ADC_MspInit+0x1ac>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    hdma_adc2.Instance = DMA1_Channel2;
 80013f2:	4d2b      	ldr	r5, [pc, #172]	@ (80014a0 <HAL_ADC_MspInit+0x1b8>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f4:	f042 0204 	orr.w	r2, r2, #4
 80013f8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80013fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001402:	2202      	movs	r2, #2
 8001404:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001406:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800140a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001410:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001412:	f001 fae1 	bl	80029d8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001416:	4a23      	ldr	r2, [pc, #140]	@ (80014a4 <HAL_ADC_MspInit+0x1bc>)
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001418:	2324      	movs	r3, #36	@ 0x24
 800141a:	e7b2      	b.n	8001382 <HAL_ADC_MspInit+0x9a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800141c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001420:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001424:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001426:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001428:	931d      	str	r3, [sp, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800142a:	f003 f9cf 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 800142e:	bb30      	cbnz	r0, 800147e <HAL_ADC_MspInit+0x196>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001430:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <HAL_ADC_MspInit+0x1a8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	481d      	ldr	r0, [pc, #116]	@ (80014a8 <HAL_ADC_MspInit+0x1c0>)
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001434:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    hdma_adc3.Instance = DMA1_Channel3;
 8001436:	4d1d      	ldr	r5, [pc, #116]	@ (80014ac <HAL_ADC_MspInit+0x1c4>)
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001438:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800143c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800143e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001440:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001444:	9204      	str	r2, [sp, #16]
 8001446:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001448:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800144a:	f042 0202 	orr.w	r2, r2, #2
 800144e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001458:	2201      	movs	r2, #1
 800145a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001460:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001466:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001468:	f001 fab6 	bl	80029d8 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 800146c:	4a10      	ldr	r2, [pc, #64]	@ (80014b0 <HAL_ADC_MspInit+0x1c8>)
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800146e:	2325      	movs	r3, #37	@ 0x25
 8001470:	e787      	b.n	8001382 <HAL_ADC_MspInit+0x9a>
      Error_Handler();
 8001472:	f7ff ff1d 	bl	80012b0 <Error_Handler>
 8001476:	e75d      	b.n	8001334 <HAL_ADC_MspInit+0x4c>
      Error_Handler();
 8001478:	f7ff ff1a 	bl	80012b0 <Error_Handler>
 800147c:	e7a6      	b.n	80013cc <HAL_ADC_MspInit+0xe4>
      Error_Handler();
 800147e:	f7ff ff17 	bl	80012b0 <Error_Handler>
 8001482:	e7d5      	b.n	8001430 <HAL_ADC_MspInit+0x148>
 8001484:	50000100 	.word	0x50000100
 8001488:	50000400 	.word	0x50000400
 800148c:	2000064c 	.word	0x2000064c
 8001490:	40021000 	.word	0x40021000
 8001494:	48000800 	.word	0x48000800
 8001498:	200004a8 	.word	0x200004a8
 800149c:	40020008 	.word	0x40020008
 80014a0:	20000448 	.word	0x20000448
 80014a4:	4002001c 	.word	0x4002001c
 80014a8:	48000400 	.word	0x48000400
 80014ac:	200003e8 	.word	0x200003e8
 80014b0:	40020030 	.word	0x40020030

080014b4 <HAL_HRTIM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhrtim: HRTIM handle pointer
  * @retval None
  */
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 80014b4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hhrtim->Instance==HRTIM1)
 80014b6:	4b26      	ldr	r3, [pc, #152]	@ (8001550 <HAL_HRTIM_MspInit+0x9c>)
 80014b8:	6802      	ldr	r2, [r0, #0]
{
 80014ba:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	2400      	movs	r4, #0
  if(hhrtim->Instance==HRTIM1)
 80014be:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80014c4:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80014c8:	9408      	str	r4, [sp, #32]
  if(hhrtim->Instance==HRTIM1)
 80014ca:	d001      	beq.n	80014d0 <HAL_HRTIM_MspInit+0x1c>

    /* USER CODE END HRTIM1_MspInit 1 */

  }

}
 80014cc:	b00a      	add	sp, #40	@ 0x28
 80014ce:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80014d0:	f503 4328 	add.w	r3, r3, #43008	@ 0xa800
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014d4:	2502      	movs	r5, #2
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80014d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	481e      	ldr	r0, [pc, #120]	@ (8001554 <HAL_HRTIM_MspInit+0xa0>)
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80014da:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80014de:	661a      	str	r2, [r3, #96]	@ 0x60
 80014e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014e2:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 80014e6:	9201      	str	r2, [sp, #4]
 80014e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014ec:	f042 0202 	orr.w	r2, r2, #2
 80014f0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014f4:	f002 0202 	and.w	r2, r2, #2
 80014f8:	9202      	str	r2, [sp, #8]
 80014fa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014fe:	f042 0201 	orr.w	r2, r2, #1
 8001502:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001506:	9506      	str	r5, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800150e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001512:	260d      	movs	r6, #13
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001516:	2302      	movs	r3, #2
 8001518:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 800151c:	9608      	str	r6, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f001 fa5a 	bl	80029d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001524:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	a904      	add	r1, sp, #16
 800152a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800152e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001530:	e9cd 5505 	strd	r5, r5, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 8001534:	e9cd 4607 	strd	r4, r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f001 fa4e 	bl	80029d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(HRTIM1_Master_IRQn, 8, 0);
 800153c:	4622      	mov	r2, r4
 800153e:	2108      	movs	r1, #8
 8001540:	2043      	movs	r0, #67	@ 0x43
 8001542:	f001 f8fb 	bl	800273c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_Master_IRQn);
 8001546:	2043      	movs	r0, #67	@ 0x43
 8001548:	f001 f934 	bl	80027b4 <HAL_NVIC_EnableIRQ>
}
 800154c:	b00a      	add	sp, #40	@ 0x28
 800154e:	bd70      	pop	{r4, r5, r6, pc}
 8001550:	40016800 	.word	0x40016800
 8001554:	48000400 	.word	0x48000400

08001558 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8001558:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hhrtim->Instance==HRTIM1)
 800155a:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <HAL_HRTIM_MspPostInit+0x7c>)
 800155c:	6802      	ldr	r2, [r0, #0]
{
 800155e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001560:	2400      	movs	r4, #0
  if(hhrtim->Instance==HRTIM1)
 8001562:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001568:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800156c:	9406      	str	r4, [sp, #24]
  if(hhrtim->Instance==HRTIM1)
 800156e:	d001      	beq.n	8001574 <HAL_HRTIM_MspPostInit+0x1c>
    /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

    /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8001570:	b008      	add	sp, #32
 8001572:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	f503 4328 	add.w	r3, r3, #43008	@ 0xa800
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001578:	2603      	movs	r6, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	4816      	ldr	r0, [pc, #88]	@ (80015d8 <HAL_HRTIM_MspPostInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157e:	f042 0202 	orr.w	r2, r2, #2
 8001582:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001584:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001586:	f002 0202 	and.w	r2, r2, #2
 800158a:	9200      	str	r2, [sp, #0]
 800158c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001590:	f042 0201 	orr.w	r2, r2, #1
 8001594:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001596:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800159e:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	250d      	movs	r5, #13
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80015a6:	2302      	movs	r3, #2
 80015a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ac:	e9cd 6505 	strd	r6, r5, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f001 fa11 	bl	80029d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80015b6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80015ba:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c4:	e9cd 4604 	strd	r4, r6, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_HRTIM1;
 80015ca:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015cc:	f001 fa04 	bl	80029d8 <HAL_GPIO_Init>
}
 80015d0:	b008      	add	sp, #32
 80015d2:	bd70      	pop	{r4, r5, r6, pc}
 80015d4:	40016800 	.word	0x40016800
 80015d8:	48000400 	.word	0x48000400
 80015dc:	00000000 	.word	0x00000000

080015e0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015e0:	b510      	push	{r4, lr}
 80015e2:	4604      	mov	r4, r0
 80015e4:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e8:	2254      	movs	r2, #84	@ 0x54
 80015ea:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80015f0:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80015f4:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015f6:	f007 f881 	bl	80086fc <memset>
  if(hi2c->Instance==I2C1)
 80015fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <HAL_I2C_MspInit+0x88>)
 80015fc:	6822      	ldr	r2, [r4, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d001      	beq.n	8001606 <HAL_I2C_MspInit+0x26>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001602:	b01c      	add	sp, #112	@ 0x70
 8001604:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001606:	2340      	movs	r3, #64	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001608:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800160a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800160c:	f003 f8de 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 8001610:	bb10      	cbnz	r0, 8001658 <HAL_I2C_MspInit+0x78>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	4c16      	ldr	r4, [pc, #88]	@ (800166c <HAL_I2C_MspInit+0x8c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	4816      	ldr	r0, [pc, #88]	@ (8001670 <HAL_I2C_MspInit+0x90>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800161e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001620:	ed9f 7b0f 	vldr	d7, [pc, #60]	@ 8001660 <HAL_I2C_MspInit+0x80>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800162a:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162c:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800162e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001630:	2200      	movs	r2, #0
 8001632:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001634:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001636:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800163a:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163e:	f001 f9cb 	bl	80029d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001642:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001644:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001648:	65a3      	str	r3, [r4, #88]	@ 0x58
 800164a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800164c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	9b01      	ldr	r3, [sp, #4]
}
 8001654:	b01c      	add	sp, #112	@ 0x70
 8001656:	bd10      	pop	{r4, pc}
      Error_Handler();
 8001658:	f7ff fe2a 	bl	80012b0 <Error_Handler>
 800165c:	e7d9      	b.n	8001612 <HAL_I2C_MspInit+0x32>
 800165e:	bf00      	nop
 8001660:	00000300 	.word	0x00000300
 8001664:	00000012 	.word	0x00000012
 8001668:	40005400 	.word	0x40005400
 800166c:	40021000 	.word	0x40021000
 8001670:	48000400 	.word	0x48000400
 8001674:	00000000 	.word	0x00000000

08001678 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001678:	b510      	push	{r4, lr}
 800167a:	4604      	mov	r4, r0
 800167c:	b0a0      	sub	sp, #128	@ 0x80
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001680:	2254      	movs	r2, #84	@ 0x54
 8001682:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8001688:	e9cd 1108 	strd	r1, r1, [sp, #32]
 800168c:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800168e:	f007 f835 	bl	80086fc <memset>
  if(huart->Instance==LPUART1)
 8001692:	4a51      	ldr	r2, [pc, #324]	@ (80017d8 <HAL_UART_MspInit+0x160>)
 8001694:	6823      	ldr	r3, [r4, #0]
 8001696:	4293      	cmp	r3, r2
 8001698:	d007      	beq.n	80016aa <HAL_UART_MspInit+0x32>

    /* USER CODE BEGIN LPUART1_MspInit 1 */

    /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(huart->Instance==USART1)
 800169a:	4a50      	ldr	r2, [pc, #320]	@ (80017dc <HAL_UART_MspInit+0x164>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d02f      	beq.n	8001700 <HAL_UART_MspInit+0x88>

    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 80016a0:	4a4f      	ldr	r2, [pc, #316]	@ (80017e0 <HAL_UART_MspInit+0x168>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d056      	beq.n	8001754 <HAL_UART_MspInit+0xdc>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80016a6:	b020      	add	sp, #128	@ 0x80
 80016a8:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80016aa:	2320      	movs	r3, #32
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016ac:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80016ae:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b0:	f003 f88c 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 80016b4:	2800      	cmp	r0, #0
 80016b6:	d176      	bne.n	80017a6 <HAL_UART_MspInit+0x12e>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80016b8:	4b4a      	ldr	r3, [pc, #296]	@ (80017e4 <HAL_UART_MspInit+0x16c>)
 80016ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016bc:	f042 0201 	orr.w	r2, r2, #1
 80016c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80016c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80016c4:	f002 0201 	and.w	r2, r2, #1
 80016c8:	9200      	str	r2, [sp, #0]
 80016ca:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016ce:	ed9f 7b3a 	vldr	d7, [pc, #232]	@ 80017b8 <HAL_UART_MspInit+0x140>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	f042 0201 	orr.w	r2, r2, #1
 80016d6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80016d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016da:	ed8d 7b06 	vstr	d7, [sp, #24]
 80016de:	ed9f 7b38 	vldr	d7, [pc, #224]	@ 80017c0 <HAL_UART_MspInit+0x148>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80016ea:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016f0:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80016f6:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f001 f96e 	bl	80029d8 <HAL_GPIO_Init>
}
 80016fc:	b020      	add	sp, #128	@ 0x80
 80016fe:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001700:	2301      	movs	r3, #1
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001702:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001704:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001706:	f003 f861 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 800170a:	2800      	cmp	r0, #0
 800170c:	d14e      	bne.n	80017ac <HAL_UART_MspInit+0x134>
    __HAL_RCC_USART1_CLK_ENABLE();
 800170e:	4b35      	ldr	r3, [pc, #212]	@ (80017e4 <HAL_UART_MspInit+0x16c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001710:	4835      	ldr	r0, [pc, #212]	@ (80017e8 <HAL_UART_MspInit+0x170>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001712:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001714:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001718:	661a      	str	r2, [r3, #96]	@ 0x60
 800171a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800171c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001720:	9202      	str	r2, [sp, #8]
 8001722:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001724:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001726:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 80017c8 <HAL_UART_MspInit+0x150>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172a:	f042 0204 	orr.w	r2, r2, #4
 800172e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001732:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001736:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80017c0 <HAL_UART_MspInit+0x148>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001740:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001742:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001744:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001748:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800174a:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174c:	f001 f944 	bl	80029d8 <HAL_GPIO_Init>
}
 8001750:	b020      	add	sp, #128	@ 0x80
 8001752:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001754:	2304      	movs	r3, #4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001756:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001758:	930b      	str	r3, [sp, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800175a:	f003 f837 	bl	80047cc <HAL_RCCEx_PeriphCLKConfig>
 800175e:	bb40      	cbnz	r0, 80017b2 <HAL_UART_MspInit+0x13a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001760:	4b20      	ldr	r3, [pc, #128]	@ (80017e4 <HAL_UART_MspInit+0x16c>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001762:	4821      	ldr	r0, [pc, #132]	@ (80017e8 <HAL_UART_MspInit+0x170>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8001764:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001766:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800176a:	659a      	str	r2, [r3, #88]	@ 0x58
 800176c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800176e:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 8001772:	9204      	str	r2, [sp, #16]
 8001774:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001778:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 80017d0 <HAL_UART_MspInit+0x158>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800177c:	f042 0204 	orr.w	r2, r2, #4
 8001780:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001782:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001784:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001788:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80017c0 <HAL_UART_MspInit+0x148>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001792:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001794:	2307      	movs	r3, #7
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001796:	ed8d 7b08 	vstr	d7, [sp, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800179a:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800179c:	930a      	str	r3, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800179e:	f001 f91b 	bl	80029d8 <HAL_GPIO_Init>
}
 80017a2:	b020      	add	sp, #128	@ 0x80
 80017a4:	bd10      	pop	{r4, pc}
      Error_Handler();
 80017a6:	f7ff fd83 	bl	80012b0 <Error_Handler>
 80017aa:	e785      	b.n	80016b8 <HAL_UART_MspInit+0x40>
      Error_Handler();
 80017ac:	f7ff fd80 	bl	80012b0 <Error_Handler>
 80017b0:	e7ad      	b.n	800170e <HAL_UART_MspInit+0x96>
      Error_Handler();
 80017b2:	f7ff fd7d 	bl	80012b0 <Error_Handler>
 80017b6:	e7d3      	b.n	8001760 <HAL_UART_MspInit+0xe8>
 80017b8:	0000000c 	.word	0x0000000c
 80017bc:	00000002 	.word	0x00000002
	...
 80017c8:	00000030 	.word	0x00000030
 80017cc:	00000002 	.word	0x00000002
 80017d0:	00000c00 	.word	0x00000c00
 80017d4:	00000002 	.word	0x00000002
 80017d8:	40008000 	.word	0x40008000
 80017dc:	40013800 	.word	0x40013800
 80017e0:	40004800 	.word	0x40004800
 80017e4:	40021000 	.word	0x40021000
 80017e8:	48000800 	.word	0x48000800

080017ec <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80017ec:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_ic->Instance==TIM2)
 80017ee:	6803      	ldr	r3, [r0, #0]
{
 80017f0:	b08c      	sub	sp, #48	@ 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	2400      	movs	r4, #0
  if(htim_ic->Instance==TIM2)
 80017f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80017fc:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001800:	940a      	str	r4, [sp, #40]	@ 0x28
  if(htim_ic->Instance==TIM2)
 8001802:	d004      	beq.n	800180e <HAL_TIM_IC_MspInit+0x22>

    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_ic->Instance==TIM3)
 8001804:	4a3c      	ldr	r2, [pc, #240]	@ (80018f8 <HAL_TIM_IC_MspInit+0x10c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d042      	beq.n	8001890 <HAL_TIM_IC_MspInit+0xa4>
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800180a:	b00c      	add	sp, #48	@ 0x30
 800180c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 800180e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001812:	2601      	movs	r6, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001814:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001816:	f042 0201 	orr.w	r2, r2, #1
 800181a:	659a      	str	r2, [r3, #88]	@ 0x58
 800181c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800181e:	f002 0201 	and.w	r2, r2, #1
 8001822:	9200      	str	r2, [sp, #0]
 8001824:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001828:	f042 0201 	orr.w	r2, r2, #1
 800182c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800182e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001830:	f002 0201 	and.w	r2, r2, #1
 8001834:	9201      	str	r2, [sp, #4]
 8001836:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001838:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800183a:	f042 0202 	orr.w	r2, r2, #2
 800183e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001842:	960a      	str	r6, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001844:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001848:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800184e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001850:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001854:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2502      	movs	r5, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800185a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185c:	f001 f8bc 	bl	80029d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001860:	2320      	movs	r3, #32
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	a906      	add	r1, sp, #24
 8001864:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001868:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	e9cd 5407 	strd	r5, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800186e:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f001 f8b1 	bl	80029d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187a:	4820      	ldr	r0, [pc, #128]	@ (80018fc <HAL_TIM_IC_MspInit+0x110>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800187c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	e9cd 5407 	strd	r5, r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001884:	e9cd 4609 	strd	r4, r6, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001888:	f001 f8a6 	bl	80029d8 <HAL_GPIO_Init>
}
 800188c:	b00c      	add	sp, #48	@ 0x30
 800188e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001890:	4b1b      	ldr	r3, [pc, #108]	@ (8001900 <HAL_TIM_IC_MspInit+0x114>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001892:	481c      	ldr	r0, [pc, #112]	@ (8001904 <HAL_TIM_IC_MspInit+0x118>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001894:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001896:	f042 0202 	orr.w	r2, r2, #2
 800189a:	659a      	str	r2, [r3, #88]	@ 0x58
 800189c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800189e:	f002 0202 	and.w	r2, r2, #2
 80018a2:	9203      	str	r2, [sp, #12]
 80018a4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018a8:	f042 0204 	orr.w	r2, r2, #4
 80018ac:	64da      	str	r2, [r3, #76]	@ 0x4c
 80018ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018b0:	f002 0204 	and.w	r2, r2, #4
 80018b4:	9204      	str	r2, [sp, #16]
 80018b6:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80018ba:	f042 0208 	orr.w	r2, r2, #8
 80018be:	64da      	str	r2, [r3, #76]	@ 0x4c
 80018c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80018c8:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018cc:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ce:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80018d0:	2302      	movs	r3, #2
 80018d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018d6:	950a      	str	r5, [sp, #40]	@ 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d8:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018da:	f001 f87d 	bl	80029d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018de:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e0:	4809      	ldr	r0, [pc, #36]	@ (8001908 <HAL_TIM_IC_MspInit+0x11c>)
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018e2:	950a      	str	r5, [sp, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018e4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	e9cd 3506 	strd	r3, r5, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ea:	e9cd 4408 	strd	r4, r4, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ee:	f001 f873 	bl	80029d8 <HAL_GPIO_Init>
}
 80018f2:	b00c      	add	sp, #48	@ 0x30
 80018f4:	bd70      	pop	{r4, r5, r6, pc}
 80018f6:	bf00      	nop
 80018f8:	40000400 	.word	0x40000400
 80018fc:	48000400 	.word	0x48000400
 8001900:	40021000 	.word	0x40021000
 8001904:	48000800 	.word	0x48000800
 8001908:	48000c00 	.word	0x48000c00

0800190c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800190c:	e7fe      	b.n	800190c <NMI_Handler>
 800190e:	bf00      	nop

08001910 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <HardFault_Handler>
 8001912:	bf00      	nop

08001914 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001914:	e7fe      	b.n	8001914 <MemManage_Handler>
 8001916:	bf00      	nop

08001918 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <BusFault_Handler>
 800191a:	bf00      	nop

0800191c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler>
 800191e:	bf00      	nop

08001920 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop

08001924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop

08001928 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop

0800192c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800192c:	f000 b8b4 	b.w	8001a98 <HAL_IncTick>

08001930 <DMA1_Channel1_IRQHandler>:
  */
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//GPIOA->BSRR = GPIO_PIN_6;
	stand_im_periodic_isr();
 8001930:	f006 bd5c 	b.w	80083ec <stand_im_periodic_isr>

08001934 <SPI1_IRQHandler>:
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */
	GPIOA->BSRR = GPIO_PIN_6;
 8001934:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
}
static inline void AD2S1200_SetReadVelocity(void){
	AD2S1200_RDVEL_PORT->BRR = AD2S1200_RDVEL_PIN;
}
static inline uint8_t AD2S1200_IsReadPosition(void){
	if(AD2S1200_RDVEL_PORT->ODR & AD2S1200_RDVEL_PIN)
 8001938:	4a11      	ldr	r2, [pc, #68]	@ (8001980 <SPI1_IRQHandler+0x4c>)
 800193a:	2140      	movs	r1, #64	@ 0x40
 800193c:	6199      	str	r1, [r3, #24]
 800193e:	6953      	ldr	r3, [r2, #20]
 8001940:	045b      	lsls	r3, r3, #17
 8001942:	d514      	bpl.n	800196e <SPI1_IRQHandler+0x3a>
 * AD2S1200_SPIInit: Initialize SPI for AD2S1200
 */
static inline void AD2S1200_SPI_RXNE_ISR(void){
	if(AD2S1200_IsReadPosition()){
		AD2S1200_SetReadVelocity();
		AD2S1200_Data.Position = (uint16_t) AD2S1200_SPI->DR;
 8001944:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <SPI1_IRQHandler+0x50>)
	AD2S1200_RDVEL_PORT->BRR = AD2S1200_RDVEL_PIN;
 8001946:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800194a:	6291      	str	r1, [r2, #40]	@ 0x28
		AD2S1200_Data.Position = (uint16_t) AD2S1200_SPI->DR;
 800194c:	4a0e      	ldr	r2, [pc, #56]	@ (8001988 <SPI1_IRQHandler+0x54>)
 800194e:	68d9      	ldr	r1, [r3, #12]
 8001950:	8011      	strh	r1, [r2, #0]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001958:	601a      	str	r2, [r3, #0]
		LL_SPI_Enable(AD2S1200_SPI);
		__NOP();
 800195a:	bf00      	nop
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001962:	601a      	str	r2, [r3, #0]
	AD2S1200_SPI_RXNE_ISR();
	GPIOA->BRR = GPIO_PIN_6;
 8001964:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001968:	2240      	movs	r2, #64	@ 0x40
 800196a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE END SPI1_IRQn 0 */
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800196c:	4770      	bx	lr
		LL_SPI_Disable(AD2S1200_SPI);
	}
	else{

		AD2S1200_Data.VelStat = (uint16_t) AD2S1200_SPI->DR;
 800196e:	4a05      	ldr	r2, [pc, #20]	@ (8001984 <SPI1_IRQHandler+0x50>)
 8001970:	4b05      	ldr	r3, [pc, #20]	@ (8001988 <SPI1_IRQHandler+0x54>)
 8001972:	68d2      	ldr	r2, [r2, #12]
 8001974:	805a      	strh	r2, [r3, #2]
	GPIOA->BRR = GPIO_PIN_6;
 8001976:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800197a:	2240      	movs	r2, #64	@ 0x40
 800197c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800197e:	4770      	bx	lr
 8001980:	48000400 	.word	0x48000400
 8001984:	40013000 	.word	0x40013000
 8001988:	20001a8c 	.word	0x20001a8c

0800198c <HRTIM1_Master_IRQHandler>:
	AD2S1200_NSAMPLE_PORT->BRR = AD2S1200_NSAMPLE_PIN;
 800198c:	4909      	ldr	r1, [pc, #36]	@ (80019b4 <HRTIM1_Master_IRQHandler+0x28>)
	AD2S1200_SampleStart();

	/*
	 * Clear Flag
	 */
	__HAL_HRTIM_MASTER_CLEAR_IT(&hhrtim1, HRTIM_MASTER_IT_MCMP1);
 800198e:	480a      	ldr	r0, [pc, #40]	@ (80019b8 <HRTIM1_Master_IRQHandler+0x2c>)
	GPIOA->BSRR = GPIO_PIN_6;
 8001990:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
{
 8001994:	b410      	push	{r4}
	GPIOA->BSRR = GPIO_PIN_6;
 8001996:	2240      	movs	r2, #64	@ 0x40
 8001998:	2420      	movs	r4, #32
 800199a:	619a      	str	r2, [r3, #24]
 800199c:	628c      	str	r4, [r1, #40]	@ 0x28
	AD2S1200_RDVEL_PORT->BSRR = AD2S1200_RDVEL_PIN;
 800199e:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
 80019a2:	618c      	str	r4, [r1, #24]
	__HAL_HRTIM_MASTER_CLEAR_IT(&hhrtim1, HRTIM_MASTER_IT_MCMP1);
 80019a4:	6801      	ldr	r1, [r0, #0]
	GPIOA->BRR = GPIO_PIN_6;
  /* USER CODE END HRTIM1_Master_IRQn 0 */
  /* USER CODE BEGIN HRTIM1_Master_IRQn 1 */

  /* USER CODE END HRTIM1_Master_IRQn 1 */
}
 80019a6:	f85d 4b04 	ldr.w	r4, [sp], #4
	__HAL_HRTIM_MASTER_CLEAR_IT(&hhrtim1, HRTIM_MASTER_IT_MCMP1);
 80019aa:	2001      	movs	r0, #1
 80019ac:	6088      	str	r0, [r1, #8]
	GPIOA->BRR = GPIO_PIN_6;
 80019ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	48000400 	.word	0x48000400
 80019b8:	200002ec 	.word	0x200002ec

080019bc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <SystemInit+0x18>)
 80019be:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80019c2:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019c6:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 80019ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80019ce:	6099      	str	r1, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019d8:	480d      	ldr	r0, [pc, #52]	@ (8001a10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019dc:	480d      	ldr	r0, [pc, #52]	@ (8001a14 <LoopForever+0x6>)
  ldr r1, =_edata
 80019de:	490e      	ldr	r1, [pc, #56]	@ (8001a18 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019e0:	4a0e      	ldr	r2, [pc, #56]	@ (8001a1c <LoopForever+0xe>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019e4:	e002      	b.n	80019ec <LoopCopyDataInit>

080019e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ea:	3304      	adds	r3, #4

080019ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f0:	d3f9      	bcc.n	80019e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001a20 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019f4:	4c0b      	ldr	r4, [pc, #44]	@ (8001a24 <LoopForever+0x16>)
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f8:	e001      	b.n	80019fe <LoopFillZerobss>

080019fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019fc:	3204      	adds	r2, #4

080019fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a00:	d3fb      	bcc.n	80019fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a02:	f7ff ffdb 	bl	80019bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a06:	f006 fe81 	bl	800870c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a0a:	f7fe ff05 	bl	8000818 <main>

08001a0e <LoopForever>:

LoopForever:
    b LoopForever
 8001a0e:	e7fe      	b.n	8001a0e <LoopForever>
  ldr   r0, =_estack
 8001a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a18:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001a1c:	08009ad4 	.word	0x08009ad4
  ldr r2, =_sbss
 8001a20:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001a24:	20001bfc 	.word	0x20001bfc

08001a28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a28:	e7fe      	b.n	8001a28 <ADC1_2_IRQHandler>
	...

08001a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a6c <HAL_InitTick+0x40>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	b90b      	cbnz	r3, 8001a38 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a34:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8001a36:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a38:	490d      	ldr	r1, [pc, #52]	@ (8001a70 <HAL_InitTick+0x44>)
 8001a3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a3e:	4605      	mov	r5, r0
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	6808      	ldr	r0, [r1, #0]
 8001a46:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a4a:	f000 fec1 	bl	80027d0 <HAL_SYSTICK_Config>
 8001a4e:	4604      	mov	r4, r0
 8001a50:	2800      	cmp	r0, #0
 8001a52:	d1ef      	bne.n	8001a34 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a54:	2d0f      	cmp	r5, #15
 8001a56:	d8ed      	bhi.n	8001a34 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a58:	4602      	mov	r2, r0
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f000 fe6c 	bl	800273c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a64:	4b03      	ldr	r3, [pc, #12]	@ (8001a74 <HAL_InitTick+0x48>)
 8001a66:	4620      	mov	r0, r4
 8001a68:	601d      	str	r5, [r3, #0]
}
 8001a6a:	bd38      	pop	{r3, r4, r5, pc}
 8001a6c:	20000004 	.word	0x20000004
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000008 	.word	0x20000008

08001a78 <HAL_Init>:
{
 8001a78:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a7a:	2003      	movs	r0, #3
 8001a7c:	f000 fe4c 	bl	8002718 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a80:	2000      	movs	r0, #0
 8001a82:	f7ff ffd3 	bl	8001a2c <HAL_InitTick>
 8001a86:	b110      	cbz	r0, 8001a8e <HAL_Init+0x16>
    status = HAL_ERROR;
 8001a88:	2401      	movs	r4, #1
}
 8001a8a:	4620      	mov	r0, r4
 8001a8c:	bd10      	pop	{r4, pc}
 8001a8e:	4604      	mov	r4, r0
    HAL_MspInit();
 8001a90:	f7ff fc10 	bl	80012b4 <HAL_MspInit>
}
 8001a94:	4620      	mov	r0, r4
 8001a96:	bd10      	pop	{r4, pc}

08001a98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a98:	4a03      	ldr	r2, [pc, #12]	@ (8001aa8 <HAL_IncTick+0x10>)
 8001a9a:	4904      	ldr	r1, [pc, #16]	@ (8001aac <HAL_IncTick+0x14>)
 8001a9c:	6813      	ldr	r3, [r2, #0]
 8001a9e:	6809      	ldr	r1, [r1, #0]
 8001aa0:	440b      	add	r3, r1
 8001aa2:	6013      	str	r3, [r2, #0]
}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	20000650 	.word	0x20000650
 8001aac:	20000004 	.word	0x20000004

08001ab0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001ab0:	4b01      	ldr	r3, [pc, #4]	@ (8001ab8 <HAL_GetTick+0x8>)
 8001ab2:	6818      	ldr	r0, [r3, #0]
}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000650 	.word	0x20000650

08001abc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001abc:	b530      	push	{r4, r5, lr}
 8001abe:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d05c      	beq.n	8001b82 <HAL_ADC_Init+0xc6>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ac8:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8001aca:	4604      	mov	r4, r0
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	f000 80c1 	beq.w	8001c54 <HAL_ADC_Init+0x198>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ad2:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ad4:	6893      	ldr	r3, [r2, #8]
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	d505      	bpl.n	8001ae6 <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001ada:	6893      	ldr	r3, [r2, #8]
 8001adc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001ae0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ae4:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ae6:	6893      	ldr	r3, [r2, #8]
 8001ae8:	00dd      	lsls	r5, r3, #3
 8001aea:	d419      	bmi.n	8001b20 <HAL_ADC_Init+0x64>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001aec:	4b6f      	ldr	r3, [pc, #444]	@ (8001cac <HAL_ADC_Init+0x1f0>)
 8001aee:	4870      	ldr	r0, [pc, #448]	@ (8001cb0 <HAL_ADC_Init+0x1f4>)
 8001af0:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001af2:	6891      	ldr	r1, [r2, #8]
 8001af4:	099b      	lsrs	r3, r3, #6
 8001af6:	fba0 0303 	umull	r0, r3, r0, r3
 8001afa:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8001afe:	099b      	lsrs	r3, r3, #6
 8001b00:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8001b04:	3301      	adds	r3, #1
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001b0c:	6091      	str	r1, [r2, #8]
 8001b0e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001b10:	9b01      	ldr	r3, [sp, #4]
 8001b12:	b12b      	cbz	r3, 8001b20 <HAL_ADC_Init+0x64>
    {
      wait_loop_index--;
 8001b14:	9b01      	ldr	r3, [sp, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001b1a:	9b01      	ldr	r3, [sp, #4]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f9      	bne.n	8001b14 <HAL_ADC_Init+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b20:	6893      	ldr	r3, [r2, #8]
 8001b22:	00d8      	lsls	r0, r3, #3
 8001b24:	d430      	bmi.n	8001b88 <HAL_ADC_Init+0xcc>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b26:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001b28:	f043 0310 	orr.w	r3, r3, #16
 8001b2c:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2e:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001b30:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b32:	4303      	orrs	r3, r0
 8001b34:	6623      	str	r3, [r4, #96]	@ 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b36:	6893      	ldr	r3, [r2, #8]
 8001b38:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b3c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001b3e:	d11c      	bne.n	8001b7a <HAL_ADC_Init+0xbe>
 8001b40:	06d9      	lsls	r1, r3, #27
 8001b42:	d41a      	bmi.n	8001b7a <HAL_ADC_Init+0xbe>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b44:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001b46:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001b4a:	f043 0302 	orr.w	r3, r3, #2
 8001b4e:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b50:	6893      	ldr	r3, [r2, #8]
 8001b52:	07db      	lsls	r3, r3, #31
 8001b54:	d429      	bmi.n	8001baa <HAL_ADC_Init+0xee>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b56:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8001b5a:	d017      	beq.n	8001b8c <HAL_ADC_Init+0xd0>
 8001b5c:	4b55      	ldr	r3, [pc, #340]	@ (8001cb4 <HAL_ADC_Init+0x1f8>)
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d014      	beq.n	8001b8c <HAL_ADC_Init+0xd0>
 8001b62:	4955      	ldr	r1, [pc, #340]	@ (8001cb8 <HAL_ADC_Init+0x1fc>)
 8001b64:	4b55      	ldr	r3, [pc, #340]	@ (8001cbc <HAL_ADC_Init+0x200>)
 8001b66:	6889      	ldr	r1, [r1, #8]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	430b      	orrs	r3, r1
 8001b6c:	4954      	ldr	r1, [pc, #336]	@ (8001cc0 <HAL_ADC_Init+0x204>)
 8001b6e:	6889      	ldr	r1, [r1, #8]
 8001b70:	430b      	orrs	r3, r1
 8001b72:	07d9      	lsls	r1, r3, #31
 8001b74:	d419      	bmi.n	8001baa <HAL_ADC_Init+0xee>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b76:	4953      	ldr	r1, [pc, #332]	@ (8001cc4 <HAL_ADC_Init+0x208>)
 8001b78:	e011      	b.n	8001b9e <HAL_ADC_Init+0xe2>
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b7a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001b7c:	f043 0310 	orr.w	r3, r3, #16
 8001b80:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8001b82:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001b84:	b003      	add	sp, #12
 8001b86:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b88:	2000      	movs	r0, #0
 8001b8a:	e7d4      	b.n	8001b36 <HAL_ADC_Init+0x7a>
 8001b8c:	4b49      	ldr	r3, [pc, #292]	@ (8001cb4 <HAL_ADC_Init+0x1f8>)
 8001b8e:	f04f 41a0 	mov.w	r1, #1342177280	@ 0x50000000
 8001b92:	6889      	ldr	r1, [r1, #8]
 8001b94:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b96:	430b      	orrs	r3, r1
 8001b98:	07dd      	lsls	r5, r3, #31
 8001b9a:	d406      	bmi.n	8001baa <HAL_ADC_Init+0xee>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b9c:	494a      	ldr	r1, [pc, #296]	@ (8001cc8 <HAL_ADC_Init+0x20c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001b9e:	688b      	ldr	r3, [r1, #8]
 8001ba0:	6865      	ldr	r5, [r4, #4]
 8001ba2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8001ba6:	432b      	orrs	r3, r5
 8001ba8:	608b      	str	r3, [r1, #8]
                 hadc->Init.DataAlign                                                   |
 8001baa:	68e5      	ldr	r5, [r4, #12]
 8001bac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001bae:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 8001bb2:	432b      	orrs	r3, r5
 8001bb4:	68a5      	ldr	r5, [r4, #8]
 8001bb6:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bb8:	7f65      	ldrb	r5, [r4, #29]
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bba:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8001bbc:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001bc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bc4:	d04c      	beq.n	8001c60 <HAL_ADC_Init+0x1a4>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001bc6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001bc8:	b121      	cbz	r1, 8001bd4 <HAL_ADC_Init+0x118>
                   | hadc->Init.ExternalTrigConvEdge
 8001bca:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bcc:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001bd0:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001bd2:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001bd4:	68d5      	ldr	r5, [r2, #12]
 8001bd6:	493d      	ldr	r1, [pc, #244]	@ (8001ccc <HAL_ADC_Init+0x210>)
 8001bd8:	4029      	ands	r1, r5
 8001bda:	4319      	orrs	r1, r3
 8001bdc:	60d1      	str	r1, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001bde:	6913      	ldr	r3, [r2, #16]
 8001be0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001be2:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8001be6:	430b      	orrs	r3, r1
 8001be8:	6113      	str	r3, [r2, #16]
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bea:	6893      	ldr	r3, [r2, #8]
 8001bec:	071b      	lsls	r3, r3, #28
 8001bee:	d422      	bmi.n	8001c36 <HAL_ADC_Init+0x17a>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bf0:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bf2:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bf6:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bf8:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bfc:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001bfe:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c02:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c06:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 8001c08:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001c0a:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c0c:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8001c0e:	2900      	cmp	r1, #0
 8001c10:	d033      	beq.n	8001c7a <HAL_ADC_Init+0x1be>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c16:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001c18:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8001c1c:	f36f 030d 	bfc	r3, #0, #14
 8001c20:	430b      	orrs	r3, r1
 8001c22:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8001c26:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d02f      	beq.n	8001c8e <HAL_ADC_Init+0x1d2>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c2e:	6913      	ldr	r3, [r2, #16]
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	6113      	str	r3, [r2, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c36:	6963      	ldr	r3, [r4, #20]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d016      	beq.n	8001c6a <HAL_ADC_Init+0x1ae>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c3c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001c3e:	f023 030f 	bic.w	r3, r3, #15
 8001c42:	6313      	str	r3, [r2, #48]	@ 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c44:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001c46:	f023 0303 	bic.w	r3, r3, #3
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
 8001c50:	b003      	add	sp, #12
 8001c52:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8001c54:	f7ff fb48 	bl	80012e8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001c58:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 8001c5a:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8001c5e:	e738      	b.n	8001ad2 <HAL_ADC_Init+0x16>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c60:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001c62:	3901      	subs	r1, #1
 8001c64:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001c68:	e7ad      	b.n	8001bc6 <HAL_ADC_Init+0x10a>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c6a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001c6c:	6a23      	ldr	r3, [r4, #32]
 8001c6e:	f021 010f 	bic.w	r1, r1, #15
 8001c72:	3b01      	subs	r3, #1
 8001c74:	430b      	orrs	r3, r1
 8001c76:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c78:	e7e4      	b.n	8001c44 <HAL_ADC_Init+0x188>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c7e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c80:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8001c84:	f36f 030d 	bfc	r3, #0, #14
 8001c88:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001c8c:	e7cb      	b.n	8001c26 <HAL_ADC_Init+0x16a>
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c8e:	6911      	ldr	r1, [r2, #16]
 8001c90:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001c92:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8001c94:	f36f 018a 	bfc	r1, #2, #9
 8001c98:	432b      	orrs	r3, r5
 8001c9a:	430b      	orrs	r3, r1
 8001c9c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8001c9e:	430b      	orrs	r3, r1
 8001ca0:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8001ca2:	430b      	orrs	r3, r1
 8001ca4:	f043 0301 	orr.w	r3, r3, #1
 8001ca8:	6113      	str	r3, [r2, #16]
 8001caa:	e7c4      	b.n	8001c36 <HAL_ADC_Init+0x17a>
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	053e2d63 	.word	0x053e2d63
 8001cb4:	50000100 	.word	0x50000100
 8001cb8:	50000400 	.word	0x50000400
 8001cbc:	50000500 	.word	0x50000500
 8001cc0:	50000600 	.word	0x50000600
 8001cc4:	50000700 	.word	0x50000700
 8001cc8:	50000300 	.word	0x50000300
 8001ccc:	fff04007 	.word	0xfff04007

08001cd0 <HAL_ADC_ConvCpltCallback>:
/**
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop

08001cd4 <HAL_ADC_ConvHalfCpltCallback>:
/**
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop

08001cd8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001cda:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8001cdc:	f7ff fffa 	bl	8001cd4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ce0:	bd08      	pop	{r3, pc}
 8001ce2:	bf00      	nop

08001ce4 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop

08001ce8 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ce8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001cea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cec:	f012 0f50 	tst.w	r2, #80	@ 0x50
{
 8001cf0:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cf2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001cf4:	d11d      	bne.n	8001d32 <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001cf6:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cfc:	65da      	str	r2, [r3, #92]	@ 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001cfe:	680a      	ldr	r2, [r1, #0]
 8001d00:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001d04:	68ca      	ldr	r2, [r1, #12]
 8001d06:	d01b      	beq.n	8001d40 <ADC_DMAConvCplt+0x58>
 8001d08:	f412 6f40 	tst.w	r2, #3072	@ 0xc00
 8001d0c:	d10d      	bne.n	8001d2a <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001d0e:	68ca      	ldr	r2, [r1, #12]
 8001d10:	0494      	lsls	r4, r2, #18
 8001d12:	d40a      	bmi.n	8001d2a <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d1a:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d1e:	04d1      	lsls	r1, r2, #19
 8001d20:	d403      	bmi.n	8001d2a <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d22:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d24:	f042 0201 	orr.w	r2, r2, #1
 8001d28:	65da      	str	r2, [r3, #92]	@ 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff ffd0 	bl	8001cd0 <HAL_ADC_ConvCpltCallback>
}
 8001d30:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001d32:	06d2      	lsls	r2, r2, #27
 8001d34:	d40a      	bmi.n	8001d4c <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8001d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d3e:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001d40:	0790      	lsls	r0, r2, #30
 8001d42:	d5e7      	bpl.n	8001d14 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff ffc3 	bl	8001cd0 <HAL_ADC_ConvCpltCallback>
 8001d4a:	e7f1      	b.n	8001d30 <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ffc9 	bl	8001ce4 <HAL_ADC_ErrorCallback>
}
 8001d52:	bd10      	pop	{r4, pc}

08001d54 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d54:	6a80      	ldr	r0, [r0, #40]	@ 0x28
{
 8001d56:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001d58:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d5e:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001d60:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8001d62:	f043 0304 	orr.w	r3, r3, #4
 8001d66:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001d68:	f7ff ffbc 	bl	8001ce4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001d6c:	bd08      	pop	{r3, pc}
 8001d6e:	bf00      	nop

08001d70 <HAL_ADC_ConfigChannel>:
{
 8001d70:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001d72:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8001d76:	b083      	sub	sp, #12
 8001d78:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001d7a:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8001d7c:	f04f 0000 	mov.w	r0, #0
 8001d80:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8001d82:	f000 8169 	beq.w	8002058 <HAL_ADC_ConfigChannel+0x2e8>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d86:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d8e:	6894      	ldr	r4, [r2, #8]
 8001d90:	0767      	lsls	r7, r4, #29
 8001d92:	d469      	bmi.n	8001e68 <HAL_ADC_ConfigChannel+0xf8>
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d94:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d96:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8001d9a:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001d9e:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8001da2:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001da4:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8001da8:	261f      	movs	r6, #31
 8001daa:	f854 500e 	ldr.w	r5, [r4, lr]
 8001dae:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001db2:	fa00 f00c 	lsl.w	r0, r0, ip
 8001db6:	fa06 fc0c 	lsl.w	ip, r6, ip
 8001dba:	ea25 0c0c 	bic.w	ip, r5, ip
 8001dbe:	ea40 000c 	orr.w	r0, r0, ip
 8001dc2:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dc6:	6890      	ldr	r0, [r2, #8]
 8001dc8:	0746      	lsls	r6, r0, #29
 8001dca:	d556      	bpl.n	8001e7a <HAL_ADC_ConfigChannel+0x10a>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dcc:	6890      	ldr	r0, [r2, #8]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dce:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001dd0:	6894      	ldr	r4, [r2, #8]
 8001dd2:	07e4      	lsls	r4, r4, #31
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001dd4:	4605      	mov	r5, r0
 8001dd6:	d413      	bmi.n	8001e00 <HAL_ADC_ConfigChannel+0x90>
 8001dd8:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8001dda:	4cb2      	ldr	r4, [pc, #712]	@ (80020a4 <HAL_ADC_ConfigChannel+0x334>)
 8001ddc:	f8d2 60b0 	ldr.w	r6, [r2, #176]	@ 0xb0
 8001de0:	f007 0c18 	and.w	ip, r7, #24
 8001de4:	fa24 f40c 	lsr.w	r4, r4, ip
 8001de8:	f3c0 0c12 	ubfx	ip, r0, #0, #19
 8001dec:	4004      	ands	r4, r0
 8001dee:	ea26 060c 	bic.w	r6, r6, ip
 8001df2:	4334      	orrs	r4, r6
 8001df4:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001df8:	4cab      	ldr	r4, [pc, #684]	@ (80020a8 <HAL_ADC_ConfigChannel+0x338>)
 8001dfa:	42a7      	cmp	r7, r4
 8001dfc:	f000 808f 	beq.w	8001f1e <HAL_ADC_ConfigChannel+0x1ae>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e00:	49aa      	ldr	r1, [pc, #680]	@ (80020ac <HAL_ADC_ConfigChannel+0x33c>)
 8001e02:	420d      	tst	r5, r1
 8001e04:	d02e      	beq.n	8001e64 <HAL_ADC_ConfigChannel+0xf4>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e06:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8001e0a:	f000 80da 	beq.w	8001fc2 <HAL_ADC_ConfigChannel+0x252>
 8001e0e:	49a8      	ldr	r1, [pc, #672]	@ (80020b0 <HAL_ADC_ConfigChannel+0x340>)
 8001e10:	428a      	cmp	r2, r1
 8001e12:	f000 80ef 	beq.w	8001ff4 <HAL_ADC_ConfigChannel+0x284>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001e16:	f501 61c0 	add.w	r1, r1, #1536	@ 0x600
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001e1a:	48a6      	ldr	r0, [pc, #664]	@ (80020b4 <HAL_ADC_ConfigChannel+0x344>)
 8001e1c:	6889      	ldr	r1, [r1, #8]
 8001e1e:	4285      	cmp	r5, r0
 8001e20:	f001 74e0 	and.w	r4, r1, #29360128	@ 0x1c00000
 8001e24:	f000 80f2 	beq.w	800200c <HAL_ADC_ConfigChannel+0x29c>
 8001e28:	48a3      	ldr	r0, [pc, #652]	@ (80020b8 <HAL_ADC_ConfigChannel+0x348>)
 8001e2a:	4285      	cmp	r5, r0
 8001e2c:	f000 80ee 	beq.w	800200c <HAL_ADC_ConfigChannel+0x29c>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001e30:	48a2      	ldr	r0, [pc, #648]	@ (80020bc <HAL_ADC_ConfigChannel+0x34c>)
 8001e32:	4285      	cmp	r5, r0
 8001e34:	f000 8128 	beq.w	8002088 <HAL_ADC_ConfigChannel+0x318>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001e38:	48a1      	ldr	r0, [pc, #644]	@ (80020c0 <HAL_ADC_ConfigChannel+0x350>)
 8001e3a:	4285      	cmp	r5, r0
 8001e3c:	d112      	bne.n	8001e64 <HAL_ADC_ConfigChannel+0xf4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e3e:	0249      	lsls	r1, r1, #9
 8001e40:	d410      	bmi.n	8001e64 <HAL_ADC_ConfigChannel+0xf4>
        if (ADC_VREFINT_INSTANCE(hadc))
 8001e42:	499b      	ldr	r1, [pc, #620]	@ (80020b0 <HAL_ADC_ConfigChannel+0x340>)
 8001e44:	428a      	cmp	r2, r1
 8001e46:	d00d      	beq.n	8001e64 <HAL_ADC_ConfigChannel+0xf4>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e48:	489e      	ldr	r0, [pc, #632]	@ (80020c4 <HAL_ADC_ConfigChannel+0x354>)
 8001e4a:	f501 61c0 	add.w	r1, r1, #1536	@ 0x600
 8001e4e:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8001e52:	bf08      	it	eq
 8001e54:	4601      	moveq	r1, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e56:	688a      	ldr	r2, [r1, #8]
 8001e58:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001e5c:	4322      	orrs	r2, r4
 8001e5e:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8001e62:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e64:	2000      	movs	r0, #0
 8001e66:	e003      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x100>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e6a:	f042 0220 	orr.w	r2, r2, #32
 8001e6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8001e76:	b003      	add	sp, #12
 8001e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e7a:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001e7c:	6808      	ldr	r0, [r1, #0]
 8001e7e:	0725      	lsls	r5, r4, #28
 8001e80:	d4a6      	bmi.n	8001dd0 <HAL_ADC_ConfigChannel+0x60>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001e82:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8001e84:	f3c0 5604 	ubfx	r6, r0, #20, #5
 8001e88:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e8a:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 8001e8c:	40b4      	lsls	r4, r6
 8001e8e:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e92:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8001e96:	ea6f 0404 	mvn.w	r4, r4
 8001e9a:	f000 8153 	beq.w	8002144 <HAL_ADC_ConfigChannel+0x3d4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e9e:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8001ea2:	40b5      	lsls	r5, r6
 8001ea4:	583e      	ldr	r6, [r7, r0]
 8001ea6:	4034      	ands	r4, r6
 8001ea8:	432c      	orrs	r4, r5
 8001eaa:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001eac:	6950      	ldr	r0, [r2, #20]
 8001eae:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001eb2:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001eb4:	e9d1 6404 	ldrd	r6, r4, [r1, #16]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001eb8:	2e04      	cmp	r6, #4
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001eba:	68d5      	ldr	r5, [r2, #12]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ebc:	6808      	ldr	r0, [r1, #0]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ebe:	f000 810d 	beq.w	80020dc <HAL_ADC_ConfigChannel+0x36c>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001ec2:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 8001ec6:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 8001ec8:	f000 47f8 	and.w	r7, r0, #2080374784	@ 0x7c000000
 8001ecc:	fa04 f005 	lsl.w	r0, r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ed0:	f102 0460 	add.w	r4, r2, #96	@ 0x60
  MODIFY_REG(*preg,
 8001ed4:	4d7c      	ldr	r5, [pc, #496]	@ (80020c8 <HAL_ADC_ConfigChannel+0x358>)
 8001ed6:	f854 c026 	ldr.w	ip, [r4, r6, lsl #2]
 8001eda:	ea0c 0505 	and.w	r5, ip, r5
 8001ede:	433d      	orrs	r5, r7
 8001ee0:	4328      	orrs	r0, r5
 8001ee2:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8001ee6:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eea:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8001eec:	698e      	ldr	r6, [r1, #24]
 8001eee:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8001ef2:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8001ef6:	4330      	orrs	r0, r6
 8001ef8:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001efc:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001efe:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8001f00:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8001f04:	f1a5 0501 	sub.w	r5, r5, #1
 8001f08:	fab5 f585 	clz	r5, r5
 8001f0c:	096d      	lsrs	r5, r5, #5
 8001f0e:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8001f12:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8001f16:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8001f1a:	6808      	ldr	r0, [r1, #0]
}
 8001f1c:	e758      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x60>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f1e:	f1bc 0f00 	cmp.w	ip, #0
 8001f22:	f000 809c 	beq.w	800205e <HAL_ADC_ConfigChannel+0x2ee>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f2a:	2c00      	cmp	r4, #0
 8001f2c:	f000 8114 	beq.w	8002158 <HAL_ADC_ConfigChannel+0x3e8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001f30:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f34:	3401      	adds	r4, #1
 8001f36:	f004 041f 	and.w	r4, r4, #31
 8001f3a:	2c09      	cmp	r4, #9
 8001f3c:	f240 810c 	bls.w	8002158 <HAL_ADC_ConfigChannel+0x3e8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8001f44:	2c00      	cmp	r4, #0
 8001f46:	f000 81ac 	beq.w	80022a2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001f4a:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f4e:	3401      	adds	r4, #1
 8001f50:	06a4      	lsls	r4, r4, #26
 8001f52:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001f5a:	2d00      	cmp	r5, #0
 8001f5c:	f000 819f 	beq.w	800229e <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8001f60:	fab5 f585 	clz	r5, r5
 8001f64:	3501      	adds	r5, #1
 8001f66:	f005 051f 	and.w	r5, r5, #31
 8001f6a:	2601      	movs	r6, #1
 8001f6c:	fa06 f505 	lsl.w	r5, r6, r5
 8001f70:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8001f76:	2800      	cmp	r0, #0
 8001f78:	f000 818f 	beq.w	800229a <HAL_ADC_ConfigChannel+0x52a>
  return __builtin_clz(value);
 8001f7c:	fab0 f080 	clz	r0, r0
 8001f80:	1c45      	adds	r5, r0, #1
 8001f82:	f005 051f 	and.w	r5, r5, #31
 8001f86:	2003      	movs	r0, #3
 8001f88:	f06f 061d 	mvn.w	r6, #29
 8001f8c:	fb10 6005 	smlabb	r0, r0, r5, r6
 8001f90:	0500      	lsls	r0, r0, #20
 8001f92:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f96:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f98:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8001f9a:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001f9c:	f005 0504 	and.w	r5, r5, #4
 8001fa0:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8001fa4:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8001fa8:	fa04 f700 	lsl.w	r7, r4, r0
 8001fac:	f04f 0c07 	mov.w	ip, #7
 8001fb0:	5974      	ldr	r4, [r6, r5]
 8001fb2:	fa0c f000 	lsl.w	r0, ip, r0
 8001fb6:	ea24 0000 	bic.w	r0, r4, r0
 8001fba:	4338      	orrs	r0, r7
 8001fbc:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001fbe:	680d      	ldr	r5, [r1, #0]
}
 8001fc0:	e71e      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x90>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001fc2:	4840      	ldr	r0, [pc, #256]	@ (80020c4 <HAL_ADC_ConfigChannel+0x354>)
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001fc4:	4e3b      	ldr	r6, [pc, #236]	@ (80020b4 <HAL_ADC_ConfigChannel+0x344>)
 8001fc6:	6881      	ldr	r1, [r0, #8]
 8001fc8:	42b5      	cmp	r5, r6
 8001fca:	f001 74e0 	and.w	r4, r1, #29360128	@ 0x1c00000
 8001fce:	d065      	beq.n	800209c <HAL_ADC_ConfigChannel+0x32c>
 8001fd0:	4e39      	ldr	r6, [pc, #228]	@ (80020b8 <HAL_ADC_ConfigChannel+0x348>)
 8001fd2:	42b5      	cmp	r5, r6
 8001fd4:	d062      	beq.n	800209c <HAL_ADC_ConfigChannel+0x32c>
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fd6:	4e39      	ldr	r6, [pc, #228]	@ (80020bc <HAL_ADC_ConfigChannel+0x34c>)
 8001fd8:	42b5      	cmp	r5, r6
 8001fda:	f47f af2d 	bne.w	8001e38 <HAL_ADC_ConfigChannel+0xc8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fde:	01cd      	lsls	r5, r1, #7
 8001fe0:	f53f af40 	bmi.w	8001e64 <HAL_ADC_ConfigChannel+0xf4>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001fe4:	6882      	ldr	r2, [r0, #8]
 8001fe6:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8001fea:	4322      	orrs	r2, r4
 8001fec:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001ff0:	6082      	str	r2, [r0, #8]
}
 8001ff2:	e737      	b.n	8001e64 <HAL_ADC_ConfigChannel+0xf4>
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001ff4:	482f      	ldr	r0, [pc, #188]	@ (80020b4 <HAL_ADC_ConfigChannel+0x344>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001ff6:	4933      	ldr	r1, [pc, #204]	@ (80020c4 <HAL_ADC_ConfigChannel+0x354>)
 8001ff8:	4285      	cmp	r5, r0
 8001ffa:	6889      	ldr	r1, [r1, #8]
 8001ffc:	f43f af32 	beq.w	8001e64 <HAL_ADC_ConfigChannel+0xf4>
 8002000:	482d      	ldr	r0, [pc, #180]	@ (80020b8 <HAL_ADC_ConfigChannel+0x348>)
 8002002:	4285      	cmp	r5, r0
 8002004:	f001 74e0 	and.w	r4, r1, #29360128	@ 0x1c00000
 8002008:	f47f af12 	bne.w	8001e30 <HAL_ADC_ConfigChannel+0xc0>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800200c:	020f      	lsls	r7, r1, #8
 800200e:	f53f af29 	bmi.w	8001e64 <HAL_ADC_ConfigChannel+0xf4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002012:	492e      	ldr	r1, [pc, #184]	@ (80020cc <HAL_ADC_ConfigChannel+0x35c>)
 8002014:	428a      	cmp	r2, r1
 8002016:	f47f af25 	bne.w	8001e64 <HAL_ADC_ConfigChannel+0xf4>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800201a:	482d      	ldr	r0, [pc, #180]	@ (80020d0 <HAL_ADC_ConfigChannel+0x360>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800201c:	4a2d      	ldr	r2, [pc, #180]	@ (80020d4 <HAL_ADC_ConfigChannel+0x364>)
 800201e:	4d2e      	ldr	r5, [pc, #184]	@ (80020d8 <HAL_ADC_ConfigChannel+0x368>)
 8002020:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002022:	6881      	ldr	r1, [r0, #8]
 8002024:	0992      	lsrs	r2, r2, #6
 8002026:	fba5 5202 	umull	r5, r2, r5, r2
 800202a:	0992      	lsrs	r2, r2, #6
 800202c:	f021 71e0 	bic.w	r1, r1, #29360128	@ 0x1c00000
 8002030:	3201      	adds	r2, #1
 8002032:	4321      	orrs	r1, r4
 8002034:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002038:	0092      	lsls	r2, r2, #2
 800203a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800203e:	6081      	str	r1, [r0, #8]
 8002040:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002042:	9a01      	ldr	r2, [sp, #4]
 8002044:	2a00      	cmp	r2, #0
 8002046:	f43f af0d 	beq.w	8001e64 <HAL_ADC_ConfigChannel+0xf4>
            wait_loop_index--;
 800204a:	9a01      	ldr	r2, [sp, #4]
 800204c:	3a01      	subs	r2, #1
 800204e:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002050:	9a01      	ldr	r2, [sp, #4]
 8002052:	2a00      	cmp	r2, #0
 8002054:	d1f9      	bne.n	800204a <HAL_ADC_ConfigChannel+0x2da>
 8002056:	e705      	b.n	8001e64 <HAL_ADC_ConfigChannel+0xf4>
  __HAL_LOCK(hadc);
 8002058:	2002      	movs	r0, #2
}
 800205a:	b003      	add	sp, #12
 800205c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800205e:	0e80      	lsrs	r0, r0, #26
 8002060:	3001      	adds	r0, #1
 8002062:	f000 051f 	and.w	r5, r0, #31
 8002066:	2401      	movs	r4, #1
 8002068:	0680      	lsls	r0, r0, #26
 800206a:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 800206e:	40ac      	lsls	r4, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002070:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002072:	ea44 0400 	orr.w	r4, r4, r0
 8002076:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800207a:	f240 8092 	bls.w	80021a2 <HAL_ADC_ConfigChannel+0x432>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800207e:	381e      	subs	r0, #30
 8002080:	0500      	lsls	r0, r0, #20
 8002082:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8002086:	e786      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x226>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002088:	01c8      	lsls	r0, r1, #7
 800208a:	f53f aeeb 	bmi.w	8001e64 <HAL_ADC_ConfigChannel+0xf4>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800208e:	4d08      	ldr	r5, [pc, #32]	@ (80020b0 <HAL_ADC_ConfigChannel+0x340>)
 8002090:	480c      	ldr	r0, [pc, #48]	@ (80020c4 <HAL_ADC_ConfigChannel+0x354>)
 8002092:	490f      	ldr	r1, [pc, #60]	@ (80020d0 <HAL_ADC_ConfigChannel+0x360>)
 8002094:	42aa      	cmp	r2, r5
 8002096:	bf18      	it	ne
 8002098:	4608      	movne	r0, r1
 800209a:	e7a3      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x274>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800209c:	020e      	lsls	r6, r1, #8
 800209e:	d5bd      	bpl.n	800201c <HAL_ADC_ConfigChannel+0x2ac>
 80020a0:	e6e0      	b.n	8001e64 <HAL_ADC_ConfigChannel+0xf4>
 80020a2:	bf00      	nop
 80020a4:	0007ffff 	.word	0x0007ffff
 80020a8:	407f0000 	.word	0x407f0000
 80020ac:	80080000 	.word	0x80080000
 80020b0:	50000100 	.word	0x50000100
 80020b4:	c3210000 	.word	0xc3210000
 80020b8:	90c00010 	.word	0x90c00010
 80020bc:	c7520000 	.word	0xc7520000
 80020c0:	cb840000 	.word	0xcb840000
 80020c4:	50000300 	.word	0x50000300
 80020c8:	03fff000 	.word	0x03fff000
 80020cc:	50000600 	.word	0x50000600
 80020d0:	50000700 	.word	0x50000700
 80020d4:	20000000 	.word	0x20000000
 80020d8:	053e2d63 	.word	0x053e2d63
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020dc:	6e14      	ldr	r4, [r2, #96]	@ 0x60
 80020de:	6e14      	ldr	r4, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020e0:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020e4:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020e8:	2d00      	cmp	r5, #0
 80020ea:	d15c      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x436>
 80020ec:	f3c0 6684 	ubfx	r6, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020f0:	42b4      	cmp	r4, r6
 80020f2:	f000 808e 	beq.w	8002212 <HAL_ADC_ConfigChannel+0x4a2>
 80020f6:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 80020f8:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020fa:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020fe:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8002102:	f102 0c64 	add.w	ip, r2, #100	@ 0x64
 8002106:	42b5      	cmp	r5, r6
 8002108:	f000 80a9 	beq.w	800225e <HAL_ADC_ConfigChannel+0x4ee>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800210c:	68a5      	ldr	r5, [r4, #8]
 800210e:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002110:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002114:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002118:	f3c0 6684 	ubfx	r6, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800211c:	42ae      	cmp	r6, r5
 800211e:	f000 808c 	beq.w	800223a <HAL_ADC_ConfigChannel+0x4ca>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002122:	68e5      	ldr	r5, [r4, #12]
 8002124:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002126:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800212a:	f3c5 6484 	ubfx	r4, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800212e:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002132:	42a5      	cmp	r5, r4
 8002134:	f47f ae4c 	bne.w	8001dd0 <HAL_ADC_ConfigChannel+0x60>
  MODIFY_REG(*preg,
 8002138:	6830      	ldr	r0, [r6, #0]
 800213a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800213e:	6030      	str	r0, [r6, #0]
 8002140:	6808      	ldr	r0, [r1, #0]
}
 8002142:	e645      	b.n	8001dd0 <HAL_ADC_ConfigChannel+0x60>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002144:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8002148:	5835      	ldr	r5, [r6, r0]
 800214a:	402c      	ands	r4, r5
 800214c:	5034      	str	r4, [r6, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800214e:	6950      	ldr	r0, [r2, #20]
 8002150:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8002154:	6150      	str	r0, [r2, #20]
}
 8002156:	e6ad      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x144>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800215c:	2c00      	cmp	r4, #0
 800215e:	f000 80a8 	beq.w	80022b2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002162:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002166:	3401      	adds	r4, #1
 8002168:	06a4      	lsls	r4, r4, #26
 800216a:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8002172:	2d00      	cmp	r5, #0
 8002174:	f000 809b 	beq.w	80022ae <HAL_ADC_ConfigChannel+0x53e>
  return __builtin_clz(value);
 8002178:	fab5 f585 	clz	r5, r5
 800217c:	3501      	adds	r5, #1
 800217e:	f005 051f 	and.w	r5, r5, #31
 8002182:	2601      	movs	r6, #1
 8002184:	fa06 f505 	lsl.w	r5, r6, r5
 8002188:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800218e:	2800      	cmp	r0, #0
 8002190:	f000 808a 	beq.w	80022a8 <HAL_ADC_ConfigChannel+0x538>
  return __builtin_clz(value);
 8002194:	fab0 f080 	clz	r0, r0
 8002198:	3001      	adds	r0, #1
 800219a:	f000 001f 	and.w	r0, r0, #31
 800219e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80021a2:	0500      	lsls	r0, r0, #20
 80021a4:	e6f7      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x226>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80021aa:	b11d      	cbz	r5, 80021b4 <HAL_ADC_ConfigChannel+0x444>
  return __builtin_clz(value);
 80021ac:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021b0:	42ac      	cmp	r4, r5
 80021b2:	d02e      	beq.n	8002212 <HAL_ADC_ConfigChannel+0x4a2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021b4:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 80021b6:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021b8:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021bc:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80021c0:	f102 0c64 	add.w	ip, r2, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c4:	fa90 f6a0 	rbit	r6, r0
 80021c8:	f104 0708 	add.w	r7, r4, #8
 80021cc:	46be      	mov	lr, r7
  if (value == 0U)
 80021ce:	2e00      	cmp	r6, #0
 80021d0:	d05e      	beq.n	8002290 <HAL_ADC_ConfigChannel+0x520>
  return __builtin_clz(value);
 80021d2:	fab6 f686 	clz	r6, r6
 80021d6:	42ae      	cmp	r6, r5
 80021d8:	d043      	beq.n	8002262 <HAL_ADC_ConfigChannel+0x4f2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021da:	683d      	ldr	r5, [r7, #0]
 80021dc:	683d      	ldr	r5, [r7, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021de:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	fa90 fca0 	rbit	ip, r0
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021e6:	f104 060c 	add.w	r6, r4, #12
 80021ea:	46b6      	mov	lr, r6
  if (value == 0U)
 80021ec:	f1bc 0f00 	cmp.w	ip, #0
 80021f0:	d049      	beq.n	8002286 <HAL_ADC_ConfigChannel+0x516>
  return __builtin_clz(value);
 80021f2:	fabc fc8c 	clz	ip, ip
 80021f6:	45ac      	cmp	ip, r5
 80021f8:	d021      	beq.n	800223e <HAL_ADC_ConfigChannel+0x4ce>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021fa:	6834      	ldr	r4, [r6, #0]
 80021fc:	6834      	ldr	r4, [r6, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021fe:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8002206:	2d00      	cmp	r5, #0
 8002208:	f43f ade2 	beq.w	8001dd0 <HAL_ADC_ConfigChannel+0x60>
  return __builtin_clz(value);
 800220c:	fab5 f585 	clz	r5, r5
 8002210:	e78f      	b.n	8002132 <HAL_ADC_ConfigChannel+0x3c2>
  MODIFY_REG(*preg,
 8002212:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8002214:	4614      	mov	r4, r2
 8002216:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800221a:	f844 0f60 	str.w	r0, [r4, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800221e:	6e50      	ldr	r0, [r2, #100]	@ 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002220:	6808      	ldr	r0, [r1, #0]
 8002222:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8002224:	f3c0 0612 	ubfx	r6, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002228:	f102 0c64 	add.w	ip, r2, #100	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800222c:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002230:	2e00      	cmp	r6, #0
 8002232:	d1c7      	bne.n	80021c4 <HAL_ADC_ConfigChannel+0x454>
 8002234:	f3c0 6684 	ubfx	r6, r0, #26, #5
 8002238:	e765      	b.n	8002106 <HAL_ADC_ConfigChannel+0x396>
 800223a:	f104 0e0c 	add.w	lr, r4, #12
  MODIFY_REG(*preg,
 800223e:	6838      	ldr	r0, [r7, #0]
 8002240:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002244:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002246:	68e0      	ldr	r0, [r4, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002248:	6808      	ldr	r0, [r1, #0]
 800224a:	68e4      	ldr	r4, [r4, #12]
 800224c:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002250:	4676      	mov	r6, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002252:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002256:	2d00      	cmp	r5, #0
 8002258:	f43f af69 	beq.w	800212e <HAL_ADC_ConfigChannel+0x3be>
 800225c:	e7d1      	b.n	8002202 <HAL_ADC_ConfigChannel+0x492>
 800225e:	f104 0e08 	add.w	lr, r4, #8
  MODIFY_REG(*preg,
 8002262:	f8dc 0000 	ldr.w	r0, [ip]
 8002266:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800226a:	f8cc 0000 	str.w	r0, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800226e:	68a0      	ldr	r0, [r4, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002270:	6808      	ldr	r0, [r1, #0]
 8002272:	68a5      	ldr	r5, [r4, #8]
 8002274:	f3c0 0612 	ubfx	r6, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002278:	4677      	mov	r7, lr
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800227a:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800227e:	2e00      	cmp	r6, #0
 8002280:	f43f af4a 	beq.w	8002118 <HAL_ADC_ConfigChannel+0x3a8>
 8002284:	e7ad      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x472>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002286:	68e5      	ldr	r5, [r4, #12]
 8002288:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800228a:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800228e:	e7b8      	b.n	8002202 <HAL_ADC_ConfigChannel+0x492>
 8002290:	68a5      	ldr	r5, [r4, #8]
 8002292:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002294:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8002298:	e7a3      	b.n	80021e2 <HAL_ADC_ConfigChannel+0x472>
 800229a:	4807      	ldr	r0, [pc, #28]	@ (80022b8 <HAL_ADC_ConfigChannel+0x548>)
 800229c:	e67b      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x226>
 800229e:	2502      	movs	r5, #2
 80022a0:	e666      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x200>
 80022a2:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 80022a6:	e656      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x1e6>
 80022a8:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 80022ac:	e673      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x226>
 80022ae:	2502      	movs	r5, #2
 80022b0:	e76a      	b.n	8002188 <HAL_ADC_ConfigChannel+0x418>
 80022b2:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 80022b6:	e75a      	b.n	800216e <HAL_ADC_ConfigChannel+0x3fe>
 80022b8:	fe500000 	.word	0xfe500000

080022bc <ADC_Enable>:
{
 80022bc:	b570      	push	{r4, r5, r6, lr}
 80022be:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 80022c0:	2200      	movs	r2, #0
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022c2:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t wait_loop_index = 0UL;
 80022c4:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	07d2      	lsls	r2, r2, #31
 80022ca:	d434      	bmi.n	8002336 <ADC_Enable+0x7a>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80022cc:	6899      	ldr	r1, [r3, #8]
 80022ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002384 <ADC_Enable+0xc8>)
 80022d0:	4211      	tst	r1, r2
 80022d2:	4604      	mov	r4, r0
 80022d4:	d132      	bne.n	800233c <ADC_Enable+0x80>
  MODIFY_REG(ADCx->CR,
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80022dc:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80022e0:	f042 0201 	orr.w	r2, r2, #1
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80022e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	d048      	beq.n	800237e <ADC_Enable+0xc2>
 80022ec:	4826      	ldr	r0, [pc, #152]	@ (8002388 <ADC_Enable+0xcc>)
 80022ee:	4a27      	ldr	r2, [pc, #156]	@ (800238c <ADC_Enable+0xd0>)
 80022f0:	4927      	ldr	r1, [pc, #156]	@ (8002390 <ADC_Enable+0xd4>)
 80022f2:	4283      	cmp	r3, r0
 80022f4:	bf18      	it	ne
 80022f6:	460a      	movne	r2, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80022f8:	6893      	ldr	r3, [r2, #8]
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	d429      	bmi.n	8002352 <ADC_Enable+0x96>
    tickstart = HAL_GetTick();
 80022fe:	f7ff fbd7 	bl	8001ab0 <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002302:	6823      	ldr	r3, [r4, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	07d6      	lsls	r6, r2, #31
    tickstart = HAL_GetTick();
 8002308:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800230a:	d414      	bmi.n	8002336 <ADC_Enable+0x7a>
  MODIFY_REG(ADCx->CR,
 800230c:	4e21      	ldr	r6, [pc, #132]	@ (8002394 <ADC_Enable+0xd8>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	07d0      	lsls	r0, r2, #31
 8002312:	d404      	bmi.n	800231e <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	4032      	ands	r2, r6
 8002318:	f042 0201 	orr.w	r2, r2, #1
 800231c:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800231e:	f7ff fbc7 	bl	8001ab0 <HAL_GetTick>
 8002322:	1b43      	subs	r3, r0, r5
 8002324:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002326:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002328:	d902      	bls.n	8002330 <ADC_Enable+0x74>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	07d1      	lsls	r1, r2, #31
 800232e:	d505      	bpl.n	800233c <ADC_Enable+0x80>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	07d2      	lsls	r2, r2, #31
 8002334:	d5eb      	bpl.n	800230e <ADC_Enable+0x52>
  return HAL_OK;
 8002336:	2000      	movs	r0, #0
}
 8002338:	b002      	add	sp, #8
 800233a:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800233e:	f043 0310 	orr.w	r3, r3, #16
 8002342:	65e3      	str	r3, [r4, #92]	@ 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002344:	6e23      	ldr	r3, [r4, #96]	@ 0x60
      return HAL_ERROR;
 8002346:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002348:	f043 0301 	orr.w	r3, r3, #1
 800234c:	6623      	str	r3, [r4, #96]	@ 0x60
}
 800234e:	b002      	add	sp, #8
 8002350:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002352:	4b11      	ldr	r3, [pc, #68]	@ (8002398 <ADC_Enable+0xdc>)
 8002354:	4a11      	ldr	r2, [pc, #68]	@ (800239c <ADC_Enable+0xe0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	099b      	lsrs	r3, r3, #6
 800235a:	fba2 2303 	umull	r2, r3, r2, r3
 800235e:	099b      	lsrs	r3, r3, #6
 8002360:	3301      	adds	r3, #1
 8002362:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800236a:	9b01      	ldr	r3, [sp, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0c6      	beq.n	80022fe <ADC_Enable+0x42>
        wait_loop_index--;
 8002370:	9b01      	ldr	r3, [sp, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8002376:	9b01      	ldr	r3, [sp, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f9      	bne.n	8002370 <ADC_Enable+0xb4>
 800237c:	e7bf      	b.n	80022fe <ADC_Enable+0x42>
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800237e:	4a03      	ldr	r2, [pc, #12]	@ (800238c <ADC_Enable+0xd0>)
 8002380:	e7ba      	b.n	80022f8 <ADC_Enable+0x3c>
 8002382:	bf00      	nop
 8002384:	8000003f 	.word	0x8000003f
 8002388:	50000100 	.word	0x50000100
 800238c:	50000300 	.word	0x50000300
 8002390:	50000700 	.word	0x50000700
 8002394:	7fffffc0 	.word	0x7fffffc0
 8002398:	20000000 	.word	0x20000000
 800239c:	053e2d63 	.word	0x053e2d63

080023a0 <HAL_ADC_Start_DMA>:
{
 80023a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023a4:	6805      	ldr	r5, [r0, #0]
 80023a6:	f1b5 4fa0 	cmp.w	r5, #1342177280	@ 0x50000000
{
 80023aa:	4604      	mov	r4, r0
 80023ac:	460e      	mov	r6, r1
 80023ae:	4617      	mov	r7, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023b0:	d067      	beq.n	8002482 <HAL_ADC_Start_DMA+0xe2>
 80023b2:	4a39      	ldr	r2, [pc, #228]	@ (8002498 <HAL_ADC_Start_DMA+0xf8>)
 80023b4:	4839      	ldr	r0, [pc, #228]	@ (800249c <HAL_ADC_Start_DMA+0xfc>)
 80023b6:	4b3a      	ldr	r3, [pc, #232]	@ (80024a0 <HAL_ADC_Start_DMA+0x100>)
 80023b8:	4295      	cmp	r5, r2
 80023ba:	bf18      	it	ne
 80023bc:	4618      	movne	r0, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023be:	6882      	ldr	r2, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023c0:	68ab      	ldr	r3, [r5, #8]
 80023c2:	075b      	lsls	r3, r3, #29
 80023c4:	d415      	bmi.n	80023f2 <HAL_ADC_Start_DMA+0x52>
    __HAL_LOCK(hadc);
 80023c6:	f894 3058 	ldrb.w	r3, [r4, #88]	@ 0x58
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d011      	beq.n	80023f2 <HAL_ADC_Start_DMA+0x52>
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80023ce:	4b35      	ldr	r3, [pc, #212]	@ (80024a4 <HAL_ADC_Start_DMA+0x104>)
    __HAL_LOCK(hadc);
 80023d0:	2001      	movs	r0, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80023d2:	429d      	cmp	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023d4:	f002 081f 	and.w	r8, r2, #31
    __HAL_LOCK(hadc);
 80023d8:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80023dc:	d00c      	beq.n	80023f8 <HAL_ADC_Start_DMA+0x58>
 80023de:	f240 2321 	movw	r3, #545	@ 0x221
 80023e2:	fa23 f308 	lsr.w	r3, r3, r8
 80023e6:	4003      	ands	r3, r0
 80023e8:	d106      	bne.n	80023f8 <HAL_ADC_Start_DMA+0x58>
      __HAL_UNLOCK(hadc);
 80023ea:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
}
 80023ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 80023f2:	2002      	movs	r0, #2
}
 80023f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80023f8:	4620      	mov	r0, r4
 80023fa:	f7ff ff5f 	bl	80022bc <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80023fe:	2800      	cmp	r0, #0
 8002400:	d141      	bne.n	8002486 <HAL_ADC_Start_DMA+0xe6>
        ADC_STATE_CLR_SET(hadc->State,
 8002402:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002404:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8002406:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800240a:	f023 0301 	bic.w	r3, r3, #1
 800240e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002412:	65e3      	str	r3, [r4, #92]	@ 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002414:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <HAL_ADC_Start_DMA+0xf8>)
 8002416:	4299      	cmp	r1, r3
 8002418:	d03a      	beq.n	8002490 <HAL_ADC_Start_DMA+0xf0>
 800241a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800241e:	4299      	cmp	r1, r3
 8002420:	d036      	beq.n	8002490 <HAL_ADC_Start_DMA+0xf0>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002422:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8002424:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002428:	65e3      	str	r3, [r4, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800242a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800242c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 800242e:	4d1e      	ldr	r5, [pc, #120]	@ (80024a8 <HAL_ADC_Start_DMA+0x108>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002430:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002434:	bf1c      	itt	ne
 8002436:	6e23      	ldrne	r3, [r4, #96]	@ 0x60
 8002438:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 800243c:	6623      	str	r3, [r4, #96]	@ 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800243e:	62c5      	str	r5, [r0, #44]	@ 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002440:	4d1a      	ldr	r5, [pc, #104]	@ (80024ac <HAL_ADC_Start_DMA+0x10c>)
 8002442:	6305      	str	r5, [r0, #48]	@ 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002444:	4d1a      	ldr	r5, [pc, #104]	@ (80024b0 <HAL_ADC_Start_DMA+0x110>)
 8002446:	6345      	str	r5, [r0, #52]	@ 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002448:	251c      	movs	r5, #28
 800244a:	600d      	str	r5, [r1, #0]
        __HAL_UNLOCK(hadc);
 800244c:	2500      	movs	r5, #0
 800244e:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002452:	684d      	ldr	r5, [r1, #4]
 8002454:	f045 0510 	orr.w	r5, r5, #16
 8002458:	604d      	str	r5, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800245a:	68cd      	ldr	r5, [r1, #12]
 800245c:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002460:	463b      	mov	r3, r7
 8002462:	4632      	mov	r2, r6
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002464:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002466:	3140      	adds	r1, #64	@ 0x40
 8002468:	f000 fa5e 	bl	8002928 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 800246c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800246e:	6893      	ldr	r3, [r2, #8]
 8002470:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002474:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002478:	f043 0304 	orr.w	r3, r3, #4
 800247c:	6093      	str	r3, [r2, #8]
}
 800247e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002482:	4806      	ldr	r0, [pc, #24]	@ (800249c <HAL_ADC_Start_DMA+0xfc>)
 8002484:	e79b      	b.n	80023be <HAL_ADC_Start_DMA+0x1e>
        __HAL_UNLOCK(hadc);
 8002486:	2300      	movs	r3, #0
 8002488:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58
}
 800248c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002490:	f1b8 0f00 	cmp.w	r8, #0
 8002494:	d1c9      	bne.n	800242a <HAL_ADC_Start_DMA+0x8a>
 8002496:	e7c4      	b.n	8002422 <HAL_ADC_Start_DMA+0x82>
 8002498:	50000100 	.word	0x50000100
 800249c:	50000300 	.word	0x50000300
 80024a0:	50000700 	.word	0x50000700
 80024a4:	50000600 	.word	0x50000600
 80024a8:	08001ce9 	.word	0x08001ce9
 80024ac:	08001cd9 	.word	0x08001cd9
 80024b0:	08001d55 	.word	0x08001d55

080024b4 <ADC_Disable>:
{
 80024b4:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80024b6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	0795      	lsls	r5, r2, #30
 80024bc:	d502      	bpl.n	80024c4 <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024be:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 80024c0:	2000      	movs	r0, #0
}
 80024c2:	bd38      	pop	{r3, r4, r5, pc}
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	07d4      	lsls	r4, r2, #31
 80024c8:	d5fa      	bpl.n	80024c0 <ADC_Disable+0xc>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	f002 020d 	and.w	r2, r2, #13
 80024d0:	2a01      	cmp	r2, #1
 80024d2:	4604      	mov	r4, r0
 80024d4:	d009      	beq.n	80024ea <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80024d8:	f043 0310 	orr.w	r3, r3, #16
 80024dc:	65e3      	str	r3, [r4, #92]	@ 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024de:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_ERROR;
 80024e6:	2001      	movs	r0, #1
}
 80024e8:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80024f0:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80024f4:	2103      	movs	r1, #3
 80024f6:	f042 0202 	orr.w	r2, r2, #2
 80024fa:	609a      	str	r2, [r3, #8]
 80024fc:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80024fe:	f7ff fad7 	bl	8001ab0 <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002502:	6823      	ldr	r3, [r4, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8002508:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800250a:	d403      	bmi.n	8002514 <ADC_Disable+0x60>
 800250c:	e7d8      	b.n	80024c0 <ADC_Disable+0xc>
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	07db      	lsls	r3, r3, #31
 8002512:	d5d5      	bpl.n	80024c0 <ADC_Disable+0xc>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002514:	f7ff facc 	bl	8001ab0 <HAL_GetTick>
 8002518:	1b40      	subs	r0, r0, r5
 800251a:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800251c:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800251e:	d9f6      	bls.n	800250e <ADC_Disable+0x5a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	07d2      	lsls	r2, r2, #31
 8002524:	d5f3      	bpl.n	800250e <ADC_Disable+0x5a>
 8002526:	e7d6      	b.n	80024d6 <ADC_Disable+0x22>

08002528 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002528:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800252a:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 800252e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8002530:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002532:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 8002534:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002536:	d03f      	beq.n	80025b8 <HAL_ADCEx_Calibration_Start+0x90>
 8002538:	2301      	movs	r3, #1
 800253a:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800253e:	4604      	mov	r4, r0
 8002540:	460d      	mov	r5, r1
 8002542:	f7ff ffb7 	bl	80024b4 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002546:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
  if (tmp_hal_status == HAL_OK)
 8002548:	b9e8      	cbnz	r0, 8002586 <HAL_ADCEx_Calibration_Start+0x5e>
    ADC_STATE_CLR_SET(hadc->State,
 800254a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800254e:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002552:	6822      	ldr	r2, [r4, #0]
    ADC_STATE_CLR_SET(hadc->State,
 8002554:	f043 0302 	orr.w	r3, r3, #2
 8002558:	65e3      	str	r3, [r4, #92]	@ 0x5c
  MODIFY_REG(ADCx->CR,
 800255a:	6893      	ldr	r3, [r2, #8]
 800255c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8002560:	f005 4180 	and.w	r1, r5, #1073741824	@ 0x40000000
 8002564:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002568:	430b      	orrs	r3, r1
 800256a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800256e:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002570:	6893      	ldr	r3, [r2, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002572:	4913      	ldr	r1, [pc, #76]	@ (80025c0 <HAL_ADCEx_Calibration_Start+0x98>)
 8002574:	2b00      	cmp	r3, #0
 8002576:	db0e      	blt.n	8002596 <HAL_ADCEx_Calibration_Start+0x6e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002578:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	f043 0301 	orr.w	r3, r3, #1
 8002582:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8002584:	e002      	b.n	800258c <HAL_ADCEx_Calibration_Start+0x64>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002586:	f043 0310 	orr.w	r3, r3, #16
 800258a:	65e3      	str	r3, [r4, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800258c:	2300      	movs	r3, #0
 800258e:	f884 3058 	strb.w	r3, [r4, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8002592:	b003      	add	sp, #12
 8002594:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 8002596:	9b01      	ldr	r3, [sp, #4]
 8002598:	3301      	adds	r3, #1
 800259a:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800259c:	9b01      	ldr	r3, [sp, #4]
 800259e:	428b      	cmp	r3, r1
 80025a0:	d9e6      	bls.n	8002570 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 80025a2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80025a4:	f023 0312 	bic.w	r3, r3, #18
        __HAL_UNLOCK(hadc);
 80025a8:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 80025aa:	f043 0310 	orr.w	r3, r3, #16
 80025ae:	65e3      	str	r3, [r4, #92]	@ 0x5c
        __HAL_UNLOCK(hadc);
 80025b0:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
        return HAL_ERROR;
 80025b4:	2001      	movs	r0, #1
 80025b6:	e7ec      	b.n	8002592 <HAL_ADCEx_Calibration_Start+0x6a>
  __HAL_LOCK(hadc);
 80025b8:	2002      	movs	r0, #2
}
 80025ba:	b003      	add	sp, #12
 80025bc:	bd30      	pop	{r4, r5, pc}
 80025be:	bf00      	nop
 80025c0:	0004de01 	.word	0x0004de01

080025c4 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025c4:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 80025c8:	2a01      	cmp	r2, #1
 80025ca:	d04c      	beq.n	8002666 <HAL_ADCEx_MultiModeConfigChannel+0xa2>
{
 80025cc:	b470      	push	{r4, r5, r6}

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80025ce:	6802      	ldr	r2, [r0, #0]
{
 80025d0:	b09d      	sub	sp, #116	@ 0x74
 80025d2:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80025d4:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 80025d6:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80025d8:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80025dc:	9418      	str	r4, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 80025de:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80025e2:	9419      	str	r4, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80025e4:	d00b      	beq.n	80025fe <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80025e6:	4d46      	ldr	r5, [pc, #280]	@ (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80025e8:	42aa      	cmp	r2, r5
 80025ea:	d03a      	beq.n	8002662 <HAL_ADCEx_MultiModeConfigChannel+0x9e>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025ee:	f883 4058 	strb.w	r4, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f2:	f042 0220 	orr.w	r2, r2, #32
 80025f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80025f8:	b01d      	add	sp, #116	@ 0x74
 80025fa:	bc70      	pop	{r4, r5, r6}
 80025fc:	4770      	bx	lr
 80025fe:	4841      	ldr	r0, [pc, #260]	@ (8002704 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002600:	6880      	ldr	r0, [r0, #8]
 8002602:	0740      	lsls	r0, r0, #29
 8002604:	d50b      	bpl.n	800261e <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 8002606:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002608:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800260a:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 800260e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002610:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8002618:	b01d      	add	sp, #116	@ 0x74
 800261a:	bc70      	pop	{r4, r5, r6}
 800261c:	4770      	bx	lr
 800261e:	6890      	ldr	r0, [r2, #8]
 8002620:	0740      	lsls	r0, r0, #29
 8002622:	d4f1      	bmi.n	8002608 <HAL_ADCEx_MultiModeConfigChannel+0x44>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002624:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002628:	6808      	ldr	r0, [r1, #0]
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800262a:	d01e      	beq.n	800266a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800262c:	2800      	cmp	r0, #0
 800262e:	d131      	bne.n	8002694 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002630:	4935      	ldr	r1, [pc, #212]	@ (8002708 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002632:	4c33      	ldr	r4, [pc, #204]	@ (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002634:	688a      	ldr	r2, [r1, #8]
 8002636:	4835      	ldr	r0, [pc, #212]	@ (800270c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002638:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800263c:	608a      	str	r2, [r1, #8]
 800263e:	68a4      	ldr	r4, [r4, #8]
 8002640:	6882      	ldr	r2, [r0, #8]
 8002642:	07d6      	lsls	r6, r2, #31
 8002644:	d458      	bmi.n	80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x134>
 8002646:	4a32      	ldr	r2, [pc, #200]	@ (8002710 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8002648:	6892      	ldr	r2, [r2, #8]
 800264a:	07d0      	lsls	r0, r2, #31
 800264c:	d407      	bmi.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800264e:	07e2      	lsls	r2, r4, #31
 8002650:	d405      	bmi.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002652:	688a      	ldr	r2, [r1, #8]
 8002654:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8002658:	f022 020f 	bic.w	r2, r2, #15
 800265c:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265e:	2000      	movs	r0, #0
 8002660:	e7d7      	b.n	8002612 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002662:	482a      	ldr	r0, [pc, #168]	@ (800270c <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8002664:	e7cc      	b.n	8002600 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
  __HAL_LOCK(hadc);
 8002666:	2002      	movs	r0, #2
}
 8002668:	4770      	bx	lr
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800266a:	2800      	cmp	r0, #0
 800266c:	d034      	beq.n	80026d8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800266e:	4d29      	ldr	r5, [pc, #164]	@ (8002714 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002670:	684e      	ldr	r6, [r1, #4]
 8002672:	68ac      	ldr	r4, [r5, #8]
 8002674:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 8002678:	f424 4460 	bic.w	r4, r4, #57344	@ 0xe000
 800267c:	4334      	orrs	r4, r6
 800267e:	ea44 344c 	orr.w	r4, r4, ip, lsl #13
 8002682:	60ac      	str	r4, [r5, #8]
 8002684:	6892      	ldr	r2, [r2, #8]
 8002686:	07d4      	lsls	r4, r2, #31
 8002688:	d433      	bmi.n	80026f2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800268a:	4a1e      	ldr	r2, [pc, #120]	@ (8002704 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800268c:	6892      	ldr	r2, [r2, #8]
 800268e:	07d4      	lsls	r4, r2, #31
 8002690:	d518      	bpl.n	80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002692:	e7e4      	b.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002694:	4d1c      	ldr	r5, [pc, #112]	@ (8002708 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002696:	684c      	ldr	r4, [r1, #4]
 8002698:	68aa      	ldr	r2, [r5, #8]
 800269a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800269e:	4322      	orrs	r2, r4
 80026a0:	f893 4038 	ldrb.w	r4, [r3, #56]	@ 0x38
 80026a4:	ea42 3244 	orr.w	r2, r2, r4, lsl #13
 80026a8:	60aa      	str	r2, [r5, #8]
 80026aa:	4a15      	ldr	r2, [pc, #84]	@ (8002700 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80026ac:	6894      	ldr	r4, [r2, #8]
 80026ae:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 80026b2:	6892      	ldr	r2, [r2, #8]
 80026b4:	07d6      	lsls	r6, r2, #31
 80026b6:	d41f      	bmi.n	80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x134>
 80026b8:	4a15      	ldr	r2, [pc, #84]	@ (8002710 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80026ba:	6892      	ldr	r2, [r2, #8]
 80026bc:	07d2      	lsls	r2, r2, #31
 80026be:	d4ce      	bmi.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026c0:	07e6      	lsls	r6, r4, #31
 80026c2:	d4cc      	bmi.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
        MODIFY_REG(tmpADC_Common->CCR,
 80026c4:	68ac      	ldr	r4, [r5, #8]
 80026c6:	688a      	ldr	r2, [r1, #8]
 80026c8:	f424 6171 	bic.w	r1, r4, #3856	@ 0xf10
 80026cc:	4302      	orrs	r2, r0
 80026ce:	f021 010f 	bic.w	r1, r1, #15
 80026d2:	430a      	orrs	r2, r1
 80026d4:	60aa      	str	r2, [r5, #8]
 80026d6:	e7c2      	b.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026d8:	490e      	ldr	r1, [pc, #56]	@ (8002714 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80026da:	6888      	ldr	r0, [r1, #8]
 80026dc:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 80026e0:	6088      	str	r0, [r1, #8]
 80026e2:	6892      	ldr	r2, [r2, #8]
 80026e4:	07d5      	lsls	r5, r2, #31
 80026e6:	d404      	bmi.n	80026f2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80026e8:	4a06      	ldr	r2, [pc, #24]	@ (8002704 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80026ea:	6892      	ldr	r2, [r2, #8]
 80026ec:	07d4      	lsls	r4, r2, #31
 80026ee:	d4b6      	bmi.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80026f0:	e7af      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 80026f2:	4a04      	ldr	r2, [pc, #16]	@ (8002704 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80026f4:	6892      	ldr	r2, [r2, #8]
 80026f6:	e7b2      	b.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80026f8:	4a05      	ldr	r2, [pc, #20]	@ (8002710 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80026fa:	6892      	ldr	r2, [r2, #8]
 80026fc:	e7af      	b.n	800265e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80026fe:	bf00      	nop
 8002700:	50000400 	.word	0x50000400
 8002704:	50000100 	.word	0x50000100
 8002708:	50000700 	.word	0x50000700
 800270c:	50000500 	.word	0x50000500
 8002710:	50000600 	.word	0x50000600
 8002714:	50000300 	.word	0x50000300

08002718 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002718:	4907      	ldr	r1, [pc, #28]	@ (8002738 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800271a:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800271c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271e:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002722:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002726:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002728:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800272a:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800272e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002732:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800273c:	4b1b      	ldr	r3, [pc, #108]	@ (80027ac <HAL_NVIC_SetPriority+0x70>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002744:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002746:	f1c3 0e07 	rsb	lr, r3, #7
 800274a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002752:	bf28      	it	cs
 8002754:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002758:	f1bc 0f06 	cmp.w	ip, #6
 800275c:	d91c      	bls.n	8002798 <HAL_NVIC_SetPriority+0x5c>
 800275e:	f1a3 0c03 	sub.w	ip, r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002762:	f04f 33ff 	mov.w	r3, #4294967295
 8002766:	fa03 f30c 	lsl.w	r3, r3, ip
 800276a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276e:	f04f 33ff 	mov.w	r3, #4294967295
 8002772:	fa03 f30e 	lsl.w	r3, r3, lr
 8002776:	ea21 0303 	bic.w	r3, r1, r3
 800277a:	fa03 f30c 	lsl.w	r3, r3, ip
 800277e:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002780:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8002782:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002784:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002786:	db0a      	blt.n	800279e <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002788:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800278c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002790:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002794:	f85d fb04 	ldr.w	pc, [sp], #4
 8002798:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800279a:	4694      	mov	ip, r2
 800279c:	e7e7      	b.n	800276e <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800279e:	4a04      	ldr	r2, [pc, #16]	@ (80027b0 <HAL_NVIC_SetPriority+0x74>)
 80027a0:	f000 000f 	and.w	r0, r0, #15
 80027a4:	4402      	add	r2, r0
 80027a6:	7613      	strb	r3, [r2, #24]
 80027a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80027ac:	e000ed00 	.word	0xe000ed00
 80027b0:	e000ecfc 	.word	0xe000ecfc

080027b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80027b4:	2800      	cmp	r0, #0
 80027b6:	db07      	blt.n	80027c8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027b8:	4a04      	ldr	r2, [pc, #16]	@ (80027cc <HAL_NVIC_EnableIRQ+0x18>)
 80027ba:	0941      	lsrs	r1, r0, #5
 80027bc:	2301      	movs	r3, #1
 80027be:	f000 001f 	and.w	r0, r0, #31
 80027c2:	4083      	lsls	r3, r0
 80027c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000e100 	.word	0xe000e100

080027d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d0:	3801      	subs	r0, #1
 80027d2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80027d6:	d301      	bcc.n	80027dc <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027d8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80027da:	4770      	bx	lr
{
 80027dc:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e2:	4c07      	ldr	r4, [pc, #28]	@ (8002800 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027e4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e6:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80027ea:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027ee:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027f2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f4:	619a      	str	r2, [r3, #24]
}
 80027f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027fa:	6119      	str	r1, [r3, #16]
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002804:	2800      	cmp	r0, #0
 8002806:	d076      	beq.n	80028f6 <HAL_DMA_Init+0xf2>
{
 8002808:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800280a:	4a3c      	ldr	r2, [pc, #240]	@ (80028fc <HAL_DMA_Init+0xf8>)
 800280c:	6804      	ldr	r4, [r0, #0]
 800280e:	4294      	cmp	r4, r2
 8002810:	4603      	mov	r3, r0
 8002812:	d95c      	bls.n	80028ce <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002814:	493a      	ldr	r1, [pc, #232]	@ (8002900 <HAL_DMA_Init+0xfc>)
 8002816:	4a3b      	ldr	r2, [pc, #236]	@ (8002904 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 8002818:	483b      	ldr	r0, [pc, #236]	@ (8002908 <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800281a:	4421      	add	r1, r4
 800281c:	fba2 2101 	umull	r2, r1, r2, r1
 8002820:	0909      	lsrs	r1, r1, #4
 8002822:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002824:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002826:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002828:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 800282c:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800282e:	4e35      	ldr	r6, [pc, #212]	@ (8002904 <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002830:	4f36      	ldr	r7, [pc, #216]	@ (800290c <HAL_DMA_Init+0x108>)
 8002832:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002836:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 8002838:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800283a:	4302      	orrs	r2, r0
 800283c:	6958      	ldr	r0, [r3, #20]
 800283e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002840:	6998      	ldr	r0, [r3, #24]
 8002842:	4302      	orrs	r2, r0
 8002844:	69d8      	ldr	r0, [r3, #28]
 8002846:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002848:	b2e0      	uxtb	r0, r4
 800284a:	3808      	subs	r0, #8
 800284c:	fba6 6000 	umull	r6, r0, r6, r0
  tmp = hdma->Instance->CCR;
 8002850:	6826      	ldr	r6, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002852:	f426 4cff 	bic.w	ip, r6, #32640	@ 0x7f80
          hdma->Init.Mode                | hdma->Init.Priority;
 8002856:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002858:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800285c:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 800285e:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 8002862:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002864:	4e25      	ldr	r6, [pc, #148]	@ (80028fc <HAL_DMA_Init+0xf8>)
 8002866:	4a2a      	ldr	r2, [pc, #168]	@ (8002910 <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002868:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800286c:	42b4      	cmp	r4, r6
 800286e:	bf98      	it	ls
 8002870:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002872:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002876:	2401      	movs	r4, #1
 8002878:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800287c:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800287e:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002882:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002886:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002888:	649e      	str	r6, [r3, #72]	@ 0x48
 800288a:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800288e:	d027      	beq.n	80028e0 <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002890:	685e      	ldr	r6, [r3, #4]
 8002892:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002894:	3e01      	subs	r6, #1
 8002896:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002898:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800289c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80028a0:	d824      	bhi.n	80028ec <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80028a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002914 <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80028a4:	481c      	ldr	r0, [pc, #112]	@ (8002918 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80028a6:	442a      	add	r2, r5
 80028a8:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80028aa:	3d01      	subs	r5, #1
 80028ac:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80028ae:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80028b0:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80028b4:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80028b6:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028b8:	4a18      	ldr	r2, [pc, #96]	@ (800291c <HAL_DMA_Init+0x118>)
 80028ba:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028bc:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80028be:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c0:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 80028c2:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 80028c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 80028ca:	bcf0      	pop	{r4, r5, r6, r7}
 80028cc:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028ce:	4914      	ldr	r1, [pc, #80]	@ (8002920 <HAL_DMA_Init+0x11c>)
 80028d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002904 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 80028d2:	4814      	ldr	r0, [pc, #80]	@ (8002924 <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80028d4:	4421      	add	r1, r4
 80028d6:	fba2 2101 	umull	r2, r1, r2, r1
 80028da:	0909      	lsrs	r1, r1, #4
 80028dc:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 80028de:	e7a1      	b.n	8002824 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028e0:	2400      	movs	r4, #0
 80028e2:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028e4:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028e8:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 80028ec:	2200      	movs	r2, #0
 80028ee:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80028f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028f4:	e7e2      	b.n	80028bc <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 80028f6:	2001      	movs	r0, #1
}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40020407 	.word	0x40020407
 8002900:	bffdfbf8 	.word	0xbffdfbf8
 8002904:	cccccccd 	.word	0xcccccccd
 8002908:	40020400 	.word	0x40020400
 800290c:	40020800 	.word	0x40020800
 8002910:	40020820 	.word	0x40020820
 8002914:	1000823f 	.word	0x1000823f
 8002918:	40020940 	.word	0x40020940
 800291c:	40020900 	.word	0x40020900
 8002920:	bffdfff8 	.word	0xbffdfff8
 8002924:	40020000 	.word	0x40020000

08002928 <HAL_DMA_Start_IT>:
{
 8002928:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800292a:	f890 4024 	ldrb.w	r4, [r0, #36]	@ 0x24
 800292e:	2c01      	cmp	r4, #1
 8002930:	d009      	beq.n	8002946 <HAL_DMA_Start_IT+0x1e>
 8002932:	2401      	movs	r4, #1
 8002934:	f880 4024 	strb.w	r4, [r0, #36]	@ 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8002938:	f890 4025 	ldrb.w	r4, [r0, #37]	@ 0x25
 800293c:	2c01      	cmp	r4, #1
 800293e:	d005      	beq.n	800294c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8002940:	2300      	movs	r3, #0
 8002942:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  __HAL_LOCK(hdma);
 8002946:	2002      	movs	r0, #2
}
 8002948:	bcf0      	pop	{r4, r5, r6, r7}
 800294a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800294c:	2402      	movs	r4, #2
 800294e:	f880 4025 	strb.w	r4, [r0, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002952:	2400      	movs	r4, #0
 8002954:	63c4      	str	r4, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002956:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002958:	6cc6      	ldr	r6, [r0, #76]	@ 0x4c
    __HAL_DMA_DISABLE(hdma);
 800295a:	6825      	ldr	r5, [r4, #0]
 800295c:	f025 0501 	bic.w	r5, r5, #1
 8002960:	6025      	str	r5, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002962:	e9d0 7514 	ldrd	r7, r5, [r0, #80]	@ 0x50
 8002966:	6077      	str	r7, [r6, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 8002968:	b115      	cbz	r5, 8002970 <HAL_DMA_Start_IT+0x48>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800296a:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	@ 0x58
 800296e:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002970:	6c46      	ldr	r6, [r0, #68]	@ 0x44
 8002972:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8002974:	f006 0c1f 	and.w	ip, r6, #31
 8002978:	2601      	movs	r6, #1
 800297a:	fa06 f60c 	lsl.w	r6, r6, ip
 800297e:	607e      	str	r6, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 8002980:	6063      	str	r3, [r4, #4]
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002982:	6883      	ldr	r3, [r0, #8]
 8002984:	2b10      	cmp	r3, #16
    if (NULL != hdma->XferHalfCpltCallback)
 8002986:	6b03      	ldr	r3, [r0, #48]	@ 0x30
    hdma->Instance->CPAR = DstAddress;
 8002988:	bf0b      	itete	eq
 800298a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 800298c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800298e:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8002990:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8002992:	b1bb      	cbz	r3, 80029c4 <HAL_DMA_Start_IT+0x9c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	f043 030e 	orr.w	r3, r3, #14
 800299a:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800299c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	03d2      	lsls	r2, r2, #15
 80029a2:	d503      	bpl.n	80029ac <HAL_DMA_Start_IT+0x84>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029aa:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 80029ac:	b11d      	cbz	r5, 80029b6 <HAL_DMA_Start_IT+0x8e>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80029ae:	682b      	ldr	r3, [r5, #0]
 80029b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029b4:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 80029bc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80029be:	6023      	str	r3, [r4, #0]
}
 80029c0:	bcf0      	pop	{r4, r5, r6, r7}
 80029c2:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	f023 0304 	bic.w	r3, r3, #4
 80029ca:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	f043 030a 	orr.w	r3, r3, #10
 80029d2:	6023      	str	r3, [r4, #0]
 80029d4:	e7e2      	b.n	800299c <HAL_DMA_Start_IT+0x74>
 80029d6:	bf00      	nop

080029d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029dc:	680c      	ldr	r4, [r1, #0]
{
 80029de:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029e0:	2c00      	cmp	r4, #0
 80029e2:	f000 8088 	beq.w	8002af6 <HAL_GPIO_Init+0x11e>
  uint32_t position = 0x00U;
 80029e6:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029e8:	f04f 0b01 	mov.w	fp, #1
 80029ec:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 80029f0:	ea1e 0a04 	ands.w	sl, lr, r4
 80029f4:	d07a      	beq.n	8002aec <HAL_GPIO_Init+0x114>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029f6:	684d      	ldr	r5, [r1, #4]
 80029f8:	f005 0c03 	and.w	ip, r5, #3
 80029fc:	005a      	lsls	r2, r3, #1
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029fe:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a00:	f10c 38ff 	add.w	r8, ip, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a04:	fa06 f702 	lsl.w	r7, r6, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a08:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a0c:	ea6f 0707 	mvn.w	r7, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a10:	d974      	bls.n	8002afc <HAL_GPIO_Init+0x124>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a12:	f1bc 0f03 	cmp.w	ip, #3
 8002a16:	f040 80cc 	bne.w	8002bb2 <HAL_GPIO_Init+0x1da>
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a1a:	fa0c f202 	lsl.w	r2, ip, r2
      temp = GPIOx->MODER;
 8002a1e:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a22:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a26:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a28:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8002a2c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a2e:	d05d      	beq.n	8002aec <HAL_GPIO_Init+0x114>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a30:	4f66      	ldr	r7, [pc, #408]	@ (8002bcc <HAL_GPIO_Init+0x1f4>)
 8002a32:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	663a      	str	r2, [r7, #96]	@ 0x60
 8002a3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a3c:	f002 0201 	and.w	r2, r2, #1
 8002a40:	9203      	str	r2, [sp, #12]
 8002a42:	9a03      	ldr	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a44:	f023 0203 	bic.w	r2, r3, #3
 8002a48:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8002a4c:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a50:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002a54:	6897      	ldr	r7, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a56:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002a5a:	260f      	movs	r6, #15
 8002a5c:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a60:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a64:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a68:	d01c      	beq.n	8002aa4 <HAL_GPIO_Init+0xcc>
 8002a6a:	4e59      	ldr	r6, [pc, #356]	@ (8002bd0 <HAL_GPIO_Init+0x1f8>)
 8002a6c:	42b0      	cmp	r0, r6
 8002a6e:	f000 808b 	beq.w	8002b88 <HAL_GPIO_Init+0x1b0>
 8002a72:	4e58      	ldr	r6, [pc, #352]	@ (8002bd4 <HAL_GPIO_Init+0x1fc>)
 8002a74:	42b0      	cmp	r0, r6
 8002a76:	f000 808e 	beq.w	8002b96 <HAL_GPIO_Init+0x1be>
 8002a7a:	f8df e160 	ldr.w	lr, [pc, #352]	@ 8002bdc <HAL_GPIO_Init+0x204>
 8002a7e:	4570      	cmp	r0, lr
 8002a80:	d07b      	beq.n	8002b7a <HAL_GPIO_Init+0x1a2>
 8002a82:	f8df e15c 	ldr.w	lr, [pc, #348]	@ 8002be0 <HAL_GPIO_Init+0x208>
 8002a86:	4570      	cmp	r0, lr
 8002a88:	f000 808c 	beq.w	8002ba4 <HAL_GPIO_Init+0x1cc>
 8002a8c:	f8df e154 	ldr.w	lr, [pc, #340]	@ 8002be4 <HAL_GPIO_Init+0x20c>
 8002a90:	4570      	cmp	r0, lr
 8002a92:	bf0c      	ite	eq
 8002a94:	f04f 0e05 	moveq.w	lr, #5
 8002a98:	f04f 0e06 	movne.w	lr, #6
 8002a9c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002aa0:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aa4:	6097      	str	r7, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002aa6:	4a4c      	ldr	r2, [pc, #304]	@ (8002bd8 <HAL_GPIO_Init+0x200>)
 8002aa8:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aaa:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
 8002aac:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002ab0:	4e49      	ldr	r6, [pc, #292]	@ (8002bd8 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8002ab2:	bf54      	ite	pl
 8002ab4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002ab6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8002aba:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR1;
 8002abc:	68f2      	ldr	r2, [r6, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002abe:	02ae      	lsls	r6, r5, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8002ac0:	4e45      	ldr	r6, [pc, #276]	@ (8002bd8 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8002ac2:	bf54      	ite	pl
 8002ac4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002ac6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->FTSR1 = temp;
 8002aca:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR1;
 8002acc:	6872      	ldr	r2, [r6, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ace:	03ae      	lsls	r6, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8002ad0:	4e41      	ldr	r6, [pc, #260]	@ (8002bd8 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8002ad2:	bf54      	ite	pl
 8002ad4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002ad6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->EMR1 = temp;
 8002ada:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002adc:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ade:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8002ae0:	4d3d      	ldr	r5, [pc, #244]	@ (8002bd8 <HAL_GPIO_Init+0x200>)
        temp &= ~(iocurrent);
 8002ae2:	bf54      	ite	pl
 8002ae4:	403a      	andpl	r2, r7
          temp |= iocurrent;
 8002ae6:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8002aea:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8002aec:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002aee:	fa34 f203 	lsrs.w	r2, r4, r3
 8002af2:	f47f af7b 	bne.w	80029ec <HAL_GPIO_Init+0x14>
  }
}
 8002af6:	b005      	add	sp, #20
 8002af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8002afc:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b00:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b02:	ea09 0907 	and.w	r9, r9, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b06:	fa06 f802 	lsl.w	r8, r6, r2
 8002b0a:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8002b0e:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8002b12:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b16:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b18:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b1c:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8002b20:	fa0e fe03 	lsl.w	lr, lr, r3
 8002b24:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8002b28:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8002b2c:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b30:	fa06 fe02 	lsl.w	lr, r6, r2
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b34:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b38:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3c:	f1bc 0f02 	cmp.w	ip, #2
        GPIOx->PUPDR = temp;
 8002b40:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b44:	f47f af69 	bne.w	8002a1a <HAL_GPIO_Init+0x42>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b48:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8002b4a:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b4e:	f003 0e07 	and.w	lr, r3, #7
 8002b52:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002b56:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b5a:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3U];
 8002b5e:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b62:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b64:	260f      	movs	r6, #15
 8002b66:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b6a:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b6c:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b70:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8002b74:	f8c8 e020 	str.w	lr, [r8, #32]
 8002b78:	e74f      	b.n	8002a1a <HAL_GPIO_Init+0x42>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b7a:	f04f 0e03 	mov.w	lr, #3
 8002b7e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002b82:	ea47 070c 	orr.w	r7, r7, ip
 8002b86:	e78d      	b.n	8002aa4 <HAL_GPIO_Init+0xcc>
 8002b88:	f04f 0e01 	mov.w	lr, #1
 8002b8c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002b90:	ea47 070c 	orr.w	r7, r7, ip
 8002b94:	e786      	b.n	8002aa4 <HAL_GPIO_Init+0xcc>
 8002b96:	f04f 0e02 	mov.w	lr, #2
 8002b9a:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002b9e:	ea47 070c 	orr.w	r7, r7, ip
 8002ba2:	e77f      	b.n	8002aa4 <HAL_GPIO_Init+0xcc>
 8002ba4:	f04f 0e04 	mov.w	lr, #4
 8002ba8:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002bac:	ea47 070c 	orr.w	r7, r7, ip
 8002bb0:	e778      	b.n	8002aa4 <HAL_GPIO_Init+0xcc>
        temp = GPIOx->PUPDR;
 8002bb2:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb6:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bb8:	ea08 0807 	and.w	r8, r8, r7
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bbc:	fa06 fe02 	lsl.w	lr, r6, r2
 8002bc0:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->PUPDR = temp;
 8002bc4:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc8:	e727      	b.n	8002a1a <HAL_GPIO_Init+0x42>
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	48000400 	.word	0x48000400
 8002bd4:	48000800 	.word	0x48000800
 8002bd8:	40010400 	.word	0x40010400
 8002bdc:	48000c00 	.word	0x48000c00
 8002be0:	48001000 	.word	0x48001000
 8002be4:	48001400 	.word	0x48001400

08002be8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002be8:	b10a      	cbz	r2, 8002bee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bea:	6181      	str	r1, [r0, #24]
 8002bec:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bee:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop

08002bf4 <HRTIM_OutputConfig>:
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002bf4:	6800      	ldr	r0, [r0, #0]
 8002bf6:	ea4f 1cc1 	mov.w	ip, r1, lsl #7
 8002bfa:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;

  switch (Output)
 8002bfe:	2a40      	cmp	r2, #64	@ 0x40
{
 8002c00:	b570      	push	{r4, r5, r6, lr}
  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8002c02:	f8d1 50e4 	ldr.w	r5, [r1, #228]	@ 0xe4
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8002c06:	f8d1 40b8 	ldr.w	r4, [r1, #184]	@ 0xb8
  switch (Output)
 8002c0a:	d035      	beq.n	8002c78 <HRTIM_OutputConfig+0x84>
 8002c0c:	d82b      	bhi.n	8002c66 <HRTIM_OutputConfig+0x72>
 8002c0e:	2a01      	cmp	r2, #1
 8002c10:	d032      	beq.n	8002c78 <HRTIM_OutputConfig+0x84>
 8002c12:	3a02      	subs	r2, #2
 8002c14:	2a1e      	cmp	r2, #30
 8002c16:	d837      	bhi.n	8002c88 <HRTIM_OutputConfig+0x94>
 8002c18:	2101      	movs	r1, #1
 8002c1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c1e:	4928      	ldr	r1, [pc, #160]	@ (8002cc0 <HRTIM_OutputConfig+0xcc>)
 8002c20:	420a      	tst	r2, r1
 8002c22:	d048      	beq.n	8002cb6 <HRTIM_OutputConfig+0xc2>
    case HRTIM_OUTPUT_TD2:
    case HRTIM_OUTPUT_TE2:
    case HRTIM_OUTPUT_TF2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8002c24:	eb00 020c 	add.w	r2, r0, ip
 8002c28:	6859      	ldr	r1, [r3, #4]
 8002c2a:	f8c2 10c4 	str.w	r1, [r2, #196]	@ 0xc4
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8002c2e:	6899      	ldr	r1, [r3, #8]
 8002c30:	f8c2 10c8 	str.w	r1, [r2, #200]	@ 0xc8
      shift = 16U;
 8002c34:	f04f 0e10 	mov.w	lr, #16
      break;
 8002c38:	f46f 027e 	mvn.w	r2, #16646144	@ 0xfe0000
    default:
      break;
  }

  /* Clear output config */
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8002c3c:	ea05 0102 	and.w	r1, r5, r2

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8002c40:	68dd      	ldr	r5, [r3, #12]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	695e      	ldr	r6, [r3, #20]
 8002c46:	432a      	orrs	r2, r5
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8002c48:	691d      	ldr	r5, [r3, #16]
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8002c4a:	432a      	orrs	r2, r5
 8002c4c:	4332      	orrs	r2, r6
 8002c4e:	699e      	ldr	r6, [r3, #24]
 8002c50:	4332      	orrs	r2, r6
 8002c52:	fa02 f20e 	lsl.w	r2, r2, lr
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8002c56:	2d08      	cmp	r5, #8
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8002c58:	ea42 0201 	orr.w	r2, r2, r1
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8002c5c:	d019      	beq.n	8002c92 <HRTIM_OutputConfig+0x9e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8002c5e:	4460      	add	r0, ip
 8002c60:	f8c0 20e4 	str.w	r2, [r0, #228]	@ 0xe4
}
 8002c64:	bd70      	pop	{r4, r5, r6, pc}
  switch (Output)
 8002c66:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8002c6a:	d0db      	beq.n	8002c24 <HRTIM_OutputConfig+0x30>
 8002c6c:	d81c      	bhi.n	8002ca8 <HRTIM_OutputConfig+0xb4>
 8002c6e:	2a80      	cmp	r2, #128	@ 0x80
 8002c70:	d0d8      	beq.n	8002c24 <HRTIM_OutputConfig+0x30>
 8002c72:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8002c76:	d107      	bne.n	8002c88 <HRTIM_OutputConfig+0x94>
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8002c78:	eb00 020c 	add.w	r2, r0, ip
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	f8c2 10bc 	str.w	r1, [r2, #188]	@ 0xbc
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8002c82:	6899      	ldr	r1, [r3, #8]
 8002c84:	f8c2 10c0 	str.w	r1, [r2, #192]	@ 0xc0
{
 8002c88:	f06f 02fe 	mvn.w	r2, #254	@ 0xfe
 8002c8c:	f04f 0e00 	mov.w	lr, #0
 8002c90:	e7d4      	b.n	8002c3c <HRTIM_OutputConfig+0x48>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8002c92:	f014 2f02 	tst.w	r4, #33554944	@ 0x2000200
 8002c96:	d1e2      	bne.n	8002c5e <HRTIM_OutputConfig+0x6a>
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8002c98:	69db      	ldr	r3, [r3, #28]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8002c9a:	4460      	add	r0, ip
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8002c9c:	fa03 f30e 	lsl.w	r3, r3, lr
 8002ca0:	431a      	orrs	r2, r3
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8002ca2:	f8c0 20e4 	str.w	r2, [r0, #228]	@ 0xe4
}
 8002ca6:	bd70      	pop	{r4, r5, r6, pc}
  switch (Output)
 8002ca8:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8002cac:	d0e4      	beq.n	8002c78 <HRTIM_OutputConfig+0x84>
 8002cae:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8002cb2:	d1e9      	bne.n	8002c88 <HRTIM_OutputConfig+0x94>
 8002cb4:	e7b6      	b.n	8002c24 <HRTIM_OutputConfig+0x30>
 8002cb6:	f244 0104 	movw	r1, #16388	@ 0x4004
 8002cba:	420a      	tst	r2, r1
 8002cbc:	d1dc      	bne.n	8002c78 <HRTIM_OutputConfig+0x84>
 8002cbe:	e7e3      	b.n	8002c88 <HRTIM_OutputConfig+0x94>
 8002cc0:	40000041 	.word	0x40000041

08002cc4 <HRTIM_ForceRegistersUpdate>:
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef *hhrtim,
                                       uint32_t TimerIdx)
{
  switch (TimerIdx)
 8002cc4:	2906      	cmp	r1, #6
 8002cc6:	d80c      	bhi.n	8002ce2 <HRTIM_ForceRegistersUpdate+0x1e>
 8002cc8:	e8df f001 	tbb	[pc, r1]
 8002ccc:	2c241c14 	.word	0x2c241c14
 8002cd0:	0434      	.short	0x0434
 8002cd2:	0c          	.byte	0x0c
 8002cd3:	00          	.byte	0x00
      break;
    }

    case HRTIM_TIMERINDEX_TIMER_F:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TFSWU;
 8002cd4:	6802      	ldr	r2, [r0, #0]
 8002cd6:	f8d2 3384 	ldr.w	r3, [r2, #900]	@ 0x384
 8002cda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cde:	f8c2 3384 	str.w	r3, [r2, #900]	@ 0x384
    }

    default:
      break;
  }
}
 8002ce2:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8002ce4:	6802      	ldr	r2, [r0, #0]
 8002ce6:	f8d2 3384 	ldr.w	r3, [r2, #900]	@ 0x384
 8002cea:	f043 0301 	orr.w	r3, r3, #1
 8002cee:	f8c2 3384 	str.w	r3, [r2, #900]	@ 0x384
      break;
 8002cf2:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8002cf4:	6802      	ldr	r2, [r0, #0]
 8002cf6:	f8d2 3384 	ldr.w	r3, [r2, #900]	@ 0x384
 8002cfa:	f043 0302 	orr.w	r3, r3, #2
 8002cfe:	f8c2 3384 	str.w	r3, [r2, #900]	@ 0x384
      break;
 8002d02:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8002d04:	6802      	ldr	r2, [r0, #0]
 8002d06:	f8d2 3384 	ldr.w	r3, [r2, #900]	@ 0x384
 8002d0a:	f043 0304 	orr.w	r3, r3, #4
 8002d0e:	f8c2 3384 	str.w	r3, [r2, #900]	@ 0x384
      break;
 8002d12:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8002d14:	6802      	ldr	r2, [r0, #0]
 8002d16:	f8d2 3384 	ldr.w	r3, [r2, #900]	@ 0x384
 8002d1a:	f043 0308 	orr.w	r3, r3, #8
 8002d1e:	f8c2 3384 	str.w	r3, [r2, #900]	@ 0x384
      break;
 8002d22:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8002d24:	6802      	ldr	r2, [r0, #0]
 8002d26:	f8d2 3384 	ldr.w	r3, [r2, #900]	@ 0x384
 8002d2a:	f043 0310 	orr.w	r3, r3, #16
 8002d2e:	f8c2 3384 	str.w	r3, [r2, #900]	@ 0x384
      break;
 8002d32:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8002d34:	6802      	ldr	r2, [r0, #0]
 8002d36:	f8d2 3384 	ldr.w	r3, [r2, #900]	@ 0x384
 8002d3a:	f043 0320 	orr.w	r3, r3, #32
 8002d3e:	f8c2 3384 	str.w	r3, [r2, #900]	@ 0x384
      break;
 8002d42:	4770      	bx	lr

08002d44 <HAL_HRTIM_Init>:
  if (hhrtim == NULL)
 8002d44:	2800      	cmp	r0, #0
 8002d46:	d046      	beq.n	8002dd6 <HAL_HRTIM_Init+0x92>
{
 8002d48:	b510      	push	{r4, lr}
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8002d4a:	6882      	ldr	r2, [r0, #8]
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8002d4c:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002d4e:	2102      	movs	r1, #2
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8002d50:	07d2      	lsls	r2, r2, #31
{
 8002d52:	b082      	sub	sp, #8
 8002d54:	4604      	mov	r4, r0
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8002d56:	e9c0 3338 	strd	r3, r3, [r0, #224]	@ 0xe0
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8002d5a:	e9c0 333a 	strd	r3, r3, [r0, #232]	@ 0xe8
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8002d5e:	e9c0 333c 	strd	r3, r3, [r0, #240]	@ 0xf0
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002d62:	f880 10dd 	strb.w	r1, [r0, #221]	@ 0xdd
  hhrtim->hdmaTimerF = (DMA_HandleTypeDef *)NULL;
 8002d66:	f8c0 30f8 	str.w	r3, [r0, #248]	@ 0xf8
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8002d6a:	d50f      	bpl.n	8002d8c <HAL_HRTIM_Init+0x48>
    if (hhrtim->Instance == HRTIM1)
 8002d6c:	6801      	ldr	r1, [r0, #0]
 8002d6e:	4b21      	ldr	r3, [pc, #132]	@ (8002df4 <HAL_HRTIM_Init+0xb0>)
 8002d70:	4299      	cmp	r1, r3
 8002d72:	d032      	beq.n	8002dda <HAL_HRTIM_Init+0x96>
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8002d74:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002d78:	680a      	ldr	r2, [r1, #0]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8002d7a:	f400 4040 	and.w	r0, r0, #49152	@ 0xc000
 8002d7e:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8002d82:	4302      	orrs	r2, r0
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8002d84:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002d88:	4313      	orrs	r3, r2
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002d8a:	600b      	str	r3, [r1, #0]
  HAL_HRTIM_MspInit(hhrtim);
 8002d8c:	4620      	mov	r0, r4
 8002d8e:	f7fe fb91 	bl	80014b4 <HAL_HRTIM_MspInit>
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8002d92:	68a3      	ldr	r3, [r4, #8]
 8002d94:	079b      	lsls	r3, r3, #30
 8002d96:	d414      	bmi.n	8002dc2 <HAL_HRTIM_Init+0x7e>
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002d98:	2101      	movs	r1, #1
  __HAL_UNLOCK(hhrtim);
 8002d9a:	2200      	movs	r2, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002d9c:	f884 10dd 	strb.w	r1, [r4, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 8002da0:	4623      	mov	r3, r4
 8002da2:	f884 20dc 	strb.w	r2, [r4, #220]	@ 0xdc
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8002da6:	f104 01c4 	add.w	r1, r4, #196	@ 0xc4
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8002daa:	629a      	str	r2, [r3, #40]	@ 0x28
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8002dac:	631a      	str	r2, [r3, #48]	@ 0x30
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8002dae:	e9c3 2206 	strd	r2, r2, [r3, #24]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8002db2:	e9c3 2208 	strd	r2, r2, [r3, #32]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8002db6:	331c      	adds	r3, #28
 8002db8:	428b      	cmp	r3, r1
 8002dba:	d1f6      	bne.n	8002daa <HAL_HRTIM_Init+0x66>
  return HAL_OK;
 8002dbc:	2000      	movs	r0, #0
}
 8002dbe:	b002      	add	sp, #8
 8002dc0:	bd10      	pop	{r4, pc}
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002dc2:	6821      	ldr	r1, [r4, #0]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8002dc4:	68e3      	ldr	r3, [r4, #12]
    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002dc6:	680a      	ldr	r2, [r1, #0]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8002dc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8002dcc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8002dd0:	4313      	orrs	r3, r2
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002dd2:	600b      	str	r3, [r1, #0]
 8002dd4:	e7e0      	b.n	8002d98 <HAL_HRTIM_Init+0x54>
    return HAL_ERROR;
 8002dd6:	2001      	movs	r0, #1
}
 8002dd8:	4770      	bx	lr
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8002dda:	f503 4328 	add.w	r3, r3, #43008	@ 0xa800
 8002dde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002de0:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002de4:	661a      	str	r2, [r3, #96]	@ 0x60
 8002de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dec:	9301      	str	r3, [sp, #4]
 8002dee:	9b01      	ldr	r3, [sp, #4]
 8002df0:	e7c0      	b.n	8002d74 <HAL_HRTIM_Init+0x30>
 8002df2:	bf00      	nop
 8002df4:	40016800 	.word	0x40016800

08002df8 <HAL_HRTIM_DLLCalibrationStart>:
  __HAL_LOCK(hhrtim);
 8002df8:	f890 30dc 	ldrb.w	r3, [r0, #220]	@ 0xdc
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d030      	beq.n	8002e62 <HAL_HRTIM_DLLCalibrationStart+0x6a>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002e00:	2302      	movs	r3, #2
  __HAL_LOCK(hhrtim);
 8002e02:	2201      	movs	r2, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002e04:	f880 30dd 	strb.w	r3, [r0, #221]	@ 0xdd
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8002e08:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hhrtim);
 8002e0a:	f880 20dc 	strb.w	r2, [r0, #220]	@ 0xdc
  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8002e0e:	f1b1 3fff 	cmp.w	r1, #4294967295
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8002e12:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
  if (CalibrationRate == HRTIM_SINGLE_CALIBRATION)
 8002e16:	d015      	beq.n	8002e44 <HAL_HRTIM_DLLCalibrationStart+0x4c>
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8002e18:	f042 0202 	orr.w	r2, r2, #2
 8002e1c:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    MODIFY_REG(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALRTE, CalibrationRate);
 8002e20:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8002e24:	f022 020c 	bic.w	r2, r2, #12
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8002e2e:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	f880 30dd 	strb.w	r3, [r0, #221]	@ 0xdd
  return HAL_OK;
 8002e40:	2000      	movs	r0, #0
 8002e42:	4770      	bx	lr
    CLEAR_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CALEN);
 8002e44:	f022 0202 	bic.w	r2, r2, #2
 8002e48:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
    SET_BIT(hhrtim->Instance->sCommonRegs.DLLCR, HRTIM_DLLCR_CAL);
 8002e4c:	f8d3 23cc 	ldr.w	r2, [r3, #972]	@ 0x3cc
 8002e50:	f042 0201 	orr.w	r2, r2, #1
 8002e54:	f8c3 23cc 	str.w	r2, [r3, #972]	@ 0x3cc
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f880 30dd 	strb.w	r3, [r0, #221]	@ 0xdd
  return HAL_OK;
 8002e5e:	2000      	movs	r0, #0
 8002e60:	4770      	bx	lr
  __HAL_LOCK(hhrtim);
 8002e62:	2002      	movs	r0, #2
}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop

08002e68 <HAL_HRTIM_PollForDLLCalibration>:
{
 8002e68:	b570      	push	{r4, r5, r6, lr}
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	460d      	mov	r5, r1
  tickstart = HAL_GetTick();
 8002e6e:	f7fe fe1f 	bl	8001ab0 <HAL_GetTick>
 8002e72:	4606      	mov	r6, r0
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8002e74:	6822      	ldr	r2, [r4, #0]
 8002e76:	f8d2 3388 	ldr.w	r3, [r2, #904]	@ 0x388
 8002e7a:	03db      	lsls	r3, r3, #15
 8002e7c:	d405      	bmi.n	8002e8a <HAL_HRTIM_PollForDLLCalibration+0x22>
    if (Timeout != HAL_MAX_DELAY)
 8002e7e:	1c68      	adds	r0, r5, #1
 8002e80:	d10a      	bne.n	8002e98 <HAL_HRTIM_PollForDLLCalibration+0x30>
  while (__HAL_HRTIM_GET_FLAG(hhrtim, HRTIM_IT_DLLRDY) == (uint32_t)RESET)
 8002e82:	f8d2 3388 	ldr.w	r3, [r2, #904]	@ 0x388
 8002e86:	03d9      	lsls	r1, r3, #15
 8002e88:	d5fb      	bpl.n	8002e82 <HAL_HRTIM_PollForDLLCalibration+0x1a>
  __HAL_UNLOCK(hhrtim);
 8002e8a:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 8002e92:	f884 00dc 	strb.w	r0, [r4, #220]	@ 0xdc
}
 8002e96:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e98:	f7fe fe0a 	bl	8001ab0 <HAL_GetTick>
 8002e9c:	1b80      	subs	r0, r0, r6
 8002e9e:	42a8      	cmp	r0, r5
 8002ea0:	d801      	bhi.n	8002ea6 <HAL_HRTIM_PollForDLLCalibration+0x3e>
 8002ea2:	2d00      	cmp	r5, #0
 8002ea4:	d1e6      	bne.n	8002e74 <HAL_HRTIM_PollForDLLCalibration+0xc>
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002ea6:	2307      	movs	r3, #7
 8002ea8:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
        return HAL_TIMEOUT;
 8002eac:	2003      	movs	r0, #3
}
 8002eae:	bd70      	pop	{r4, r5, r6, pc}

08002eb0 <HAL_HRTIM_TimeBaseConfig>:
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002eb0:	f890 30dd 	ldrb.w	r3, [r0, #221]	@ 0xdd
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d02c      	beq.n	8002f12 <HAL_HRTIM_TimeBaseConfig+0x62>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002eb8:	2302      	movs	r3, #2
{
 8002eba:	b470      	push	{r4, r5, r6}
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002ebc:	2906      	cmp	r1, #6
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002ebe:	f880 30dd 	strb.w	r3, [r0, #221]	@ 0xdd
 8002ec2:	4684      	mov	ip, r0
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002ec4:	e9d2 3602 	ldrd	r3, r6, [r2, #8]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8002ec8:	e9d2 4500 	ldrd	r4, r5, [r2]
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002ecc:	6800      	ldr	r0, [r0, #0]
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8002ece:	d015      	beq.n	8002efc <HAL_HRTIM_TimeBaseConfig+0x4c>
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8002ed0:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
 8002ed4:	f8d1 2080 	ldr.w	r2, [r1, #128]	@ 0x80
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8002ed8:	f022 0207 	bic.w	r2, r2, #7
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002edc:	4313      	orrs	r3, r2
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8002ede:	f023 0318 	bic.w	r3, r3, #24
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002ee2:	4333      	orrs	r3, r6
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8002ee4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8002ee8:	f8c1 4094 	str.w	r4, [r1, #148]	@ 0x94
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8002eec:	f8c1 5098 	str.w	r5, [r1, #152]	@ 0x98
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f88c 30dd 	strb.w	r3, [ip, #221]	@ 0xdd
  return HAL_OK;
 8002ef6:	2000      	movs	r0, #0
}
 8002ef8:	bc70      	pop	{r4, r5, r6}
 8002efa:	4770      	bx	lr
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8002efc:	6802      	ldr	r2, [r0, #0]
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8002efe:	f022 0207 	bic.w	r2, r2, #7
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8002f02:	4313      	orrs	r3, r2
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8002f04:	f023 0318 	bic.w	r3, r3, #24
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8002f08:	4333      	orrs	r3, r6
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8002f0a:	6003      	str	r3, [r0, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8002f0c:	6144      	str	r4, [r0, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8002f0e:	6185      	str	r5, [r0, #24]
}
 8002f10:	e7ee      	b.n	8002ef0 <HAL_HRTIM_TimeBaseConfig+0x40>
 8002f12:	b2d8      	uxtb	r0, r3
}
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop

08002f18 <HAL_HRTIM_FaultConfig>:
{
 8002f18:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002f1a:	f890 40dd 	ldrb.w	r4, [r0, #221]	@ 0xdd
 8002f1e:	2c02      	cmp	r4, #2
{
 8002f20:	4603      	mov	r3, r0
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8002f22:	b2e0      	uxtb	r0, r4
 8002f24:	d053      	beq.n	8002fce <HAL_HRTIM_FaultConfig+0xb6>
  __HAL_LOCK(hhrtim);
 8002f26:	f893 00dc 	ldrb.w	r0, [r3, #220]	@ 0xdc
 8002f2a:	2801      	cmp	r0, #1
 8002f2c:	f000 80d7 	beq.w	80030de <HAL_HRTIM_FaultConfig+0x1c6>
 8002f30:	2401      	movs	r4, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002f32:	2002      	movs	r0, #2
  __HAL_LOCK(hhrtim);
 8002f34:	f883 40dc 	strb.w	r4, [r3, #220]	@ 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8002f38:	f883 00dd 	strb.w	r0, [r3, #221]	@ 0xdd
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 8002f3c:	681d      	ldr	r5, [r3, #0]
  source0 = (pFaultCfg->Source & 1U);
 8002f3e:	6816      	ldr	r6, [r2, #0]
  hrtim_fltinr1 = hhrtim->Instance->sCommonRegs.FLTINR1;
 8002f40:	f8d5 43d0 	ldr.w	r4, [r5, #976]	@ 0x3d0
  hrtim_fltinr2 = hhrtim->Instance->sCommonRegs.FLTINR2;
 8002f44:	f8d5 03d4 	ldr.w	r0, [r5, #980]	@ 0x3d4
  switch (Fault)
 8002f48:	3901      	subs	r1, #1
  source0 = (pFaultCfg->Source & 1U);
 8002f4a:	f006 0c01 	and.w	ip, r6, #1
  source1 = ((pFaultCfg->Source & 2U) >> 1);
 8002f4e:	f3c6 0640 	ubfx	r6, r6, #1, #1
  switch (Fault)
 8002f52:	291f      	cmp	r1, #31
 8002f54:	d811      	bhi.n	8002f7a <HAL_HRTIM_FaultConfig+0x62>
 8002f56:	e8df f001 	tbb	[pc, r1]
 8002f5a:	533b      	.short	0x533b
 8002f5c:	10106910 	.word	0x10106910
 8002f60:	10107f10 	.word	0x10107f10
 8002f64:	10101010 	.word	0x10101010
 8002f68:	10109510 	.word	0x10109510
 8002f6c:	10101010 	.word	0x10101010
 8002f70:	10101010 	.word	0x10101010
 8002f74:	10101010 	.word	0x10101010
 8002f78:	aa10      	.short	0xaa10
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8002f7a:	2207      	movs	r2, #7
 8002f7c:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
      __HAL_UNLOCK(hhrtim);
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8002f86:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
 8002f8a:	2a07      	cmp	r2, #7
 8002f8c:	d036      	beq.n	8002ffc <HAL_HRTIM_FaultConfig+0xe4>
  hhrtim->Instance->sCommonRegs.FLTINR1 = (hrtim_fltinr1 & (~(HRTIM_FLTINR1_FLTxLCK)));
 8002f8e:	f004 327f 	and.w	r2, r4, #2139062143	@ 0x7f7f7f7f
 8002f92:	f8c5 23d0 	str.w	r2, [r5, #976]	@ 0x3d0
  hhrtim->Instance->sCommonRegs.FLTINR2 = (hrtim_fltinr2 & (~(HRTIM_FLTINR2_FLTxLCK)));
 8002f96:	f420 4200 	bic.w	r2, r0, #32768	@ 0x8000
 8002f9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f9e:	f8c5 23d4 	str.w	r2, [r5, #980]	@ 0x3d4
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR1, (hrtim_fltinr1 & HRTIM_FLTINR1_FLTxLCK));
 8002fa2:	f8d5 23d0 	ldr.w	r2, [r5, #976]	@ 0x3d0
 8002fa6:	f004 3480 	and.w	r4, r4, #2155905152	@ 0x80808080
 8002faa:	4314      	orrs	r4, r2
 8002fac:	f8c5 43d0 	str.w	r4, [r5, #976]	@ 0x3d0
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR2, (hrtim_fltinr2 & HRTIM_FLTINR2_FLTxLCK));
 8002fb0:	f8d5 13d4 	ldr.w	r1, [r5, #980]	@ 0x3d4
 8002fb4:	f248 0280 	movw	r2, #32896	@ 0x8080
 8002fb8:	4010      	ands	r0, r2
 8002fba:	4308      	orrs	r0, r1
  __HAL_UNLOCK(hhrtim);
 8002fbc:	2200      	movs	r2, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002fbe:	2101      	movs	r1, #1
  SET_BIT(hhrtim->Instance->sCommonRegs.FLTINR2, (hrtim_fltinr2 & HRTIM_FLTINR2_FLTxLCK));
 8002fc0:	f8c5 03d4 	str.w	r0, [r5, #980]	@ 0x3d4
  return HAL_OK;
 8002fc4:	4610      	mov	r0, r2
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8002fc6:	f883 10dd 	strb.w	r1, [r3, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 8002fca:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
}
 8002fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT1SRC_1_Pos);
 8002fd0:	f366 4010 	bfi	r0, r6, #16, #1
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 8002fd4:	e9d2 7602 	ldrd	r7, r6, [r2, #8]
      hrtim_fltinr1 |= (pFaultCfg->Polarity & HRTIM_FLTINR1_FLT1P);
 8002fd8:	6851      	ldr	r1, [r2, #4]
      hrtim_fltinr1 |= (pFaultCfg->Filter & HRTIM_FLTINR1_FLT1F);
 8002fda:	f007 0278 	and.w	r2, r7, #120	@ 0x78
      hrtim_fltinr1 |= (pFaultCfg->Polarity & HRTIM_FLTINR1_FLT1P);
 8002fde:	f001 0102 	and.w	r1, r1, #2
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	f006 0180 	and.w	r1, r6, #128	@ 0x80
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	ea42 028c 	orr.w	r2, r2, ip, lsl #2
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT1P | HRTIM_FLTINR1_FLT1SRC_0 | HRTIM_FLTINR1_FLT1F | HRTIM_FLTINR1_FLT1LCK);
 8002fee:	f024 04fe 	bic.w	r4, r4, #254	@ 0xfe
      hrtim_fltinr1 |= (pFaultCfg->Lock & HRTIM_FLTINR1_FLT1LCK);
 8002ff2:	4314      	orrs	r4, r2
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8002ff4:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
 8002ff8:	2a07      	cmp	r2, #7
 8002ffa:	d1c8      	bne.n	8002f8e <HAL_HRTIM_FaultConfig+0x76>
    return HAL_ERROR;
 8002ffc:	2001      	movs	r0, #1
}
 8002ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR1_FLT2P);
 8003000:	6851      	ldr	r1, [r2, #4]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT2SRC_1_Pos);
 8003002:	f366 4051 	bfi	r0, r6, #17, #1
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 8003006:	e9d2 7602 	ldrd	r7, r6, [r2, #8]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR1_FLT2P);
 800300a:	0209      	lsls	r1, r1, #8
 800300c:	f401 7100 	and.w	r1, r1, #512	@ 0x200
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR1_FLT2F);
 8003010:	023a      	lsls	r2, r7, #8
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 8003012:	ea41 218c 	orr.w	r1, r1, ip, lsl #10
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR1_FLT2F);
 8003016:	f402 42f0 	and.w	r2, r2, #30720	@ 0x7800
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 800301a:	430a      	orrs	r2, r1
 800301c:	0231      	lsls	r1, r6, #8
 800301e:	f401 4100 	and.w	r1, r1, #32768	@ 0x8000
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT2P | HRTIM_FLTINR1_FLT2SRC_0 | HRTIM_FLTINR1_FLT2F | HRTIM_FLTINR1_FLT2LCK);
 8003022:	f424 447e 	bic.w	r4, r4, #65024	@ 0xfe00
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR1_FLT2LCK);
 8003026:	430a      	orrs	r2, r1
 8003028:	4314      	orrs	r4, r2
      break;
 800302a:	e7ac      	b.n	8002f86 <HAL_HRTIM_FaultConfig+0x6e>
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 16U) & HRTIM_FLTINR1_FLT3P);
 800302c:	6851      	ldr	r1, [r2, #4]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT3SRC_1_Pos);
 800302e:	f366 4092 	bfi	r0, r6, #18, #1
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 8003032:	e9d2 7602 	ldrd	r7, r6, [r2, #8]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 16U) & HRTIM_FLTINR1_FLT3P);
 8003036:	0409      	lsls	r1, r1, #16
 8003038:	f401 3100 	and.w	r1, r1, #131072	@ 0x20000
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 16U) & HRTIM_FLTINR1_FLT3F);
 800303c:	043a      	lsls	r2, r7, #16
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 800303e:	ea41 418c 	orr.w	r1, r1, ip, lsl #18
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 16U) & HRTIM_FLTINR1_FLT3F);
 8003042:	f402 02f0 	and.w	r2, r2, #7864320	@ 0x780000
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 8003046:	430a      	orrs	r2, r1
 8003048:	0431      	lsls	r1, r6, #16
 800304a:	f401 0100 	and.w	r1, r1, #8388608	@ 0x800000
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT3P | HRTIM_FLTINR1_FLT3SRC_0 | HRTIM_FLTINR1_FLT3F | HRTIM_FLTINR1_FLT3LCK);
 800304e:	f424 047e 	bic.w	r4, r4, #16646144	@ 0xfe0000
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 16U) & HRTIM_FLTINR1_FLT3LCK);
 8003052:	430a      	orrs	r2, r1
 8003054:	4314      	orrs	r4, r2
      break;
 8003056:	e796      	b.n	8002f86 <HAL_HRTIM_FaultConfig+0x6e>
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 24U) & HRTIM_FLTINR1_FLT4P);
 8003058:	6851      	ldr	r1, [r2, #4]
      hrtim_fltinr2 |= (source1 << HRTIM_FLTINR2_FLT4SRC_1_Pos);
 800305a:	f366 40d3 	bfi	r0, r6, #19, #1
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 800305e:	e9d2 7602 	ldrd	r7, r6, [r2, #8]
      hrtim_fltinr1 |= ((pFaultCfg->Polarity << 24U) & HRTIM_FLTINR1_FLT4P);
 8003062:	0609      	lsls	r1, r1, #24
 8003064:	f001 7100 	and.w	r1, r1, #33554432	@ 0x2000000
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 24U) & HRTIM_FLTINR1_FLT4F);
 8003068:	063a      	lsls	r2, r7, #24
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 800306a:	ea41 618c 	orr.w	r1, r1, ip, lsl #26
      hrtim_fltinr1 |= ((pFaultCfg->Filter << 24U) & HRTIM_FLTINR1_FLT4F);
 800306e:	f002 42f0 	and.w	r2, r2, #2013265920	@ 0x78000000
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 8003072:	430a      	orrs	r2, r1
 8003074:	0631      	lsls	r1, r6, #24
 8003076:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
      hrtim_fltinr1 &= ~(HRTIM_FLTINR1_FLT4P | HRTIM_FLTINR1_FLT4SRC_0 | HRTIM_FLTINR1_FLT4F | HRTIM_FLTINR1_FLT4LCK);
 800307a:	f024 447e 	bic.w	r4, r4, #4261412864	@ 0xfe000000
      hrtim_fltinr1 |= ((pFaultCfg->Lock << 24U) & HRTIM_FLTINR1_FLT4LCK);
 800307e:	430a      	orrs	r2, r1
 8003080:	4314      	orrs	r4, r2
      break;
 8003082:	e780      	b.n	8002f86 <HAL_HRTIM_FaultConfig+0x6e>
      hrtim_fltinr2 |= (pFaultCfg->Polarity & HRTIM_FLTINR2_FLT5P);
 8003084:	6851      	ldr	r1, [r2, #4]
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT5SRC_0_Pos);
 8003086:	f420 1080 	bic.w	r0, r0, #1048576	@ 0x100000
      hrtim_fltinr2 |= (pFaultCfg->Polarity & HRTIM_FLTINR2_FLT5P);
 800308a:	f001 0102 	and.w	r1, r1, #2
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT5SRC_0_Pos);
 800308e:	ea41 018c 	orr.w	r1, r1, ip, lsl #2
 8003092:	f020 00fe 	bic.w	r0, r0, #254	@ 0xfe
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT5SRC_1);
 8003096:	4308      	orrs	r0, r1
      hrtim_fltinr2 |= (pFaultCfg->Lock & HRTIM_FLTINR2_FLT5LCK);
 8003098:	e9d2 1702 	ldrd	r1, r7, [r2, #8]
      hrtim_fltinr2 |= (pFaultCfg->Filter & HRTIM_FLTINR2_FLT5F);
 800309c:	f001 0278 	and.w	r2, r1, #120	@ 0x78
      hrtim_fltinr2 |= (pFaultCfg->Lock & HRTIM_FLTINR2_FLT5LCK);
 80030a0:	f007 0180 	and.w	r1, r7, #128	@ 0x80
 80030a4:	430a      	orrs	r2, r1
 80030a6:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
 80030aa:	4310      	orrs	r0, r2
      break;
 80030ac:	e76b      	b.n	8002f86 <HAL_HRTIM_FaultConfig+0x6e>
      hrtim_fltinr2 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR2_FLT6P);
 80030ae:	6851      	ldr	r1, [r2, #4]
 80030b0:	0209      	lsls	r1, r1, #8
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT6SRC_0_Pos);
 80030b2:	f420 1003 	bic.w	r0, r0, #2146304	@ 0x20c000
      hrtim_fltinr2 |= ((pFaultCfg->Polarity << 8U) & HRTIM_FLTINR2_FLT6P);
 80030b6:	f401 7100 	and.w	r1, r1, #512	@ 0x200
      hrtim_fltinr2 |= (source0 << HRTIM_FLTINR2_FLT6SRC_0_Pos);
 80030ba:	ea41 218c 	orr.w	r1, r1, ip, lsl #10
 80030be:	f420 5078 	bic.w	r0, r0, #15872	@ 0x3e00
      hrtim_fltinr2 &= ~(HRTIM_FLTINR2_FLT6SRC_1);
 80030c2:	4308      	orrs	r0, r1
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 80030c4:	e9d2 1702 	ldrd	r1, r7, [r2, #8]
      hrtim_fltinr2 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR2_FLT6F);
 80030c8:	020a      	lsls	r2, r1, #8
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 80030ca:	0239      	lsls	r1, r7, #8
      hrtim_fltinr2 |= ((pFaultCfg->Filter << 8U) & HRTIM_FLTINR2_FLT6F);
 80030cc:	f402 42f0 	and.w	r2, r2, #30720	@ 0x7800
      hrtim_fltinr2 |= ((pFaultCfg->Lock << 8U) & HRTIM_FLTINR2_FLT6LCK);
 80030d0:	f401 4100 	and.w	r1, r1, #32768	@ 0x8000
 80030d4:	430a      	orrs	r2, r1
 80030d6:	ea42 5246 	orr.w	r2, r2, r6, lsl #21
 80030da:	4310      	orrs	r0, r2
      break;
 80030dc:	e753      	b.n	8002f86 <HAL_HRTIM_FaultConfig+0x6e>
    return HAL_BUSY;
 80030de:	2002      	movs	r0, #2
}
 80030e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e2:	bf00      	nop

080030e4 <HAL_HRTIM_FaultPrescalerConfig>:
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80030e4:	f890 20dd 	ldrb.w	r2, [r0, #221]	@ 0xdd
 80030e8:	2a02      	cmp	r2, #2
{
 80030ea:	4603      	mov	r3, r0
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80030ec:	b2d0      	uxtb	r0, r2
 80030ee:	d01a      	beq.n	8003126 <HAL_HRTIM_FaultPrescalerConfig+0x42>
  __HAL_LOCK(hhrtim);
 80030f0:	f893 20dc 	ldrb.w	r2, [r3, #220]	@ 0xdc
 80030f4:	2a01      	cmp	r2, #1
 80030f6:	d015      	beq.n	8003124 <HAL_HRTIM_FaultPrescalerConfig+0x40>
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 80030f8:	6818      	ldr	r0, [r3, #0]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8003100:	f8d0 23d4 	ldr.w	r2, [r0, #980]	@ 0x3d4
 8003104:	f001 7140 	and.w	r1, r1, #50331648	@ 0x3000000
 8003108:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
  __HAL_UNLOCK(hhrtim);
 800310c:	f04f 0c00 	mov.w	ip, #0
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8003110:	430a      	orrs	r2, r1
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003112:	2101      	movs	r1, #1
  MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLTSD, (Prescaler & HRTIM_FLTINR2_FLTSD));
 8003114:	f8c0 23d4 	str.w	r2, [r0, #980]	@ 0x3d4
  return HAL_OK;
 8003118:	4660      	mov	r0, ip
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800311a:	f883 10dd 	strb.w	r1, [r3, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 800311e:	f883 c0dc 	strb.w	ip, [r3, #220]	@ 0xdc
  return HAL_OK;
 8003122:	4770      	bx	lr
    return HAL_BUSY;
 8003124:	2002      	movs	r0, #2
}
 8003126:	4770      	bx	lr

08003128 <HAL_HRTIM_FaultBlankingConfigAndEnable>:
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003128:	f890 c0dd 	ldrb.w	ip, [r0, #221]	@ 0xdd
 800312c:	f1bc 0f02 	cmp.w	ip, #2
{
 8003130:	4603      	mov	r3, r0
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003132:	fa5f f08c 	uxtb.w	r0, ip
 8003136:	d020      	beq.n	800317a <HAL_HRTIM_FaultBlankingConfigAndEnable+0x52>
  __HAL_LOCK(hhrtim);
 8003138:	f893 00dc 	ldrb.w	r0, [r3, #220]	@ 0xdc
 800313c:	2801      	cmp	r0, #1
 800313e:	d07c      	beq.n	800323a <HAL_HRTIM_FaultBlankingConfigAndEnable+0x112>
 8003140:	f04f 0c01 	mov.w	ip, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003144:	2002      	movs	r0, #2
  switch (Fault)
 8003146:	3901      	subs	r1, #1
  __HAL_LOCK(hhrtim);
 8003148:	f883 c0dc 	strb.w	ip, [r3, #220]	@ 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800314c:	f883 00dd 	strb.w	r0, [r3, #221]	@ 0xdd
  switch (Fault)
 8003150:	291f      	cmp	r1, #31
 8003152:	d813      	bhi.n	800317c <HAL_HRTIM_FaultBlankingConfigAndEnable+0x54>
 8003154:	e8df f001 	tbb	[pc, r1]
 8003158:	3d123023 	.word	0x3d123023
 800315c:	4a121212 	.word	0x4a121212
 8003160:	12121212 	.word	0x12121212
 8003164:	57121212 	.word	0x57121212
 8003168:	12121212 	.word	0x12121212
 800316c:	12121212 	.word	0x12121212
 8003170:	12121212 	.word	0x12121212
 8003174:	64121212 	.word	0x64121212
    return HAL_ERROR;
 8003178:	2001      	movs	r0, #1
}
 800317a:	4770      	bx	lr
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800317c:	2107      	movs	r1, #7
      __HAL_UNLOCK(hhrtim);
 800317e:	2200      	movs	r2, #0
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003180:	f883 10dd 	strb.w	r1, [r3, #221]	@ 0xdd
      __HAL_UNLOCK(hhrtim);
 8003184:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003188:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
 800318c:	2a07      	cmp	r2, #7
 800318e:	d0f3      	beq.n	8003178 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x50>
  __HAL_UNLOCK(hhrtim);
 8003190:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003192:	2201      	movs	r2, #1
 8003194:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 8003198:	f883 00dc 	strb.w	r0, [r3, #220]	@ 0xdc
  return HAL_OK;
 800319c:	4770      	bx	lr
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 800319e:	6819      	ldr	r1, [r3, #0]
 80031a0:	6890      	ldr	r0, [r2, #8]
 80031a2:	f8d1 2408 	ldr.w	r2, [r1, #1032]	@ 0x408
 80031a6:	f022 0203 	bic.w	r2, r2, #3
 80031aa:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	f8c1 2408 	str.w	r2, [r1, #1032]	@ 0x408
      break;
 80031b6:	e7e7      	b.n	8003188 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x60>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80031b8:	6819      	ldr	r1, [r3, #0]
 80031ba:	6890      	ldr	r0, [r2, #8]
 80031bc:	f8d1 2408 	ldr.w	r2, [r1, #1032]	@ 0x408
 80031c0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80031c4:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 80031c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031cc:	f8c1 2408 	str.w	r2, [r1, #1032]	@ 0x408
      break;
 80031d0:	e7da      	b.n	8003188 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x60>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80031d2:	6819      	ldr	r1, [r3, #0]
 80031d4:	6890      	ldr	r0, [r2, #8]
 80031d6:	f8d1 2408 	ldr.w	r2, [r1, #1032]	@ 0x408
 80031da:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80031de:	ea42 4240 	orr.w	r2, r2, r0, lsl #17
 80031e2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80031e6:	f8c1 2408 	str.w	r2, [r1, #1032]	@ 0x408
      break;
 80031ea:	e7cd      	b.n	8003188 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x60>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80031ec:	6819      	ldr	r1, [r3, #0]
 80031ee:	6890      	ldr	r0, [r2, #8]
 80031f0:	f8d1 2408 	ldr.w	r2, [r1, #1032]	@ 0x408
 80031f4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80031f8:	ea42 6240 	orr.w	r2, r2, r0, lsl #25
 80031fc:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003200:	f8c1 2408 	str.w	r2, [r1, #1032]	@ 0x408
      break;
 8003204:	e7c0      	b.n	8003188 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x60>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8003206:	6819      	ldr	r1, [r3, #0]
 8003208:	6890      	ldr	r0, [r2, #8]
 800320a:	f8d1 240c 	ldr.w	r2, [r1, #1036]	@ 0x40c
 800320e:	f022 0203 	bic.w	r2, r2, #3
 8003212:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8003216:	f042 0201 	orr.w	r2, r2, #1
 800321a:	f8c1 240c 	str.w	r2, [r1, #1036]	@ 0x40c
      break;
 800321e:	e7b3      	b.n	8003188 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x60>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 8003220:	6819      	ldr	r1, [r3, #0]
 8003222:	6890      	ldr	r0, [r2, #8]
 8003224:	f8d1 240c 	ldr.w	r2, [r1, #1036]	@ 0x40c
 8003228:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800322c:	ea42 2240 	orr.w	r2, r2, r0, lsl #9
 8003230:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003234:	f8c1 240c 	str.w	r2, [r1, #1036]	@ 0x40c
      break;
 8003238:	e7a6      	b.n	8003188 <HAL_HRTIM_FaultBlankingConfigAndEnable+0x60>
    return HAL_BUSY;
 800323a:	2002      	movs	r0, #2
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop

08003240 <HAL_HRTIM_FaultCounterConfig>:
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003240:	f890 c0dd 	ldrb.w	ip, [r0, #221]	@ 0xdd
 8003244:	f1bc 0f02 	cmp.w	ip, #2
{
 8003248:	4603      	mov	r3, r0
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800324a:	fa5f f08c 	uxtb.w	r0, ip
 800324e:	f000 8090 	beq.w	8003372 <HAL_HRTIM_FaultCounterConfig+0x132>
  __HAL_LOCK(hhrtim);
 8003252:	f893 00dc 	ldrb.w	r0, [r3, #220]	@ 0xdc
 8003256:	2801      	cmp	r0, #1
 8003258:	f000 808c 	beq.w	8003374 <HAL_HRTIM_FaultCounterConfig+0x134>
 800325c:	f04f 0c01 	mov.w	ip, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003260:	2002      	movs	r0, #2
  switch (Fault)
 8003262:	3901      	subs	r1, #1
{
 8003264:	b410      	push	{r4}
  __HAL_LOCK(hhrtim);
 8003266:	f883 c0dc 	strb.w	ip, [r3, #220]	@ 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800326a:	f883 00dd 	strb.w	r0, [r3, #221]	@ 0xdd
  switch (Fault)
 800326e:	291f      	cmp	r1, #31
 8003270:	d811      	bhi.n	8003296 <HAL_HRTIM_FaultCounterConfig+0x56>
 8003272:	e8df f001 	tbb	[pc, r1]
 8003276:	7023      	.short	0x7023
 8003278:	10103810 	.word	0x10103810
 800327c:	10104610 	.word	0x10104610
 8003280:	10101010 	.word	0x10101010
 8003284:	10105410 	.word	0x10105410
 8003288:	10101010 	.word	0x10101010
 800328c:	10101010 	.word	0x10101010
 8003290:	10101010 	.word	0x10101010
 8003294:	6210      	.short	0x6210
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003296:	2107      	movs	r1, #7
      __HAL_UNLOCK(hhrtim);
 8003298:	2200      	movs	r2, #0
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800329a:	f883 10dd 	strb.w	r1, [r3, #221]	@ 0xdd
      __HAL_UNLOCK(hhrtim);
 800329e:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80032a2:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
 80032a6:	2a07      	cmp	r2, #7
 80032a8:	d019      	beq.n	80032de <HAL_HRTIM_FaultCounterConfig+0x9e>
  __HAL_UNLOCK(hhrtim);
 80032aa:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 80032b2:	f883 00dc 	strb.w	r0, [r3, #220]	@ 0xdc
}
 80032b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032ba:	4770      	bx	lr
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80032bc:	e9d2 4200 	ldrd	r4, r2, [r2]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	f8d0 1408 	ldr.w	r1, [r0, #1032]	@ 0x408
 80032c6:	01d2      	lsls	r2, r2, #7
 80032c8:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80032cc:	f021 01bc 	bic.w	r1, r1, #188	@ 0xbc
 80032d0:	430a      	orrs	r2, r1
 80032d2:	f8c0 2408 	str.w	r2, [r0, #1032]	@ 0x408
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80032d6:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
 80032da:	2a07      	cmp	r2, #7
 80032dc:	d1e5      	bne.n	80032aa <HAL_HRTIM_FaultCounterConfig+0x6a>
    return HAL_ERROR;
 80032de:	2001      	movs	r0, #1
}
 80032e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032e4:	4770      	bx	lr
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 80032e6:	e9d2 4200 	ldrd	r4, r2, [r2]
 80032ea:	6818      	ldr	r0, [r3, #0]
 80032ec:	f8d0 1408 	ldr.w	r1, [r0, #1032]	@ 0x408
 80032f0:	05d2      	lsls	r2, r2, #23
 80032f2:	ea42 4284 	orr.w	r2, r2, r4, lsl #18
 80032f6:	f421 013c 	bic.w	r1, r1, #12320768	@ 0xbc0000
 80032fa:	430a      	orrs	r2, r1
 80032fc:	f8c0 2408 	str.w	r2, [r0, #1032]	@ 0x408
      break;
 8003300:	e7cf      	b.n	80032a2 <HAL_HRTIM_FaultCounterConfig+0x62>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8003302:	e9d2 4200 	ldrd	r4, r2, [r2]
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	f8d0 1408 	ldr.w	r1, [r0, #1032]	@ 0x408
 800330c:	07d2      	lsls	r2, r2, #31
 800330e:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 8003312:	f021 413c 	bic.w	r1, r1, #3154116608	@ 0xbc000000
 8003316:	430a      	orrs	r2, r1
 8003318:	f8c0 2408 	str.w	r2, [r0, #1032]	@ 0x408
      break;
 800331c:	e7c1      	b.n	80032a2 <HAL_HRTIM_FaultCounterConfig+0x62>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 800331e:	e9d2 4200 	ldrd	r4, r2, [r2]
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	f8d0 140c 	ldr.w	r1, [r0, #1036]	@ 0x40c
 8003328:	01d2      	lsls	r2, r2, #7
 800332a:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 800332e:	f021 01bc 	bic.w	r1, r1, #188	@ 0xbc
 8003332:	430a      	orrs	r2, r1
 8003334:	f8c0 240c 	str.w	r2, [r0, #1036]	@ 0x40c
      break;
 8003338:	e7b3      	b.n	80032a2 <HAL_HRTIM_FaultCounterConfig+0x62>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR4,
 800333a:	e9d2 4200 	ldrd	r4, r2, [r2]
 800333e:	6818      	ldr	r0, [r3, #0]
 8003340:	f8d0 140c 	ldr.w	r1, [r0, #1036]	@ 0x40c
 8003344:	03d2      	lsls	r2, r2, #15
 8003346:	ea42 2284 	orr.w	r2, r2, r4, lsl #10
 800334a:	f421 413c 	bic.w	r1, r1, #48128	@ 0xbc00
 800334e:	430a      	orrs	r2, r1
 8003350:	f8c0 240c 	str.w	r2, [r0, #1036]	@ 0x40c
      break;
 8003354:	e7a5      	b.n	80032a2 <HAL_HRTIM_FaultCounterConfig+0x62>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR3,
 8003356:	e9d2 4200 	ldrd	r4, r2, [r2]
 800335a:	6818      	ldr	r0, [r3, #0]
 800335c:	f8d0 1408 	ldr.w	r1, [r0, #1032]	@ 0x408
 8003360:	03d2      	lsls	r2, r2, #15
 8003362:	ea42 2284 	orr.w	r2, r2, r4, lsl #10
 8003366:	f421 413c 	bic.w	r1, r1, #48128	@ 0xbc00
 800336a:	430a      	orrs	r2, r1
 800336c:	f8c0 2408 	str.w	r2, [r0, #1032]	@ 0x408
      break;
 8003370:	e797      	b.n	80032a2 <HAL_HRTIM_FaultCounterConfig+0x62>
}
 8003372:	4770      	bx	lr
    return HAL_BUSY;
 8003374:	2002      	movs	r0, #2
 8003376:	4770      	bx	lr

08003378 <HAL_HRTIM_FaultModeCtl>:
{
 8003378:	b410      	push	{r4}
  if ((Faults & HRTIM_FAULT_1) != (uint32_t)RESET)
 800337a:	07cc      	lsls	r4, r1, #31
 800337c:	d506      	bpl.n	800338c <HAL_HRTIM_FaultModeCtl+0x14>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT1E, (Enable & HRTIM_FLTINR1_FLT1E));
 800337e:	6804      	ldr	r4, [r0, #0]
 8003380:	f8d4 33d0 	ldr.w	r3, [r4, #976]	@ 0x3d0
 8003384:	f362 0300 	bfi	r3, r2, #0, #1
 8003388:	f8c4 33d0 	str.w	r3, [r4, #976]	@ 0x3d0
  if ((Faults & HRTIM_FAULT_2) != (uint32_t)RESET)
 800338c:	078b      	lsls	r3, r1, #30
 800338e:	d506      	bpl.n	800339e <HAL_HRTIM_FaultModeCtl+0x26>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT2E, ((Enable << 8U) & HRTIM_FLTINR1_FLT2E));
 8003390:	6804      	ldr	r4, [r0, #0]
 8003392:	f8d4 33d0 	ldr.w	r3, [r4, #976]	@ 0x3d0
 8003396:	f362 2308 	bfi	r3, r2, #8, #1
 800339a:	f8c4 33d0 	str.w	r3, [r4, #976]	@ 0x3d0
  if ((Faults & HRTIM_FAULT_3) != (uint32_t)RESET)
 800339e:	074c      	lsls	r4, r1, #29
 80033a0:	d506      	bpl.n	80033b0 <HAL_HRTIM_FaultModeCtl+0x38>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT3E, ((Enable << 16U) & HRTIM_FLTINR1_FLT3E));
 80033a2:	6804      	ldr	r4, [r0, #0]
 80033a4:	f8d4 33d0 	ldr.w	r3, [r4, #976]	@ 0x3d0
 80033a8:	f362 4310 	bfi	r3, r2, #16, #1
 80033ac:	f8c4 33d0 	str.w	r3, [r4, #976]	@ 0x3d0
  if ((Faults & HRTIM_FAULT_4) != (uint32_t)RESET)
 80033b0:	070b      	lsls	r3, r1, #28
 80033b2:	d506      	bpl.n	80033c2 <HAL_HRTIM_FaultModeCtl+0x4a>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR1, HRTIM_FLTINR1_FLT4E, ((Enable << 24U) & HRTIM_FLTINR1_FLT4E));
 80033b4:	6804      	ldr	r4, [r0, #0]
 80033b6:	f8d4 33d0 	ldr.w	r3, [r4, #976]	@ 0x3d0
 80033ba:	f362 6318 	bfi	r3, r2, #24, #1
 80033be:	f8c4 33d0 	str.w	r3, [r4, #976]	@ 0x3d0
  if ((Faults & HRTIM_FAULT_5) != (uint32_t)RESET)
 80033c2:	06cc      	lsls	r4, r1, #27
 80033c4:	d506      	bpl.n	80033d4 <HAL_HRTIM_FaultModeCtl+0x5c>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT5E, ((Enable) & HRTIM_FLTINR2_FLT5E));
 80033c6:	6804      	ldr	r4, [r0, #0]
 80033c8:	f8d4 33d4 	ldr.w	r3, [r4, #980]	@ 0x3d4
 80033cc:	f362 0300 	bfi	r3, r2, #0, #1
 80033d0:	f8c4 33d4 	str.w	r3, [r4, #980]	@ 0x3d4
  if ((Faults & HRTIM_FAULT_6) != (uint32_t)RESET)
 80033d4:	068b      	lsls	r3, r1, #26
 80033d6:	d506      	bpl.n	80033e6 <HAL_HRTIM_FaultModeCtl+0x6e>
    MODIFY_REG(hhrtim->Instance->sCommonRegs.FLTINR2, HRTIM_FLTINR2_FLT6E, ((Enable << 8U) & HRTIM_FLTINR2_FLT6E));
 80033d8:	6801      	ldr	r1, [r0, #0]
 80033da:	f8d1 33d4 	ldr.w	r3, [r1, #980]	@ 0x3d4
 80033de:	f362 2308 	bfi	r3, r2, #8, #1
 80033e2:	f8c1 33d4 	str.w	r3, [r1, #980]	@ 0x3d4
}
 80033e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_HRTIM_ADCTriggerConfig>:
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80033ec:	f890 c0dd 	ldrb.w	ip, [r0, #221]	@ 0xdd
 80033f0:	f1bc 0f02 	cmp.w	ip, #2
{
 80033f4:	4603      	mov	r3, r0
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80033f6:	fa5f f08c 	uxtb.w	r0, ip
 80033fa:	f000 80cd 	beq.w	8003598 <HAL_HRTIM_ADCTriggerConfig+0x1ac>
  __HAL_LOCK(hhrtim);
 80033fe:	f893 00dc 	ldrb.w	r0, [r3, #220]	@ 0xdc
 8003402:	2801      	cmp	r0, #1
 8003404:	f000 80c9 	beq.w	800359a <HAL_HRTIM_ADCTriggerConfig+0x1ae>
{
 8003408:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hhrtim);
 800340a:	2401      	movs	r4, #1
 800340c:	f883 40dc 	strb.w	r4, [r3, #220]	@ 0xdc
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 8003410:	6818      	ldr	r0, [r3, #0]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003412:	2402      	movs	r4, #2
 8003414:	f883 40dd 	strb.w	r4, [r3, #221]	@ 0xdd
  switch (ADCTrigger)
 8003418:	2920      	cmp	r1, #32
  hrtim_cr1 = hhrtim->Instance->sCommonRegs.CR1;
 800341a:	f8d0 5380 	ldr.w	r5, [r0, #896]	@ 0x380
  hrtim_adcur = hhrtim->Instance->sCommonRegs.ADCUR;
 800341e:	f8d0 43fc 	ldr.w	r4, [r0, #1020]	@ 0x3fc
  switch (ADCTrigger)
 8003422:	d81a      	bhi.n	800345a <HAL_HRTIM_ADCTriggerConfig+0x6e>
 8003424:	2900      	cmp	r1, #0
 8003426:	f000 80e7 	beq.w	80035f8 <HAL_HRTIM_ADCTriggerConfig+0x20c>
 800342a:	f101 3cff 	add.w	ip, r1, #4294967295
 800342e:	f1bc 0f1f 	cmp.w	ip, #31
 8003432:	f200 80d3 	bhi.w	80035dc <HAL_HRTIM_ADCTriggerConfig+0x1f0>
 8003436:	e8df f00c 	tbb	[pc, ip]
 800343a:	90a0      	.short	0x90a0
 800343c:	d1d17fd1 	.word	0xd1d17fd1
 8003440:	d1d16dd1 	.word	0xd1d16dd1
 8003444:	d1d1d1d1 	.word	0xd1d1d1d1
 8003448:	d1d162d1 	.word	0xd1d162d1
 800344c:	d1d1d1d1 	.word	0xd1d1d1d1
 8003450:	d1d1d1d1 	.word	0xd1d1d1d1
 8003454:	d1d1d1d1 	.word	0xd1d1d1d1
 8003458:	52d1      	.short	0x52d1
 800345a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800345e:	f000 80ae 	beq.w	80035be <HAL_HRTIM_ADCTriggerConfig+0x1d2>
 8003462:	d828      	bhi.n	80034b6 <HAL_HRTIM_ADCTriggerConfig+0xca>
 8003464:	2940      	cmp	r1, #64	@ 0x40
 8003466:	f000 809a 	beq.w	800359e <HAL_HRTIM_ADCTriggerConfig+0x1b2>
 800346a:	2980      	cmp	r1, #128	@ 0x80
 800346c:	f040 80da 	bne.w	8003624 <HAL_HRTIM_ADCTriggerConfig+0x238>
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8003470:	e9d2 1200 	ldrd	r1, r2, [r2]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 8003474:	0909      	lsrs	r1, r1, #4
 8003476:	f401 41e0 	and.w	r1, r1, #28672	@ 0x7000
      hrtim_adcur &= ~(HRTIM_ADCUR_AD8USRC);
 800347a:	f424 44e0 	bic.w	r4, r4, #28672	@ 0x7000
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 4U) & HRTIM_ADCUR_AD8USRC);
 800347e:	430c      	orrs	r4, r1
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 8003480:	f8d0 13f8 	ldr.w	r1, [r0, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD8TRG_Pos) & HRTIM_ADCER_AD8TRG);
 8003484:	0412      	lsls	r2, r2, #16
 8003486:	f402 12f8 	and.w	r2, r2, #2031616	@ 0x1f0000
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD8TRG);
 800348a:	f421 11f8 	bic.w	r1, r1, #2031616	@ 0x1f0000
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 800348e:	f8c0 13f8 	str.w	r1, [r0, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 8003492:	f8d0 13f8 	ldr.w	r1, [r0, #1016]	@ 0x3f8
 8003496:	430a      	orrs	r2, r1
 8003498:	f8c0 23f8 	str.w	r2, [r0, #1016]	@ 0x3f8
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800349c:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
 80034a0:	2a07      	cmp	r2, #7
 80034a2:	d058      	beq.n	8003556 <HAL_HRTIM_ADCTriggerConfig+0x16a>
    hhrtim->Instance->sCommonRegs.ADCUR = hrtim_adcur;
 80034a4:	f8c0 43fc 	str.w	r4, [r0, #1020]	@ 0x3fc
  __HAL_UNLOCK(hhrtim);
 80034a8:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 80034b0:	f883 00dc 	strb.w	r0, [r3, #220]	@ 0xdc
}
 80034b4:	bd30      	pop	{r4, r5, pc}
  switch (ADCTrigger)
 80034b6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80034ba:	f040 80a7 	bne.w	800360c <HAL_HRTIM_ADCTriggerConfig+0x220>
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 80034be:	e9d2 1200 	ldrd	r1, r2, [r2]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 80034c2:	0109      	lsls	r1, r1, #4
 80034c4:	f401 01e0 	and.w	r1, r1, #7340032	@ 0x700000
      hrtim_adcur &= ~(HRTIM_ADCUR_AD10USRC);
 80034c8:	f424 04e0 	bic.w	r4, r4, #7340032	@ 0x700000
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource << 4U) & HRTIM_ADCUR_AD10USRC);
 80034cc:	430c      	orrs	r4, r1
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 80034ce:	f8d0 13f8 	ldr.w	r1, [r0, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD10TRG_Pos) & HRTIM_ADCER_AD10TRG);
 80034d2:	0692      	lsls	r2, r2, #26
 80034d4:	f002 42f8 	and.w	r2, r2, #2080374784	@ 0x7c000000
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD10TRG);
 80034d8:	f021 41f8 	bic.w	r1, r1, #2080374784	@ 0x7c000000
 80034dc:	e7d7      	b.n	800348e <HAL_HRTIM_ADCTriggerConfig+0xa2>
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 80034de:	e9d2 1200 	ldrd	r1, r2, [r2]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 80034e2:	0b09      	lsrs	r1, r1, #12
 80034e4:	f001 0170 	and.w	r1, r1, #112	@ 0x70
      hrtim_adcur &= ~(HRTIM_ADCUR_AD6USRC);
 80034e8:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 12U) & HRTIM_ADCUR_AD6USRC);
 80034ec:	430c      	orrs	r4, r1
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 80034ee:	f8d0 13f8 	ldr.w	r1, [r0, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD6TRG_Pos) & HRTIM_ADCER_AD6TRG);
 80034f2:	0152      	lsls	r2, r2, #5
 80034f4:	f402 7278 	and.w	r2, r2, #992	@ 0x3e0
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD6TRG);
 80034f8:	f421 7178 	bic.w	r1, r1, #992	@ 0x3e0
 80034fc:	e7c7      	b.n	800348e <HAL_HRTIM_ADCTriggerConfig+0xa2>
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 80034fe:	8851      	ldrh	r1, [r2, #2]
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 8003500:	6852      	ldr	r2, [r2, #4]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 16U) & HRTIM_ADCUR_AD5USRC);
 8003502:	f361 0402 	bfi	r4, r1, #0, #3
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 8003506:	f8d0 13f8 	ldr.w	r1, [r0, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD5TRG_Pos) & HRTIM_ADCER_AD5TRG);
 800350a:	f002 021f 	and.w	r2, r2, #31
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD5TRG);
 800350e:	f021 011f 	bic.w	r1, r1, #31
 8003512:	e7bc      	b.n	800348e <HAL_HRTIM_ADCTriggerConfig+0xa2>
      hhrtim->Instance->sCommonRegs.ADC4R = pADCTriggerCfg->Trigger;
 8003514:	e9d2 1200 	ldrd	r1, r2, [r2]
 8003518:	f8c0 23c8 	str.w	r2, [r0, #968]	@ 0x3c8
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800351c:	f893 40dd 	ldrb.w	r4, [r3, #221]	@ 0xdd
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8003520:	024a      	lsls	r2, r1, #9
      hrtim_cr1 &= ~(HRTIM_CR1_ADC4USRC);
 8003522:	f025 6560 	bic.w	r5, r5, #234881024	@ 0xe000000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 8003526:	f002 6260 	and.w	r2, r2, #234881024	@ 0xe000000
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800352a:	2c07      	cmp	r4, #7
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 9U) & HRTIM_CR1_ADC4USRC);
 800352c:	ea45 0502 	orr.w	r5, r5, r2
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003530:	d011      	beq.n	8003556 <HAL_HRTIM_ADCTriggerConfig+0x16a>
    hhrtim->Instance->sCommonRegs.CR1 = hrtim_cr1;
 8003532:	f8c0 5380 	str.w	r5, [r0, #896]	@ 0x380
 8003536:	e7b7      	b.n	80034a8 <HAL_HRTIM_ADCTriggerConfig+0xbc>
      hhrtim->Instance->sCommonRegs.ADC3R = pADCTriggerCfg->Trigger;
 8003538:	e9d2 1200 	ldrd	r1, r2, [r2]
 800353c:	f8c0 23c4 	str.w	r2, [r0, #964]	@ 0x3c4
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003540:	f893 40dd 	ldrb.w	r4, [r3, #221]	@ 0xdd
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8003544:	018a      	lsls	r2, r1, #6
      hrtim_cr1 &= ~(HRTIM_CR1_ADC3USRC);
 8003546:	f025 75e0 	bic.w	r5, r5, #29360128	@ 0x1c00000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 800354a:	f002 72e0 	and.w	r2, r2, #29360128	@ 0x1c00000
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800354e:	2c07      	cmp	r4, #7
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 6U) & HRTIM_CR1_ADC3USRC);
 8003550:	ea45 0502 	orr.w	r5, r5, r2
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003554:	d1ed      	bne.n	8003532 <HAL_HRTIM_ADCTriggerConfig+0x146>
    return HAL_ERROR;
 8003556:	2001      	movs	r0, #1
}
 8003558:	bd30      	pop	{r4, r5, pc}
      hhrtim->Instance->sCommonRegs.ADC2R = pADCTriggerCfg->Trigger;
 800355a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800355e:	f8c0 23c0 	str.w	r2, [r0, #960]	@ 0x3c0
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003562:	f893 40dd 	ldrb.w	r4, [r3, #221]	@ 0xdd
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8003566:	00ca      	lsls	r2, r1, #3
      hrtim_cr1 &= ~(HRTIM_CR1_ADC2USRC);
 8003568:	f425 1560 	bic.w	r5, r5, #3670016	@ 0x380000
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 800356c:	f402 1260 	and.w	r2, r2, #3670016	@ 0x380000
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003570:	2c07      	cmp	r4, #7
      hrtim_cr1 |= ((pADCTriggerCfg->UpdateSource << 3U) & HRTIM_CR1_ADC2USRC);
 8003572:	ea45 0502 	orr.w	r5, r5, r2
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003576:	d1dc      	bne.n	8003532 <HAL_HRTIM_ADCTriggerConfig+0x146>
 8003578:	e7ed      	b.n	8003556 <HAL_HRTIM_ADCTriggerConfig+0x16a>
      hhrtim->Instance->sCommonRegs.ADC1R = pADCTriggerCfg->Trigger;
 800357a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800357e:	f8c0 23bc 	str.w	r2, [r0, #956]	@ 0x3bc
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003582:	f893 40dd 	ldrb.w	r4, [r3, #221]	@ 0xdd
      hrtim_cr1 &= ~(HRTIM_CR1_ADC1USRC);
 8003586:	f425 25e0 	bic.w	r5, r5, #458752	@ 0x70000
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 800358a:	f401 22e0 	and.w	r2, r1, #458752	@ 0x70000
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800358e:	2c07      	cmp	r4, #7
      hrtim_cr1 |= (pADCTriggerCfg->UpdateSource & HRTIM_CR1_ADC1USRC);
 8003590:	ea45 0502 	orr.w	r5, r5, r2
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003594:	d1cd      	bne.n	8003532 <HAL_HRTIM_ADCTriggerConfig+0x146>
 8003596:	e7de      	b.n	8003556 <HAL_HRTIM_ADCTriggerConfig+0x16a>
}
 8003598:	4770      	bx	lr
    return HAL_BUSY;
 800359a:	2002      	movs	r0, #2
 800359c:	4770      	bx	lr
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 800359e:	e9d2 1200 	ldrd	r1, r2, [r2]
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 80035a2:	0a09      	lsrs	r1, r1, #8
 80035a4:	f401 61e0 	and.w	r1, r1, #1792	@ 0x700
      hrtim_adcur &= ~(HRTIM_ADCUR_AD7USRC);
 80035a8:	f424 64e0 	bic.w	r4, r4, #1792	@ 0x700
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource >> 8U) & HRTIM_ADCUR_AD7USRC);
 80035ac:	430c      	orrs	r4, r1
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 80035ae:	f8d0 13f8 	ldr.w	r1, [r0, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD7TRG_Pos) & HRTIM_ADCER_AD7TRG);
 80035b2:	0292      	lsls	r2, r2, #10
 80035b4:	f402 42f8 	and.w	r2, r2, #31744	@ 0x7c00
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD7TRG);
 80035b8:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 80035bc:	e767      	b.n	800348e <HAL_HRTIM_ADCTriggerConfig+0xa2>
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 80035be:	e9d2 1200 	ldrd	r1, r2, [r2]
      hrtim_adcur &= ~(HRTIM_ADCUR_AD9USRC);
 80035c2:	f424 24e0 	bic.w	r4, r4, #458752	@ 0x70000
      hrtim_adcur |= ((pADCTriggerCfg->UpdateSource) & HRTIM_ADCUR_AD9USRC);
 80035c6:	f401 21e0 	and.w	r1, r1, #458752	@ 0x70000
 80035ca:	430c      	orrs	r4, r1
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 80035cc:	f8d0 13f8 	ldr.w	r1, [r0, #1016]	@ 0x3f8
      hhrtim->Instance->sCommonRegs.ADCER |= ((pADCTriggerCfg->Trigger << HRTIM_ADCER_AD9TRG_Pos) & HRTIM_ADCER_AD9TRG);
 80035d0:	0552      	lsls	r2, r2, #21
 80035d2:	f002 7278 	and.w	r2, r2, #65011712	@ 0x3e00000
      hhrtim->Instance->sCommonRegs.ADCER &= ~(HRTIM_ADCER_AD9TRG);
 80035d6:	f021 7178 	bic.w	r1, r1, #65011712	@ 0x3e00000
 80035da:	e758      	b.n	800348e <HAL_HRTIM_ADCTriggerConfig+0xa2>
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80035dc:	2207      	movs	r2, #7
 80035de:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80035e2:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
      __HAL_UNLOCK(hhrtim);
 80035e6:	f04f 0c00 	mov.w	ip, #0
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80035ea:	2a07      	cmp	r2, #7
      __HAL_UNLOCK(hhrtim);
 80035ec:	f883 c0dc 	strb.w	ip, [r3, #220]	@ 0xdc
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80035f0:	d0b1      	beq.n	8003556 <HAL_HRTIM_ADCTriggerConfig+0x16a>
  if (ADCTrigger < HRTIM_ADCTRIGGER_5)
 80035f2:	290f      	cmp	r1, #15
 80035f4:	d99d      	bls.n	8003532 <HAL_HRTIM_ADCTriggerConfig+0x146>
 80035f6:	e755      	b.n	80034a4 <HAL_HRTIM_ADCTriggerConfig+0xb8>
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80035f8:	2207      	movs	r2, #7
 80035fa:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80035fe:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
      __HAL_UNLOCK(hhrtim);
 8003602:	f883 10dc 	strb.w	r1, [r3, #220]	@ 0xdc
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003606:	2a07      	cmp	r2, #7
 8003608:	d193      	bne.n	8003532 <HAL_HRTIM_ADCTriggerConfig+0x146>
 800360a:	e7a4      	b.n	8003556 <HAL_HRTIM_ADCTriggerConfig+0x16a>
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800360c:	2207      	movs	r2, #7
 800360e:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003612:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
      __HAL_UNLOCK(hhrtim);
 8003616:	2100      	movs	r1, #0
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003618:	2a07      	cmp	r2, #7
      __HAL_UNLOCK(hhrtim);
 800361a:	f883 10dc 	strb.w	r1, [r3, #220]	@ 0xdc
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800361e:	f47f af41 	bne.w	80034a4 <HAL_HRTIM_ADCTriggerConfig+0xb8>
 8003622:	e798      	b.n	8003556 <HAL_HRTIM_ADCTriggerConfig+0x16a>
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003624:	2207      	movs	r2, #7
 8003626:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800362a:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
      __HAL_UNLOCK(hhrtim);
 800362e:	2100      	movs	r1, #0
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003630:	2a07      	cmp	r2, #7
      __HAL_UNLOCK(hhrtim);
 8003632:	f883 10dc 	strb.w	r1, [r3, #220]	@ 0xdc
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003636:	d08e      	beq.n	8003556 <HAL_HRTIM_ADCTriggerConfig+0x16a>
 8003638:	e734      	b.n	80034a4 <HAL_HRTIM_ADCTriggerConfig+0xb8>
 800363a:	bf00      	nop

0800363c <HAL_HRTIM_ADCPostScalerConfig>:
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800363c:	f890 c0dd 	ldrb.w	ip, [r0, #221]	@ 0xdd
 8003640:	f1bc 0f02 	cmp.w	ip, #2
{
 8003644:	4603      	mov	r3, r0
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003646:	fa5f f08c 	uxtb.w	r0, ip
 800364a:	d023      	beq.n	8003694 <HAL_HRTIM_ADCPostScalerConfig+0x58>
  __HAL_LOCK(hhrtim);
 800364c:	f893 00dc 	ldrb.w	r0, [r3, #220]	@ 0xdc
 8003650:	2801      	cmp	r0, #1
 8003652:	d07c      	beq.n	800374e <HAL_HRTIM_ADCPostScalerConfig+0x112>
 8003654:	f04f 0c01 	mov.w	ip, #1
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003658:	2002      	movs	r0, #2
  switch (ADCTrigger)
 800365a:	2920      	cmp	r1, #32
  __HAL_LOCK(hhrtim);
 800365c:	f883 c0dc 	strb.w	ip, [r3, #220]	@ 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003660:	f883 00dd 	strb.w	r0, [r3, #221]	@ 0xdd
  switch (ADCTrigger)
 8003664:	d817      	bhi.n	8003696 <HAL_HRTIM_ADCPostScalerConfig+0x5a>
 8003666:	b331      	cbz	r1, 80036b6 <HAL_HRTIM_ADCPostScalerConfig+0x7a>
 8003668:	3901      	subs	r1, #1
 800366a:	291f      	cmp	r1, #31
 800366c:	d823      	bhi.n	80036b6 <HAL_HRTIM_ADCPostScalerConfig+0x7a>
 800366e:	e8df f001 	tbb	[pc, r1]
 8003672:	4e56      	.short	0x4e56
 8003674:	22224622 	.word	0x22224622
 8003678:	22223e22 	.word	0x22223e22
 800367c:	22222222 	.word	0x22222222
 8003680:	22226622 	.word	0x22226622
 8003684:	22222222 	.word	0x22222222
 8003688:	22222222 	.word	0x22222222
 800368c:	22222222 	.word	0x22222222
 8003690:	5e22      	.short	0x5e22
    return HAL_ERROR;
 8003692:	2001      	movs	r0, #1
}
 8003694:	4770      	bx	lr
  switch (ADCTrigger)
 8003696:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800369a:	d05a      	beq.n	8003752 <HAL_HRTIM_ADCPostScalerConfig+0x116>
 800369c:	d81c      	bhi.n	80036d8 <HAL_HRTIM_ADCPostScalerConfig+0x9c>
 800369e:	2940      	cmp	r1, #64	@ 0x40
 80036a0:	d05f      	beq.n	8003762 <HAL_HRTIM_ADCPostScalerConfig+0x126>
 80036a2:	2980      	cmp	r1, #128	@ 0x80
 80036a4:	d107      	bne.n	80036b6 <HAL_HRTIM_ADCPostScalerConfig+0x7a>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD8PSC, ((Postscaler << HRTIM_ADCPS2_AD8PSC_Pos) & HRTIM_ADCPS2_AD8PSC));
 80036a6:	6818      	ldr	r0, [r3, #0]
 80036a8:	f8d0 1404 	ldr.w	r1, [r0, #1028]	@ 0x404
 80036ac:	f362 3110 	bfi	r1, r2, #12, #5
 80036b0:	f8c0 1404 	str.w	r1, [r0, #1028]	@ 0x404
      break;
 80036b4:	e005      	b.n	80036c2 <HAL_HRTIM_ADCPostScalerConfig+0x86>
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80036b6:	2107      	movs	r1, #7
      __HAL_UNLOCK(hhrtim);
 80036b8:	2200      	movs	r2, #0
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80036ba:	f883 10dd 	strb.w	r1, [r3, #221]	@ 0xdd
      __HAL_UNLOCK(hhrtim);
 80036be:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
  if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80036c2:	f893 20dd 	ldrb.w	r2, [r3, #221]	@ 0xdd
 80036c6:	2a07      	cmp	r2, #7
 80036c8:	d0e3      	beq.n	8003692 <HAL_HRTIM_ADCPostScalerConfig+0x56>
  __HAL_UNLOCK(hhrtim);
 80036ca:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 80036d2:	f883 00dc 	strb.w	r0, [r3, #220]	@ 0xdc
  return HAL_OK;
 80036d6:	4770      	bx	lr
  switch (ADCTrigger)
 80036d8:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80036dc:	d1eb      	bne.n	80036b6 <HAL_HRTIM_ADCPostScalerConfig+0x7a>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD10PSC, ((Postscaler << HRTIM_ADCPS2_AD10PSC_Pos) & HRTIM_ADCPS2_AD10PSC));
 80036de:	6818      	ldr	r0, [r3, #0]
 80036e0:	f8d0 1404 	ldr.w	r1, [r0, #1028]	@ 0x404
 80036e4:	f362 611c 	bfi	r1, r2, #24, #5
 80036e8:	f8c0 1404 	str.w	r1, [r0, #1028]	@ 0x404
      break;
 80036ec:	e7e9      	b.n	80036c2 <HAL_HRTIM_ADCPostScalerConfig+0x86>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD4PSC, ((Postscaler << HRTIM_ADCPS1_AD4PSC_Pos) & HRTIM_ADCPS1_AD4PSC));
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	f8d0 1400 	ldr.w	r1, [r0, #1024]	@ 0x400
 80036f4:	f362 4196 	bfi	r1, r2, #18, #5
 80036f8:	f8c0 1400 	str.w	r1, [r0, #1024]	@ 0x400
      break;
 80036fc:	e7e1      	b.n	80036c2 <HAL_HRTIM_ADCPostScalerConfig+0x86>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD3PSC, ((Postscaler << HRTIM_ADCPS1_AD3PSC_Pos) & HRTIM_ADCPS1_AD3PSC));
 80036fe:	6818      	ldr	r0, [r3, #0]
 8003700:	f8d0 1400 	ldr.w	r1, [r0, #1024]	@ 0x400
 8003704:	f362 3110 	bfi	r1, r2, #12, #5
 8003708:	f8c0 1400 	str.w	r1, [r0, #1024]	@ 0x400
      break;
 800370c:	e7d9      	b.n	80036c2 <HAL_HRTIM_ADCPostScalerConfig+0x86>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD2PSC, ((Postscaler << HRTIM_ADCPS1_AD2PSC_Pos) & HRTIM_ADCPS1_AD2PSC));
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	f8d0 1400 	ldr.w	r1, [r0, #1024]	@ 0x400
 8003714:	f362 118a 	bfi	r1, r2, #6, #5
 8003718:	f8c0 1400 	str.w	r1, [r0, #1024]	@ 0x400
      break;
 800371c:	e7d1      	b.n	80036c2 <HAL_HRTIM_ADCPostScalerConfig+0x86>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD1PSC, (Postscaler & HRTIM_ADCPS1_AD1PSC));
 800371e:	6818      	ldr	r0, [r3, #0]
 8003720:	f8d0 1400 	ldr.w	r1, [r0, #1024]	@ 0x400
 8003724:	f362 0104 	bfi	r1, r2, #0, #5
 8003728:	f8c0 1400 	str.w	r1, [r0, #1024]	@ 0x400
      break;
 800372c:	e7c9      	b.n	80036c2 <HAL_HRTIM_ADCPostScalerConfig+0x86>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD6PSC, ((Postscaler << HRTIM_ADCPS2_AD6PSC_Pos) & HRTIM_ADCPS2_AD6PSC));
 800372e:	6818      	ldr	r0, [r3, #0]
 8003730:	f8d0 1404 	ldr.w	r1, [r0, #1028]	@ 0x404
 8003734:	f362 0104 	bfi	r1, r2, #0, #5
 8003738:	f8c0 1404 	str.w	r1, [r0, #1028]	@ 0x404
      break;
 800373c:	e7c1      	b.n	80036c2 <HAL_HRTIM_ADCPostScalerConfig+0x86>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS1, HRTIM_ADCPS1_AD5PSC, ((Postscaler << HRTIM_ADCPS1_AD5PSC_Pos) & HRTIM_ADCPS1_AD5PSC));
 800373e:	6818      	ldr	r0, [r3, #0]
 8003740:	f8d0 1400 	ldr.w	r1, [r0, #1024]	@ 0x400
 8003744:	f362 611c 	bfi	r1, r2, #24, #5
 8003748:	f8c0 1400 	str.w	r1, [r0, #1024]	@ 0x400
      break;
 800374c:	e7b9      	b.n	80036c2 <HAL_HRTIM_ADCPostScalerConfig+0x86>
    return HAL_BUSY;
 800374e:	2002      	movs	r0, #2
 8003750:	4770      	bx	lr
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD9PSC, ((Postscaler << HRTIM_ADCPS2_AD9PSC_Pos) & HRTIM_ADCPS2_AD9PSC));
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	f8d0 1404 	ldr.w	r1, [r0, #1028]	@ 0x404
 8003758:	f362 4196 	bfi	r1, r2, #18, #5
 800375c:	f8c0 1404 	str.w	r1, [r0, #1028]	@ 0x404
      break;
 8003760:	e7af      	b.n	80036c2 <HAL_HRTIM_ADCPostScalerConfig+0x86>
      MODIFY_REG(hhrtim->Instance->sCommonRegs.ADCPS2, HRTIM_ADCPS2_AD7PSC, ((Postscaler << HRTIM_ADCPS2_AD7PSC_Pos) & HRTIM_ADCPS2_AD7PSC));
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	f8d0 1404 	ldr.w	r1, [r0, #1028]	@ 0x404
 8003768:	f362 118a 	bfi	r1, r2, #6, #5
 800376c:	f8c0 1404 	str.w	r1, [r0, #1028]	@ 0x404
      break;
 8003770:	e7a7      	b.n	80036c2 <HAL_HRTIM_ADCPostScalerConfig+0x86>
 8003772:	bf00      	nop

08003774 <HAL_HRTIM_RollOverModeConfig>:
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003774:	f890 c0dd 	ldrb.w	ip, [r0, #221]	@ 0xdd
 8003778:	f1bc 0f02 	cmp.w	ip, #2
{
 800377c:	4603      	mov	r3, r0
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800377e:	fa5f f08c 	uxtb.w	r0, ip
 8003782:	d020      	beq.n	80037c6 <HAL_HRTIM_RollOverModeConfig+0x52>
  __HAL_LOCK(hhrtim);
 8003784:	f893 00dc 	ldrb.w	r0, [r3, #220]	@ 0xdc
 8003788:	2801      	cmp	r0, #1
 800378a:	d01b      	beq.n	80037c4 <HAL_HRTIM_RollOverModeConfig+0x50>
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 800378c:	6818      	ldr	r0, [r3, #0]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800378e:	f04f 0c02 	mov.w	ip, #2
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8003792:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003796:	f883 c0dd 	strb.w	ip, [r3, #221]	@ 0xdd
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 800379a:	f8d1 00ec 	ldr.w	r0, [r1, #236]	@ 0xec
  if ((hrtim_timcr2 & HRTIM_TIMCR2_UDM) != 0U)
 800379e:	f010 0f10 	tst.w	r0, #16
 80037a2:	d008      	beq.n	80037b6 <HAL_HRTIM_RollOverModeConfig+0x42>
    hrtim_timcr2 |= pRollOverMode & (HRTIM_TIMCR2_ROM | HRTIM_TIMCR2_OUTROM |
 80037a4:	f64f 7cc0 	movw	ip, #65472	@ 0xffc0
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_ROM | HRTIM_TIMCR2_OUTROM |
 80037a8:	f36f 108f 	bfc	r0, #6, #10
    hrtim_timcr2 |= pRollOverMode & (HRTIM_TIMCR2_ROM | HRTIM_TIMCR2_OUTROM |
 80037ac:	ea02 020c 	and.w	r2, r2, ip
 80037b0:	4302      	orrs	r2, r0
    hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2 = hrtim_timcr2;
 80037b2:	f8c1 20ec 	str.w	r2, [r1, #236]	@ 0xec
  __HAL_UNLOCK(hhrtim);
 80037b6:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 80037be:	f883 00dc 	strb.w	r0, [r3, #220]	@ 0xdc
  return HAL_OK;
 80037c2:	4770      	bx	lr
    return HAL_BUSY;
 80037c4:	2002      	movs	r0, #2
}
 80037c6:	4770      	bx	lr

080037c8 <HAL_HRTIM_WaveformTimerConfig>:
{
 80037c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80037cc:	f890 30dd 	ldrb.w	r3, [r0, #221]	@ 0xdd
 80037d0:	2b02      	cmp	r3, #2
{
 80037d2:	4605      	mov	r5, r0
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80037d4:	b2d8      	uxtb	r0, r3
 80037d6:	d069      	beq.n	80038ac <HAL_HRTIM_WaveformTimerConfig+0xe4>
  __HAL_LOCK(hhrtim);
 80037d8:	f895 30dc 	ldrb.w	r3, [r5, #220]	@ 0xdc
 80037dc:	2b01      	cmp	r3, #1
 80037de:	f000 813c 	beq.w	8003a5a <HAL_HRTIM_WaveformTimerConfig+0x292>
 80037e2:	4614      	mov	r4, r2
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80037e4:	2302      	movs	r3, #2
  __HAL_LOCK(hhrtim);
 80037e6:	2201      	movs	r2, #1
 80037e8:	f885 20dc 	strb.w	r2, [r5, #220]	@ 0xdc
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80037ec:	f885 30dd 	strb.w	r3, [r5, #221]	@ 0xdd
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80037f0:	2906      	cmp	r1, #6
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80037f2:	682a      	ldr	r2, [r5, #0]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80037f4:	6960      	ldr	r0, [r4, #20]
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80037f6:	f000 80c5 	beq.w	8003984 <HAL_HRTIM_WaveformTimerConfig+0x1bc>
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 80037fa:	eb02 16c1 	add.w	r6, r2, r1, lsl #7
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 80037fe:	2820      	cmp	r0, #32
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8003800:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8003804:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003808:	f8c6 3080 	str.w	r3, [r6, #128]	@ 0x80
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800380c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8003810:	f8d6 a0e8 	ldr.w	sl, [r6, #232]	@ 0xe8
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8003814:	f023 0e20 	bic.w	lr, r3, #32
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8003818:	ea4f 1bc1 	mov.w	fp, r1, lsl #7
 800381c:	f8d6 30e4 	ldr.w	r3, [r6, #228]	@ 0xe4
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003820:	f8d2 c3a0 	ldr.w	ip, [r2, #928]	@ 0x3a0
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8003824:	ea4e 0e00 	orr.w	lr, lr, r0
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8003828:	d042      	beq.n	80038b0 <HAL_HRTIM_WaveformTimerConfig+0xe8>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 800382a:	69a0      	ldr	r0, [r4, #24]
 800382c:	2802      	cmp	r0, #2
 800382e:	d03f      	beq.n	80038b0 <HAL_HRTIM_WaveformTimerConfig+0xe8>
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 8003830:	2803      	cmp	r0, #3
 8003832:	f000 810d 	beq.w	8003a50 <HAL_HRTIM_WaveformTimerConfig+0x288>
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 8003836:	2804      	cmp	r0, #4
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_0);
 8003838:	bf06      	itte	eq
 800383a:	f02e 0e80 	biceq.w	lr, lr, #128	@ 0x80
 800383e:	f44e 7e80 	orreq.w	lr, lr, #256	@ 0x100
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 8003842:	f42e 7ed0 	bicne.w	lr, lr, #416	@ 0x1a0
 8003846:	e037      	b.n	80038b8 <HAL_HRTIM_WaveformTimerConfig+0xf0>
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 8003848:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 800384a:	f42c 1c00 	bic.w	ip, ip, #2097152	@ 0x200000
      hrtim_bmcr |= (pTimerCfg->BurstMode << 5U);
 800384e:	ea4c 1c43 	orr.w	ip, ip, r3, lsl #5
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8003852:	4493      	add	fp, r2
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8003854:	f8c6 8080 	str.w	r8, [r6, #128]	@ 0x80
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8003858:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 800385c:	f8cb a0e8 	str.w	sl, [fp, #232]	@ 0xe8
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8003860:	f8cb 00e4 	str.w	r0, [fp, #228]	@ 0xe4
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8003864:	f8cb e0d4 	str.w	lr, [fp, #212]	@ 0xd4
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8003868:	f8c2 c3a0 	str.w	ip, [r2, #928]	@ 0x3a0
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800386c:	e9d4 9801 	ldrd	r9, r8, [r4, #4]
 8003870:	e9d4 ec03 	ldrd	lr, ip, [r4, #12]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	3320      	adds	r3, #32
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8003878:	6820      	ldr	r0, [r4, #0]
 800387a:	50e8      	str	r0, [r5, r3]
 800387c:	18ea      	adds	r2, r5, r3
 800387e:	e9c2 9801 	strd	r9, r8, [r2, #4]
 8003882:	e9c2 ec03 	strd	lr, ip, [r2, #12]
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8003886:	4628      	mov	r0, r5
 8003888:	f7ff fa1c 	bl	8002cc4 <HRTIM_ForceRegistersUpdate>
      && (pTimerCfg->UpdateGating == HRTIM_UPDATEGATING_INDEPENDENT))
 800388c:	b947      	cbnz	r7, 80038a0 <HAL_HRTIM_WaveformTimerConfig+0xd8>
    MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR,
 800388e:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8003892:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8003894:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003898:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
 800389c:	f8c6 3080 	str.w	r3, [r6, #128]	@ 0x80
  __HAL_UNLOCK(hhrtim);
 80038a0:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80038a2:	2301      	movs	r3, #1
 80038a4:	f885 30dd 	strb.w	r3, [r5, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 80038a8:	f885 00dc 	strb.w	r0, [r5, #220]	@ 0xdc
}
 80038ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD);
 80038b0:	f42e 7ec0 	bic.w	lr, lr, #384	@ 0x180
    hrtim_timcr |= (HRTIM_TIMCR_HALF);
 80038b4:	f04e 0e20 	orr.w	lr, lr, #32
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80038b8:	69e0      	ldr	r0, [r4, #28]
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80038ba:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80038bc:	f8d4 9048 	ldr.w	r9, [r4, #72]	@ 0x48
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80038c0:	f42e 6e00 	bic.w	lr, lr, #2048	@ 0x800
  hrtim_timcr |= pTimerCfg->StartOnSync;
 80038c4:	ea4e 0e00 	orr.w	lr, lr, r0
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80038c8:	6a20      	ldr	r0, [r4, #32]
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 80038ca:	f42e 6e80 	bic.w	lr, lr, #1024	@ 0x400
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 80038ce:	ea4e 0e00 	orr.w	lr, lr, r0
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80038d2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 80038d4:	f02e 6ec0 	bic.w	lr, lr, #100663296	@ 0x6000000
  hrtim_timcr |= pTimerCfg->DACSynchro;
 80038d8:	ea4e 0e00 	orr.w	lr, lr, r0
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80038dc:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 80038de:	f02e 6e00 	bic.w	lr, lr, #134217728	@ 0x8000000
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 80038e2:	ea4e 0e00 	orr.w	lr, lr, r0
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 80038e6:	f02e 4e70 	bic.w	lr, lr, #4026531840	@ 0xf0000000
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80038ea:	6b60      	ldr	r0, [r4, #52]	@ 0x34
  hrtim_timcr |= pTimerCfg->UpdateGating;
 80038ec:	ea4e 0e07 	orr.w	lr, lr, r7
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 80038f0:	f42e 3e00 	bic.w	lr, lr, #131072	@ 0x20000
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 80038f4:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 80038f8:	bf08      	it	eq
 80038fa:	f44e 3e00 	orreq.w	lr, lr, #131072	@ 0x20000
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 80038fe:	f02e 0840 	bic.w	r8, lr, #64	@ 0x40
  hrtim_timcr |= pTimerCfg->PushPull;
 8003902:	f8d4 e038 	ldr.w	lr, [r4, #56]	@ 0x38
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8003906:	6da0      	ldr	r0, [r4, #88]	@ 0x58
  hrtim_timcr |= pTimerCfg->PushPull;
 8003908:	ea48 080e 	orr.w	r8, r8, lr
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 800390c:	f428 2880 	bic.w	r8, r8, #262144	@ 0x40000
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8003910:	ea48 0800 	orr.w	r8, r8, r0
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8003914:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8003916:	f028 78fc 	bic.w	r8, r8, #33030144	@ 0x1f80000
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 800391a:	f360 0a05 	bfi	sl, r0, #0, #6
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 800391e:	6d20      	ldr	r0, [r4, #80]	@ 0x50
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8003920:	f428 3880 	bic.w	r8, r8, #65536	@ 0x10000
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8003924:	ea48 0800 	orr.w	r8, r8, r0
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8003928:	6c20      	ldr	r0, [r4, #64]	@ 0x40
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 800392a:	f02a 4a00 	bic.w	sl, sl, #2147483648	@ 0x80000000
  hrtim_timfltr |= pTimerCfg->FaultLock;
 800392e:	ea4a 0a00 	orr.w	sl, sl, r0
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8003932:	6c60      	ldr	r0, [r4, #68]	@ 0x44
  hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8003934:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
  hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8003938:	4303      	orrs	r3, r0
  if (((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 800393a:	f429 5080 	bic.w	r0, r9, #4096	@ 0x1000
 800393e:	f5b0 6f60 	cmp.w	r0, #3584	@ 0xe00
 8003942:	d01b      	beq.n	800397c <HAL_HRTIM_WaveformTimerConfig+0x1b4>
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT | HRTIM_OUTR_DLYPRTEN);
 8003944:	f423 53f0 	bic.w	r3, r3, #7680	@ 0x1e00
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8003948:	ea49 0303 	orr.w	r3, r9, r3
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 800394c:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 800394e:	f8d4 e054 	ldr.w	lr, [r4, #84]	@ 0x54
  hrtim_timoutr &= ~(HRTIM_OUTR_BIAR);
 8003952:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  hrtim_timoutr |= (pTimerCfg->BalancedIdleAutomaticResume);
 8003956:	4318      	orrs	r0, r3
  switch (TimerIdx)
 8003958:	2905      	cmp	r1, #5
 800395a:	f63f af7a 	bhi.w	8003852 <HAL_HRTIM_WaveformTimerConfig+0x8a>
 800395e:	a301      	add	r3, pc, #4	@ (adr r3, 8003964 <HAL_HRTIM_WaveformTimerConfig+0x19c>)
 8003960:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8003964:	08003a15 	.word	0x08003a15
 8003968:	08003a45 	.word	0x08003a45
 800396c:	08003a39 	.word	0x08003a39
 8003970:	08003a2d 	.word	0x08003a2d
 8003974:	08003849 	.word	0x08003849
 8003978:	08003a21 	.word	0x08003a21
      || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 800397c:	f1be 0f40 	cmp.w	lr, #64	@ 0x40
 8003980:	d1e4      	bne.n	800394c <HAL_HRTIM_WaveformTimerConfig+0x184>
 8003982:	e7df      	b.n	8003944 <HAL_HRTIM_WaveformTimerConfig+0x17c>
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8003984:	6816      	ldr	r6, [r2, #0]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8003986:	f8d2 13a0 	ldr.w	r1, [r2, #928]	@ 0x3a0
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 800398a:	f026 0620 	bic.w	r6, r6, #32
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 800398e:	4306      	orrs	r6, r0
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8003990:	2820      	cmp	r0, #32
  hrtim_mcr &= ~(HRTIM_MCR_INTLVD);
 8003992:	f026 03c0 	bic.w	r3, r6, #192	@ 0xc0
  if ((pTimerCfg->HalfModeEnable == HRTIM_HALFMODE_ENABLED)
 8003996:	d03a      	beq.n	8003a0e <HAL_HRTIM_WaveformTimerConfig+0x246>
      || (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_DUAL))
 8003998:	69a0      	ldr	r0, [r4, #24]
 800399a:	2802      	cmp	r0, #2
 800399c:	d037      	beq.n	8003a0e <HAL_HRTIM_WaveformTimerConfig+0x246>
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_TRIPLE)
 800399e:	2803      	cmp	r0, #3
 80039a0:	d05e      	beq.n	8003a60 <HAL_HRTIM_WaveformTimerConfig+0x298>
  else if (pTimerCfg->InterleavedMode == HRTIM_INTERLEAVED_MODE_QUAD)
 80039a2:	2804      	cmp	r0, #4
    hrtim_mcr |= (HRTIM_MCR_INTLVD_1);
 80039a4:	bf0c      	ite	eq
 80039a6:	f043 0380 	orreq.w	r3, r3, #128	@ 0x80
    hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80039aa:	f026 03e0 	bicne.w	r3, r6, #224	@ 0xe0
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80039ae:	69e0      	ldr	r0, [r4, #28]
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80039b0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80039b4:	4303      	orrs	r3, r0
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80039b6:	6a20      	ldr	r0, [r4, #32]
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80039b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80039bc:	4303      	orrs	r3, r0
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80039be:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80039c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80039c4:	4303      	orrs	r3, r0
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80039c6:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80039c8:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 80039cc:	4303      	orrs	r3, r0
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80039ce:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 80039d0:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 80039d4:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80039d8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 80039da:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 80039de:	4303      	orrs	r3, r0
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80039e0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80039e2:	6013      	str	r3, [r2, #0]
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 80039e4:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
  hrtim_bmcr |= pTimerCfg->BurstMode;
 80039e8:	4301      	orrs	r1, r0
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80039ea:	f8c2 13a0 	str.w	r1, [r2, #928]	@ 0x3a0
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 80039ee:	e9d4 0100 	ldrd	r0, r1, [r4]
 80039f2:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 80039f6:	6924      	ldr	r4, [r4, #16]
 80039f8:	f8c5 40d8 	str.w	r4, [r5, #216]	@ 0xd8
 80039fc:	e9c5 0132 	strd	r0, r1, [r5, #200]	@ 0xc8
 8003a00:	e9c5 2334 	strd	r2, r3, [r5, #208]	@ 0xd0
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8003a04:	2106      	movs	r1, #6
 8003a06:	4628      	mov	r0, r5
 8003a08:	f7ff f95c 	bl	8002cc4 <HRTIM_ForceRegistersUpdate>
  if ((TimerIdx != HRTIM_TIMERINDEX_MASTER)
 8003a0c:	e748      	b.n	80038a0 <HAL_HRTIM_WaveformTimerConfig+0xd8>
    hrtim_mcr |= (HRTIM_MCR_HALF);
 8003a0e:	f043 0320 	orr.w	r3, r3, #32
 8003a12:	e7cc      	b.n	80039ae <HAL_HRTIM_WaveformTimerConfig+0x1e6>
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 8003a14:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8003a16:	f42c 3c00 	bic.w	ip, ip, #131072	@ 0x20000
      hrtim_bmcr |= (pTimerCfg->BurstMode << 1U);
 8003a1a:	ea4c 0c43 	orr.w	ip, ip, r3, lsl #1
      break;
 8003a1e:	e718      	b.n	8003852 <HAL_HRTIM_WaveformTimerConfig+0x8a>
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 8003a20:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TFBM);
 8003a22:	f42c 0c80 	bic.w	ip, ip, #4194304	@ 0x400000
      hrtim_bmcr |= (pTimerCfg->BurstMode << 6U);
 8003a26:	ea4c 1c83 	orr.w	ip, ip, r3, lsl #6
      break;
 8003a2a:	e712      	b.n	8003852 <HAL_HRTIM_WaveformTimerConfig+0x8a>
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 8003a2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8003a2e:	f42c 1c80 	bic.w	ip, ip, #1048576	@ 0x100000
      hrtim_bmcr |= (pTimerCfg->BurstMode << 4U);
 8003a32:	ea4c 1c03 	orr.w	ip, ip, r3, lsl #4
      break;
 8003a36:	e70c      	b.n	8003852 <HAL_HRTIM_WaveformTimerConfig+0x8a>
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 8003a38:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8003a3a:	f42c 2c00 	bic.w	ip, ip, #524288	@ 0x80000
      hrtim_bmcr |= (pTimerCfg->BurstMode << 3U);
 8003a3e:	ea4c 0cc3 	orr.w	ip, ip, r3, lsl #3
      break;
 8003a42:	e706      	b.n	8003852 <HAL_HRTIM_WaveformTimerConfig+0x8a>
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 8003a44:	6b23      	ldr	r3, [r4, #48]	@ 0x30
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8003a46:	f42c 2c80 	bic.w	ip, ip, #262144	@ 0x40000
      hrtim_bmcr |= (pTimerCfg->BurstMode << 2U);
 8003a4a:	ea4c 0c83 	orr.w	ip, ip, r3, lsl #2
      break;
 8003a4e:	e700      	b.n	8003852 <HAL_HRTIM_WaveformTimerConfig+0x8a>
    hrtim_timcr &= ~(HRTIM_TIMCR_INTLVD_1);
 8003a50:	f42e 7e80 	bic.w	lr, lr, #256	@ 0x100
 8003a54:	f04e 0e80 	orr.w	lr, lr, #128	@ 0x80
 8003a58:	e72e      	b.n	80038b8 <HAL_HRTIM_WaveformTimerConfig+0xf0>
    return HAL_BUSY;
 8003a5a:	2002      	movs	r0, #2
}
 8003a5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hrtim_mcr |= (HRTIM_MCR_INTLVD_0);
 8003a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
    hrtim_mcr &= ~(HRTIM_MCR_INTLVD_1);
 8003a64:	e7a3      	b.n	80039ae <HAL_HRTIM_WaveformTimerConfig+0x1e6>
 8003a66:	bf00      	nop

08003a68 <HAL_HRTIM_WaveformTimerControl>:
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003a68:	f890 30dd 	ldrb.w	r3, [r0, #221]	@ 0xdd
 8003a6c:	2b02      	cmp	r3, #2
{
 8003a6e:	4684      	mov	ip, r0
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003a70:	b2d8      	uxtb	r0, r3
 8003a72:	d03c      	beq.n	8003aee <HAL_HRTIM_WaveformTimerControl+0x86>
  __HAL_LOCK(hhrtim);
 8003a74:	f89c 30dc 	ldrb.w	r3, [ip, #220]	@ 0xdc
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d039      	beq.n	8003af0 <HAL_HRTIM_WaveformTimerControl+0x88>
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8003a7c:	f8dc 0000 	ldr.w	r0, [ip]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003a80:	2302      	movs	r3, #2
{
 8003a82:	b510      	push	{r4, lr}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003a84:	f88c 30dd 	strb.w	r3, [ip, #221]	@ 0xdd
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8003a88:	eb00 13c1 	add.w	r3, r0, r1, lsl #7
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8003a8c:	6814      	ldr	r4, [r2, #0]
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8003a8e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_UDM);
 8003a92:	f023 0310 	bic.w	r3, r3, #16
  hrtim_timcr2 |= (pTimerCtl->UpDownMode << HRTIM_TIMCR2_UDM_Pos) ;
 8003a96:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8003a9a:	6854      	ldr	r4, [r2, #4]
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_TRGHLF);
 8003a9c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
  hrtim_timcr2 |= pTimerCtl->TrigHalf;
 8003aa0:	4323      	orrs	r3, r4
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8003aa2:	68d4      	ldr	r4, [r2, #12]
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP1);
 8003aa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
  hrtim_timcr2 |= pTimerCtl->GreaterCMP1;
 8003aa8:	4323      	orrs	r3, r4
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8003aaa:	6894      	ldr	r4, [r2, #8]
  hrtim_timcr2 &= ~(HRTIM_TIMCR2_GTCMP3);
 8003aac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
  hrtim_timcr2 |= pTimerCtl->GreaterCMP3;
 8003ab0:	4323      	orrs	r3, r4
  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8003ab2:	6994      	ldr	r4, [r2, #24]
 8003ab4:	2c01      	cmp	r4, #1
  hrtim_timcr2 = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2;
 8003ab6:	ea4f 1ec1 	mov.w	lr, r1, lsl #7
  if (pTimerCtl->DualChannelDacEnable == HRTIM_TIMER_DCDE_ENABLED)
 8003aba:	d00d      	beq.n	8003ad8 <HAL_HRTIM_WaveformTimerControl+0x70>
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR2  = hrtim_timcr2;
 8003abc:	4470      	add	r0, lr
 8003abe:	f8c0 30ec 	str.w	r3, [r0, #236]	@ 0xec
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8003ac2:	4660      	mov	r0, ip
 8003ac4:	f7ff f8fe 	bl	8002cc4 <HRTIM_ForceRegistersUpdate>
  __HAL_UNLOCK(hhrtim);
 8003ac8:	2300      	movs	r3, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003aca:	2201      	movs	r2, #1
 8003acc:	f880 20dd 	strb.w	r2, [r0, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 8003ad0:	f880 30dc 	strb.w	r3, [r0, #220]	@ 0xdc
  return HAL_OK;
 8003ad4:	4618      	mov	r0, r3
}
 8003ad6:	bd10      	pop	{r4, pc}
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8003ad8:	6914      	ldr	r4, [r2, #16]
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8003ada:	6952      	ldr	r2, [r2, #20]
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDR);
 8003adc:	f023 0304 	bic.w	r3, r3, #4
    hrtim_timcr2 |= pTimerCtl->DualChannelDacReset;
 8003ae0:	4323      	orrs	r3, r4
    hrtim_timcr2 &= ~(HRTIM_TIMCR2_DCDS);
 8003ae2:	f023 0302 	bic.w	r3, r3, #2
    hrtim_timcr2 |= pTimerCtl->DualChannelDacStep;
 8003ae6:	4313      	orrs	r3, r2
    hrtim_timcr2 |= pTimerCtl->DualChannelDacEnable;
 8003ae8:	f043 0301 	orr.w	r3, r3, #1
 8003aec:	e7e6      	b.n	8003abc <HAL_HRTIM_WaveformTimerControl+0x54>
}
 8003aee:	4770      	bx	lr
    return HAL_BUSY;
 8003af0:	2002      	movs	r0, #2
 8003af2:	4770      	bx	lr

08003af4 <HAL_HRTIM_DeadTimeConfig>:
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003af4:	f890 30dd 	ldrb.w	r3, [r0, #221]	@ 0xdd
 8003af8:	2b02      	cmp	r3, #2
{
 8003afa:	4684      	mov	ip, r0
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003afc:	b2d8      	uxtb	r0, r3
 8003afe:	d03f      	beq.n	8003b80 <HAL_HRTIM_DeadTimeConfig+0x8c>
  __HAL_LOCK(hhrtim);
 8003b00:	f89c 30dc 	ldrb.w	r3, [ip, #220]	@ 0xdc
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d03c      	beq.n	8003b82 <HAL_HRTIM_DeadTimeConfig+0x8e>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003b08:	2302      	movs	r3, #2
{
 8003b0a:	b510      	push	{r4, lr}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003b0c:	f88c 30dd 	strb.w	r3, [ip, #221]	@ 0xdd
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8003b10:	e9d2 0300 	ldrd	r0, r3, [r2]
 8003b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
  hrtim_dtr  = (pDeadTimeCfg->Prescaler & HRTIM_DTR_DTPRSC);
 8003b18:	f400 50e0 	and.w	r0, r0, #7168	@ 0x1c00
  hrtim_dtr |= (pDeadTimeCfg->RisingValue & HRTIM_DTR_DTR);
 8003b1c:	4318      	orrs	r0, r3
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 8003b1e:	6893      	ldr	r3, [r2, #8]
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8003b20:	6954      	ldr	r4, [r2, #20]
  hrtim_dtr |= (pDeadTimeCfg->RisingSign & HRTIM_DTR_SDTR);
 8003b22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b26:	4318      	orrs	r0, r3
  hrtim_dtr |= (pDeadTimeCfg->RisingSignLock & HRTIM_DTR_DTRSLK);
 8003b28:	6913      	ldr	r3, [r2, #16]
 8003b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b2e:	4318      	orrs	r0, r3
  hrtim_dtr |= (pDeadTimeCfg->RisingLock & HRTIM_DTR_DTRLK);
 8003b30:	68d3      	ldr	r3, [r2, #12]
 8003b32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b36:	4303      	orrs	r3, r0
  hrtim_dtr |= (pDeadTimeCfg->FallingSign & HRTIM_DTR_SDTF);
 8003b38:	6990      	ldr	r0, [r2, #24]
 8003b3a:	f000 7000 	and.w	r0, r0, #33554432	@ 0x2000000
 8003b3e:	4303      	orrs	r3, r0
  hrtim_dtr |= (pDeadTimeCfg->FallingSignLock & HRTIM_DTR_DTFSLK);
 8003b40:	6a10      	ldr	r0, [r2, #32]
 8003b42:	f000 4080 	and.w	r0, r0, #1073741824	@ 0x40000000
 8003b46:	4303      	orrs	r3, r0
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8003b48:	69d0      	ldr	r0, [r2, #28]
 8003b4a:	f000 4200 	and.w	r2, r0, #2147483648	@ 0x80000000
 8003b4e:	4313      	orrs	r3, r2
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8003b50:	f8dc 2000 	ldr.w	r2, [ip]
 8003b54:	eb02 11c1 	add.w	r1, r2, r1, lsl #7
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8003b58:	4a0b      	ldr	r2, [pc, #44]	@ (8003b88 <HAL_HRTIM_DeadTimeConfig+0x94>)
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8003b5a:	f8d1 00b8 	ldr.w	r0, [r1, #184]	@ 0xb8
  hrtim_dtr |= ((pDeadTimeCfg->FallingValue << 16U) & HRTIM_DTR_DTF);
 8003b5e:	ea02 4204 	and.w	r2, r2, r4, lsl #16
  hrtim_dtr |= (pDeadTimeCfg->FallingLock & HRTIM_DTR_DTFLK);
 8003b62:	4313      	orrs	r3, r2
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8003b64:	4a09      	ldr	r2, [pc, #36]	@ (8003b8c <HAL_HRTIM_DeadTimeConfig+0x98>)
 8003b66:	4002      	ands	r2, r0
  __HAL_UNLOCK(hhrtim);
 8003b68:	f04f 0e00 	mov.w	lr, #0
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8003b6c:	4313      	orrs	r3, r2
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003b6e:	2201      	movs	r2, #1
  MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR, (
 8003b70:	f8c1 30b8 	str.w	r3, [r1, #184]	@ 0xb8
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003b74:	f88c 20dd 	strb.w	r2, [ip, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 8003b78:	f88c e0dc 	strb.w	lr, [ip, #220]	@ 0xdc
  return HAL_OK;
 8003b7c:	4670      	mov	r0, lr
}
 8003b7e:	bd10      	pop	{r4, pc}
 8003b80:	4770      	bx	lr
    return HAL_BUSY;
 8003b82:	2002      	movs	r0, #2
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	01ff0000 	.word	0x01ff0000
 8003b8c:	3c002000 	.word	0x3c002000

08003b90 <HAL_HRTIM_WaveformCompareConfig>:
{
 8003b90:	b500      	push	{lr}
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003b92:	f890 e0dd 	ldrb.w	lr, [r0, #221]	@ 0xdd
 8003b96:	f1be 0f02 	cmp.w	lr, #2
{
 8003b9a:	4684      	mov	ip, r0
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003b9c:	fa5f f08e 	uxtb.w	r0, lr
 8003ba0:	d027      	beq.n	8003bf2 <HAL_HRTIM_WaveformCompareConfig+0x62>
  __HAL_LOCK(hhrtim);
 8003ba2:	f89c 00dc 	ldrb.w	r0, [ip, #220]	@ 0xdc
 8003ba6:	2801      	cmp	r0, #1
 8003ba8:	f000 80a0 	beq.w	8003cec <HAL_HRTIM_WaveformCompareConfig+0x15c>
 8003bac:	2001      	movs	r0, #1
 8003bae:	f88c 00dc 	strb.w	r0, [ip, #220]	@ 0xdc
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003bb2:	2906      	cmp	r1, #6
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003bb4:	f04f 0002 	mov.w	r0, #2
 8003bb8:	f88c 00dd 	strb.w	r0, [ip, #221]	@ 0xdd
    switch (CompareUnit)
 8003bbc:	f102 32ff 	add.w	r2, r2, #4294967295
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8003bc0:	d019      	beq.n	8003bf6 <HAL_HRTIM_WaveformCompareConfig+0x66>
    switch (CompareUnit)
 8003bc2:	2a07      	cmp	r2, #7
 8003bc4:	d805      	bhi.n	8003bd2 <HAL_HRTIM_WaveformCompareConfig+0x42>
 8003bc6:	e8df f002 	tbb	[pc, r2]
 8003bca:	612b      	.short	0x612b
 8003bcc:	04043904 	.word	0x04043904
 8003bd0:	4104      	.short	0x4104
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003bd2:	2207      	movs	r2, #7
        __HAL_UNLOCK(hhrtim);
 8003bd4:	2300      	movs	r3, #0
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8003bd6:	f88c 20dd 	strb.w	r2, [ip, #221]	@ 0xdd
        __HAL_UNLOCK(hhrtim);
 8003bda:	f88c 30dc 	strb.w	r3, [ip, #220]	@ 0xdc
    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003bde:	f89c 30dd 	ldrb.w	r3, [ip, #221]	@ 0xdd
 8003be2:	2b07      	cmp	r3, #7
 8003be4:	d027      	beq.n	8003c36 <HAL_HRTIM_WaveformCompareConfig+0xa6>
  __HAL_UNLOCK(hhrtim);
 8003be6:	2000      	movs	r0, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003be8:	2301      	movs	r3, #1
 8003bea:	f88c 30dd 	strb.w	r3, [ip, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 8003bee:	f88c 00dc 	strb.w	r0, [ip, #220]	@ 0xdc
}
 8003bf2:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (CompareUnit)
 8003bf6:	2a07      	cmp	r2, #7
 8003bf8:	d8eb      	bhi.n	8003bd2 <HAL_HRTIM_WaveformCompareConfig+0x42>
 8003bfa:	a101      	add	r1, pc, #4	@ (adr r1, 8003c00 <HAL_HRTIM_WaveformCompareConfig+0x70>)
 8003bfc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003c00:	08003cd9 	.word	0x08003cd9
 8003c04:	08003ccf 	.word	0x08003ccf
 8003c08:	08003bd3 	.word	0x08003bd3
 8003c0c:	08003ce3 	.word	0x08003ce3
 8003c10:	08003bd3 	.word	0x08003bd3
 8003c14:	08003bd3 	.word	0x08003bd3
 8003c18:	08003bd3 	.word	0x08003bd3
 8003c1c:	08003cc5 	.word	0x08003cc5
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8003c20:	f8dc 2000 	ldr.w	r2, [ip]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8003c2a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if (hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8003c2e:	f89c 30dd 	ldrb.w	r3, [ip, #221]	@ 0xdd
 8003c32:	2b07      	cmp	r3, #7
 8003c34:	d1d7      	bne.n	8003be6 <HAL_HRTIM_WaveformCompareConfig+0x56>
      return HAL_ERROR;
 8003c36:	2001      	movs	r0, #1
}
 8003c38:	f85d fb04 	ldr.w	pc, [sp], #4
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8003c3c:	f8dc 2000 	ldr.w	r2, [ip]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
 8003c46:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
        break;
 8003c4a:	e7c8      	b.n	8003bde <HAL_HRTIM_WaveformCompareConfig+0x4e>
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8003c4c:	f8dc 2000 	ldr.w	r2, [ip]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003c56:	6859      	ldr	r1, [r3, #4]
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8003c58:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003c5c:	2900      	cmp	r1, #0
 8003c5e:	d04f      	beq.n	8003d00 <HAL_HRTIM_WaveformCompareConfig+0x170>
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8003c60:	f8d2 0080 	ldr.w	r0, [r2, #128]	@ 0x80
 8003c64:	f420 4040 	bic.w	r0, r0, #49152	@ 0xc000
 8003c68:	f8c2 0080 	str.w	r0, [r2, #128]	@ 0x80
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8003c6c:	f8d2 0080 	ldr.w	r0, [r2, #128]	@ 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003c70:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8003c74:	ea40 0081 	orr.w	r0, r0, r1, lsl #2
 8003c78:	f8c2 0080 	str.w	r0, [r2, #128]	@ 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003c7c:	d01e      	beq.n	8003cbc <HAL_HRTIM_WaveformCompareConfig+0x12c>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8003c7e:	f5b1 5f40 	cmp.w	r1, #12288	@ 0x3000
 8003c82:	d1ac      	bne.n	8003bde <HAL_HRTIM_WaveformCompareConfig+0x4e>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8003c8a:	e7a8      	b.n	8003bde <HAL_HRTIM_WaveformCompareConfig+0x4e>
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8003c8c:	f8dc 2000 	ldr.w	r2, [ip]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003c96:	6859      	ldr	r1, [r3, #4]
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8003c98:	f8c2 00a4 	str.w	r0, [r2, #164]	@ 0xa4
        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8003c9c:	b349      	cbz	r1, 8003cf2 <HAL_HRTIM_WaveformCompareConfig+0x162>
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8003c9e:	f8d2 0080 	ldr.w	r0, [r2, #128]	@ 0x80
 8003ca2:	f420 5040 	bic.w	r0, r0, #12288	@ 0x3000
 8003ca6:	f8c2 0080 	str.w	r0, [r2, #128]	@ 0x80
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8003caa:	f8d2 0080 	ldr.w	r0, [r2, #128]	@ 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003cae:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8003cb2:	ea40 0001 	orr.w	r0, r0, r1
 8003cb6:	f8c2 0080 	str.w	r0, [r2, #128]	@ 0x80
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8003cba:	d1e0      	bne.n	8003c7e <HAL_HRTIM_WaveformCompareConfig+0xee>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003cc2:	e78c      	b.n	8003bde <HAL_HRTIM_WaveformCompareConfig+0x4e>
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8003cc4:	f8dc 2000 	ldr.w	r2, [ip]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8003ccc:	e787      	b.n	8003bde <HAL_HRTIM_WaveformCompareConfig+0x4e>
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8003cce:	f8dc 2000 	ldr.w	r2, [ip]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6253      	str	r3, [r2, #36]	@ 0x24
        break;
 8003cd6:	e782      	b.n	8003bde <HAL_HRTIM_WaveformCompareConfig+0x4e>
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8003cd8:	f8dc 2000 	ldr.w	r2, [ip]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	61d3      	str	r3, [r2, #28]
        break;
 8003ce0:	e77d      	b.n	8003bde <HAL_HRTIM_WaveformCompareConfig+0x4e>
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8003ce2:	f8dc 2000 	ldr.w	r2, [ip]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8003cea:	e778      	b.n	8003bde <HAL_HRTIM_WaveformCompareConfig+0x4e>
    return HAL_BUSY;
 8003cec:	2002      	movs	r0, #2
}
 8003cee:	f85d fb04 	ldr.w	pc, [sp], #4
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8003cf2:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8003cf6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003cfa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003cfe:	e76e      	b.n	8003bde <HAL_HRTIM_WaveformCompareConfig+0x4e>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8003d00:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8003d04:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003d08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d0c:	e767      	b.n	8003bde <HAL_HRTIM_WaveformCompareConfig+0x4e>
 8003d0e:	bf00      	nop

08003d10 <HAL_HRTIM_WaveformOutputConfig>:
{
 8003d10:	b510      	push	{r4, lr}
  if (hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8003d12:	f890 e0dd 	ldrb.w	lr, [r0, #221]	@ 0xdd
 8003d16:	f1be 0f02 	cmp.w	lr, #2
 8003d1a:	fa5f fc8e 	uxtb.w	ip, lr
 8003d1e:	d012      	beq.n	8003d46 <HAL_HRTIM_WaveformOutputConfig+0x36>
  __HAL_LOCK(hhrtim);
 8003d20:	f890 c0dc 	ldrb.w	ip, [r0, #220]	@ 0xdc
 8003d24:	f1bc 0f01 	cmp.w	ip, #1
 8003d28:	4604      	mov	r4, r0
    return HAL_BUSY;
 8003d2a:	f04f 0c02 	mov.w	ip, #2
  __HAL_LOCK(hhrtim);
 8003d2e:	d00a      	beq.n	8003d46 <HAL_HRTIM_WaveformOutputConfig+0x36>
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003d30:	f880 c0dd 	strb.w	ip, [r0, #221]	@ 0xdd
  HRTIM_OutputConfig(hhrtim,
 8003d34:	f7fe ff5e 	bl	8002bf4 <HRTIM_OutputConfig>
  __HAL_UNLOCK(hhrtim);
 8003d38:	f04f 0c00 	mov.w	ip, #0
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 8003d42:	f884 c0dc 	strb.w	ip, [r4, #220]	@ 0xdc
}
 8003d46:	4660      	mov	r0, ip
 8003d48:	bd10      	pop	{r4, pc}
 8003d4a:	bf00      	nop

08003d4c <HAL_HRTIM_WaveformCountStart_IT>:
  __HAL_LOCK(hhrtim);
 8003d4c:	f890 30dc 	ldrb.w	r3, [r0, #220]	@ 0xdc
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d033      	beq.n	8003dbc <HAL_HRTIM_WaveformCountStart_IT+0x70>
{
 8003d54:	b570      	push	{r4, r5, r6, lr}
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003d56:	2302      	movs	r3, #2
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptRequests);
 8003d58:	6806      	ldr	r6, [r0, #0]
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8003d5a:	f880 30dd 	strb.w	r3, [r0, #221]	@ 0xdd
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptRequests);
 8003d5e:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 8003d62:	6842      	ldr	r2, [r0, #4]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c6 3390 	str.w	r3, [r6, #912]	@ 0x390
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8003d6a:	03cb      	lsls	r3, r1, #15
 8003d6c:	4686      	mov	lr, r0
 8003d6e:	d41f      	bmi.n	8003db0 <HAL_HRTIM_WaveformCountStart_IT+0x64>
 8003d70:	4c13      	ldr	r4, [pc, #76]	@ (8003dc0 <HAL_HRTIM_WaveformCountStart_IT+0x74>)
 8003d72:	4672      	mov	r2, lr
{
 8003d74:	2300      	movs	r3, #0
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8003d76:	f854 5b04 	ldr.w	r5, [r4], #4
 8003d7a:	420d      	tst	r5, r1
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8003d7c:	eb06 1cc3 	add.w	ip, r6, r3, lsl #7
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8003d80:	f103 0301 	add.w	r3, r3, #1
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8003d84:	d005      	beq.n	8003d92 <HAL_HRTIM_WaveformCountStart_IT+0x46>
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8003d86:	f8dc 508c 	ldr.w	r5, [ip, #140]	@ 0x8c
 8003d8a:	6a10      	ldr	r0, [r2, #32]
 8003d8c:	4305      	orrs	r5, r0
 8003d8e:	f8cc 508c 	str.w	r5, [ip, #140]	@ 0x8c
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8003d92:	2b06      	cmp	r3, #6
 8003d94:	f102 021c 	add.w	r2, r2, #28
 8003d98:	d1ed      	bne.n	8003d76 <HAL_HRTIM_WaveformCountStart_IT+0x2a>
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8003d9a:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hhrtim);
 8003d9c:	2200      	movs	r2, #0
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8003d9e:	430b      	orrs	r3, r1
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003da0:	2101      	movs	r1, #1
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 8003da2:	6033      	str	r3, [r6, #0]
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8003da4:	f88e 10dd 	strb.w	r1, [lr, #221]	@ 0xdd
  __HAL_UNLOCK(hhrtim);
 8003da8:	f88e 20dc 	strb.w	r2, [lr, #220]	@ 0xdc
  return HAL_OK;
 8003dac:	4610      	mov	r0, r2
}
 8003dae:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8003db0:	68f3      	ldr	r3, [r6, #12]
 8003db2:	f8d0 20c8 	ldr.w	r2, [r0, #200]	@ 0xc8
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60f3      	str	r3, [r6, #12]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8003dba:	e7d9      	b.n	8003d70 <HAL_HRTIM_WaveformCountStart_IT+0x24>
  __HAL_LOCK(hhrtim);
 8003dbc:	2002      	movs	r0, #2
}
 8003dbe:	4770      	bx	lr
 8003dc0:	080091e4 	.word	0x080091e4

08003dc4 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	d054      	beq.n	8003e72 <HAL_I2C_Init+0xae>
{
 8003dc8:	b510      	push	{r4, lr}
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dca:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003dce:	4604      	mov	r4, r0
 8003dd0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d047      	beq.n	8003e68 <HAL_I2C_Init+0xa4>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dd8:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dda:	2224      	movs	r2, #36	@ 0x24
 8003ddc:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003de0:	6819      	ldr	r1, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003de2:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8003de4:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003de8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 8003dec:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003dee:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003df0:	689a      	ldr	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003df2:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003df4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003df8:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dfa:	609a      	str	r2, [r3, #8]
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dfc:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dfe:	d009      	beq.n	8003e14 <HAL_I2C_Init+0x50>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e00:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e04:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e06:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e08:	d107      	bne.n	8003e1a <HAL_I2C_Init+0x56>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e10:	605a      	str	r2, [r3, #4]
 8003e12:	e006      	b.n	8003e22 <HAL_I2C_Init+0x5e>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e14:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e18:	609a      	str	r2, [r3, #8]
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003e1a:	685a      	ldr	r2, [r3, #4]
 8003e1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e22:	6859      	ldr	r1, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e24:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e26:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8003e2a:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8003e2e:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e30:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e32:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e34:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e36:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e38:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e3c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e40:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e42:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e44:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e46:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e48:	4301      	orrs	r1, r0
 8003e4a:	6019      	str	r1, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e4c:	6819      	ldr	r1, [r3, #0]
 8003e4e:	f041 0101 	orr.w	r1, r1, #1
 8003e52:	6019      	str	r1, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e54:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003e56:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e58:	6462      	str	r2, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e5a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e5e:	6322      	str	r2, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e60:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42

  return HAL_OK;
 8003e64:	4610      	mov	r0, r2
}
 8003e66:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003e68:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8003e6c:	f7fd fbb8 	bl	80015e0 <HAL_I2C_MspInit>
 8003e70:	e7b2      	b.n	8003dd8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8003e72:	2001      	movs	r0, #1
}
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop

08003e78 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e78:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8003e7c:	2a20      	cmp	r2, #32
 8003e7e:	d123      	bne.n	8003ec8 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003e80:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e84:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8003e88:	2a01      	cmp	r2, #1
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	d01c      	beq.n	8003ec8 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e8e:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e90:	2024      	movs	r0, #36	@ 0x24
{
 8003e92:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e94:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003e98:	6810      	ldr	r0, [r2, #0]
 8003e9a:	f020 0001 	bic.w	r0, r0, #1
 8003e9e:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ea0:	6810      	ldr	r0, [r2, #0]
 8003ea2:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003ea6:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ea8:	6810      	ldr	r0, [r2, #0]
 8003eaa:	4301      	orrs	r1, r0
 8003eac:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eae:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eb0:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8003eb4:	f041 0101 	orr.w	r1, r1, #1
 8003eb8:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	f883 c041 	strb.w	ip, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003ebe:	f883 e040 	strb.w	lr, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ec2:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003ec4:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8003ec8:	2002      	movs	r0, #2
}
 8003eca:	4770      	bx	lr

08003ecc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ecc:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8003ed0:	2a20      	cmp	r2, #32
 8003ed2:	d122      	bne.n	8003f1a <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8003ed4:	b500      	push	{lr}
 8003ed6:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eda:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8003ede:	2a01      	cmp	r2, #1
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	d01c      	beq.n	8003f1e <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ee4:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ee6:	2024      	movs	r0, #36	@ 0x24
 8003ee8:	f883 0041 	strb.w	r0, [r3, #65]	@ 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003eec:	6810      	ldr	r0, [r2, #0]
 8003eee:	f020 0001 	bic.w	r0, r0, #1
 8003ef2:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ef4:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ef6:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003efa:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003efe:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f00:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f02:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8003f06:	f041 0101 	orr.w	r1, r1, #1
 8003f0a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f0c:	f883 e041 	strb.w	lr, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8003f10:	f883 c040 	strb.w	ip, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f14:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003f16:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_LOCK(hi2c);
 8003f1a:	2002      	movs	r0, #2
}
 8003f1c:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8003f1e:	2002      	movs	r0, #2
}
 8003f20:	f85d fb04 	ldr.w	pc, [sp], #4

08003f24 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003f24:	b328      	cbz	r0, 8003f72 <HAL_IWDG_Init+0x4e>
{
 8003f26:	b538      	push	{r3, r4, r5, lr}
  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003f28:	e9d0 3100 	ldrd	r3, r1, [r0]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003f2c:	6882      	ldr	r2, [r0, #8]
 8003f2e:	4604      	mov	r4, r0
  __HAL_IWDG_START(hiwdg);
 8003f30:	f64c 40cc 	movw	r0, #52428	@ 0xcccc
 8003f34:	6018      	str	r0, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003f36:	f245 5055 	movw	r0, #21845	@ 0x5555
 8003f3a:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003f3c:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003f3e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003f40:	f7fd fdb6 	bl	8001ab0 <HAL_GetTick>

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003f44:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003f46:	4605      	mov	r5, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	0751      	lsls	r1, r2, #29
 8003f4c:	d00a      	beq.n	8003f64 <HAL_IWDG_Init+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003f4e:	f7fd fdaf 	bl	8001ab0 <HAL_GetTick>
 8003f52:	1b40      	subs	r0, r0, r5
 8003f54:	2831      	cmp	r0, #49	@ 0x31
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003f56:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003f58:	d9f6      	bls.n	8003f48 <HAL_IWDG_Init+0x24>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	0752      	lsls	r2, r2, #29
 8003f5e:	d0f3      	beq.n	8003f48 <HAL_IWDG_Init+0x24>
      {
        return HAL_TIMEOUT;
 8003f60:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 8003f62:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003f64:	6919      	ldr	r1, [r3, #16]
 8003f66:	68e2      	ldr	r2, [r4, #12]
 8003f68:	4291      	cmp	r1, r2
 8003f6a:	d004      	beq.n	8003f76 <HAL_IWDG_Init+0x52>
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003f6c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8003f6e:	2000      	movs	r0, #0
}
 8003f70:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003f72:	2001      	movs	r0, #1
}
 8003f74:	4770      	bx	lr
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003f76:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	e7f7      	b.n	8003f6e <HAL_IWDG_Init+0x4a>
 8003f7e:	bf00      	nop

08003f80 <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003f80:	6803      	ldr	r3, [r0, #0]
 8003f82:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 8003f86:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003f88:	601a      	str	r2, [r3, #0]
}
 8003f8a:	4770      	bx	lr

08003f8c <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f8c:	4a35      	ldr	r2, [pc, #212]	@ (8004064 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8003f8e:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f90:	b960      	cbnz	r0, 8003fac <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f92:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f9a:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f9e:	d01b      	beq.n	8003fd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fa4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003fa8:	2000      	movs	r0, #0
}
 8003faa:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fac:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8003fb0:	d006      	beq.n	8003fc0 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003fb2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fba:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003fbc:	2000      	movs	r0, #0
}
 8003fbe:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fc0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fc8:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fcc:	d029      	beq.n	8004022 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003fd6:	e7f1      	b.n	8003fbc <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fe0:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fe2:	4821      	ldr	r0, [pc, #132]	@ (8004068 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003fe4:	4921      	ldr	r1, [pc, #132]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fe6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003fea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fee:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ff0:	6803      	ldr	r3, [r0, #0]
 8003ff2:	2032      	movs	r0, #50	@ 0x32
 8003ff4:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ff8:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ffa:	fba1 1303 	umull	r1, r3, r1, r3
 8003ffe:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004000:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004002:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004006:	d506      	bpl.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004008:	e000      	b.n	800400c <HAL_PWREx_ControlVoltageScaling+0x80>
 800400a:	b123      	cbz	r3, 8004016 <HAL_PWREx_ControlVoltageScaling+0x8a>
 800400c:	6951      	ldr	r1, [r2, #20]
 800400e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004010:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004014:	d4f9      	bmi.n	800400a <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004016:	4b13      	ldr	r3, [pc, #76]	@ (8004064 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	055b      	lsls	r3, r3, #21
 800401c:	d5ce      	bpl.n	8003fbc <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 800401e:	2003      	movs	r0, #3
 8004020:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004026:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800402a:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800402c:	480e      	ldr	r0, [pc, #56]	@ (8004068 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800402e:	490f      	ldr	r1, [pc, #60]	@ (800406c <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004030:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004034:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004038:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800403a:	6803      	ldr	r3, [r0, #0]
 800403c:	2032      	movs	r0, #50	@ 0x32
 800403e:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004042:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004044:	fba1 1303 	umull	r1, r3, r1, r3
 8004048:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800404a:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800404c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004050:	d5e1      	bpl.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004052:	e001      	b.n	8004058 <HAL_PWREx_ControlVoltageScaling+0xcc>
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0de      	beq.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004058:	6951      	ldr	r1, [r2, #20]
 800405a:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 800405c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004060:	d5d9      	bpl.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8004062:	e7f7      	b.n	8004054 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8004064:	40007000 	.word	0x40007000
 8004068:	20000000 	.word	0x20000000
 800406c:	431bde83 	.word	0x431bde83

08004070 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004070:	4a02      	ldr	r2, [pc, #8]	@ (800407c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004072:	6893      	ldr	r3, [r2, #8]
 8004074:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004078:	6093      	str	r3, [r2, #8]
}
 800407a:	4770      	bx	lr
 800407c:	40007000 	.word	0x40007000

08004080 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004080:	2800      	cmp	r0, #0
 8004082:	f000 81bd 	beq.w	8004400 <HAL_RCC_OscConfig+0x380>
{
 8004086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800408a:	6803      	ldr	r3, [r0, #0]
 800408c:	07d9      	lsls	r1, r3, #31
{
 800408e:	b082      	sub	sp, #8
 8004090:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004092:	d512      	bpl.n	80040ba <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004094:	49a6      	ldr	r1, [pc, #664]	@ (8004330 <HAL_RCC_OscConfig+0x2b0>)
 8004096:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004098:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800409a:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800409e:	2a0c      	cmp	r2, #12
 80040a0:	f000 80d0 	beq.w	8004244 <HAL_RCC_OscConfig+0x1c4>
 80040a4:	2a08      	cmp	r2, #8
 80040a6:	f040 80d2 	bne.w	800424e <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040aa:	4aa1      	ldr	r2, [pc, #644]	@ (8004330 <HAL_RCC_OscConfig+0x2b0>)
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	0392      	lsls	r2, r2, #14
 80040b0:	d503      	bpl.n	80040ba <HAL_RCC_OscConfig+0x3a>
 80040b2:	6862      	ldr	r2, [r4, #4]
 80040b4:	2a00      	cmp	r2, #0
 80040b6:	f000 8137 	beq.w	8004328 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ba:	079a      	lsls	r2, r3, #30
 80040bc:	d522      	bpl.n	8004104 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040be:	4a9c      	ldr	r2, [pc, #624]	@ (8004330 <HAL_RCC_OscConfig+0x2b0>)
 80040c0:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040c2:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040c4:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80040c8:	2b0c      	cmp	r3, #12
 80040ca:	f000 80f8 	beq.w	80042be <HAL_RCC_OscConfig+0x23e>
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	f040 80fa 	bne.w	80042c8 <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d4:	4b96      	ldr	r3, [pc, #600]	@ (8004330 <HAL_RCC_OscConfig+0x2b0>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	055b      	lsls	r3, r3, #21
 80040da:	d503      	bpl.n	80040e4 <HAL_RCC_OscConfig+0x64>
 80040dc:	68e3      	ldr	r3, [r4, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 8122 	beq.w	8004328 <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e4:	4a92      	ldr	r2, [pc, #584]	@ (8004330 <HAL_RCC_OscConfig+0x2b0>)
 80040e6:	6920      	ldr	r0, [r4, #16]
 80040e8:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040ea:	4992      	ldr	r1, [pc, #584]	@ (8004334 <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ec:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80040f0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80040f4:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80040f6:	6808      	ldr	r0, [r1, #0]
 80040f8:	f7fd fc98 	bl	8001a2c <HAL_InitTick>
 80040fc:	2800      	cmp	r0, #0
 80040fe:	f040 8113 	bne.w	8004328 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	071a      	lsls	r2, r3, #28
 8004106:	d519      	bpl.n	800413c <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004108:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800410a:	4d89      	ldr	r5, [pc, #548]	@ (8004330 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80c2 	beq.w	8004296 <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 8004112:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004116:	f043 0301 	orr.w	r3, r3, #1
 800411a:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411e:	f7fd fcc7 	bl	8001ab0 <HAL_GetTick>
 8004122:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004124:	e005      	b.n	8004132 <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004126:	f7fd fcc3 	bl	8001ab0 <HAL_GetTick>
 800412a:	1b80      	subs	r0, r0, r6
 800412c:	2802      	cmp	r0, #2
 800412e:	f200 8117 	bhi.w	8004360 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004132:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8004136:	079b      	lsls	r3, r3, #30
 8004138:	d5f5      	bpl.n	8004126 <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	075d      	lsls	r5, r3, #29
 800413e:	d541      	bpl.n	80041c4 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004140:	4b7b      	ldr	r3, [pc, #492]	@ (8004330 <HAL_RCC_OscConfig+0x2b0>)
 8004142:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004144:	00d0      	lsls	r0, r2, #3
 8004146:	f100 810f 	bmi.w	8004368 <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800414a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800414c:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004150:	659a      	str	r2, [r3, #88]	@ 0x58
 8004152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004158:	9301      	str	r3, [sp, #4]
 800415a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800415c:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800415e:	4e76      	ldr	r6, [pc, #472]	@ (8004338 <HAL_RCC_OscConfig+0x2b8>)
 8004160:	6833      	ldr	r3, [r6, #0]
 8004162:	05d9      	lsls	r1, r3, #23
 8004164:	f140 812e 	bpl.w	80043c4 <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004168:	68a3      	ldr	r3, [r4, #8]
 800416a:	2b01      	cmp	r3, #1
 800416c:	f000 80fe 	beq.w	800436c <HAL_RCC_OscConfig+0x2ec>
 8004170:	2b05      	cmp	r3, #5
 8004172:	f000 8184 	beq.w	800447e <HAL_RCC_OscConfig+0x3fe>
 8004176:	4e6e      	ldr	r6, [pc, #440]	@ (8004330 <HAL_RCC_OscConfig+0x2b0>)
 8004178:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 800417c:	f022 0201 	bic.w	r2, r2, #1
 8004180:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8004184:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8004188:	f022 0204 	bic.w	r2, r2, #4
 800418c:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 80f2 	bne.w	800437a <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004196:	f7fd fc8b 	bl	8001ab0 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419a:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800419e:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041a0:	e005      	b.n	80041ae <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a2:	f7fd fc85 	bl	8001ab0 <HAL_GetTick>
 80041a6:	1bc0      	subs	r0, r0, r7
 80041a8:	4540      	cmp	r0, r8
 80041aa:	f200 80d9 	bhi.w	8004360 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041ae:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 80041b2:	0799      	lsls	r1, r3, #30
 80041b4:	d4f5      	bmi.n	80041a2 <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041b6:	b125      	cbz	r5, 80041c2 <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b8:	4a5d      	ldr	r2, [pc, #372]	@ (8004330 <HAL_RCC_OscConfig+0x2b0>)
 80041ba:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80041bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041c2:	6823      	ldr	r3, [r4, #0]
 80041c4:	069a      	lsls	r2, r3, #26
 80041c6:	d518      	bpl.n	80041fa <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041c8:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041ca:	4d59      	ldr	r5, [pc, #356]	@ (8004330 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 80e5 	beq.w	800439c <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 80041d2:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80041d6:	f043 0301 	orr.w	r3, r3, #1
 80041da:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041de:	f7fd fc67 	bl	8001ab0 <HAL_GetTick>
 80041e2:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041e4:	e005      	b.n	80041f2 <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041e6:	f7fd fc63 	bl	8001ab0 <HAL_GetTick>
 80041ea:	1b80      	subs	r0, r0, r6
 80041ec:	2802      	cmp	r0, #2
 80041ee:	f200 80b7 	bhi.w	8004360 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041f2:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80041f6:	079b      	lsls	r3, r3, #30
 80041f8:	d5f5      	bpl.n	80041e6 <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041fa:	69e3      	ldr	r3, [r4, #28]
 80041fc:	b1f3      	cbz	r3, 800423c <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041fe:	4d4c      	ldr	r5, [pc, #304]	@ (8004330 <HAL_RCC_OscConfig+0x2b0>)
 8004200:	68aa      	ldr	r2, [r5, #8]
 8004202:	f002 020c 	and.w	r2, r2, #12
 8004206:	2a0c      	cmp	r2, #12
 8004208:	f000 8147 	beq.w	800449a <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800420c:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420e:	682b      	ldr	r3, [r5, #0]
 8004210:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004214:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004216:	f000 80f5 	beq.w	8004404 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421a:	f7fd fc49 	bl	8001ab0 <HAL_GetTick>
 800421e:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004220:	e005      	b.n	800422e <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004222:	f7fd fc45 	bl	8001ab0 <HAL_GetTick>
 8004226:	1b00      	subs	r0, r0, r4
 8004228:	2802      	cmp	r0, #2
 800422a:	f200 8099 	bhi.w	8004360 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800422e:	682b      	ldr	r3, [r5, #0]
 8004230:	019b      	lsls	r3, r3, #6
 8004232:	d4f6      	bmi.n	8004222 <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004234:	68ea      	ldr	r2, [r5, #12]
 8004236:	4b41      	ldr	r3, [pc, #260]	@ (800433c <HAL_RCC_OscConfig+0x2bc>)
 8004238:	4013      	ands	r3, r2
 800423a:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 800423c:	2000      	movs	r0, #0
}
 800423e:	b002      	add	sp, #8
 8004240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004244:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004248:	2903      	cmp	r1, #3
 800424a:	f43f af2e 	beq.w	80040aa <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800424e:	6863      	ldr	r3, [r4, #4]
 8004250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004254:	d055      	beq.n	8004302 <HAL_RCC_OscConfig+0x282>
 8004256:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800425a:	f000 80c4 	beq.w	80043e6 <HAL_RCC_OscConfig+0x366>
 800425e:	4d34      	ldr	r5, [pc, #208]	@ (8004330 <HAL_RCC_OscConfig+0x2b0>)
 8004260:	682a      	ldr	r2, [r5, #0]
 8004262:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004266:	602a      	str	r2, [r5, #0]
 8004268:	682a      	ldr	r2, [r5, #0]
 800426a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800426e:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004270:	2b00      	cmp	r3, #0
 8004272:	d14b      	bne.n	800430c <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 8004274:	f7fd fc1c 	bl	8001ab0 <HAL_GetTick>
 8004278:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800427a:	e004      	b.n	8004286 <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800427c:	f7fd fc18 	bl	8001ab0 <HAL_GetTick>
 8004280:	1b80      	subs	r0, r0, r6
 8004282:	2864      	cmp	r0, #100	@ 0x64
 8004284:	d86c      	bhi.n	8004360 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004286:	682b      	ldr	r3, [r5, #0]
 8004288:	0399      	lsls	r1, r3, #14
 800428a:	d4f7      	bmi.n	800427c <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	079a      	lsls	r2, r3, #30
 8004290:	f57f af38 	bpl.w	8004104 <HAL_RCC_OscConfig+0x84>
 8004294:	e713      	b.n	80040be <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 8004296:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800429a:	f023 0301 	bic.w	r3, r3, #1
 800429e:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80042a2:	f7fd fc05 	bl	8001ab0 <HAL_GetTick>
 80042a6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042a8:	e004      	b.n	80042b4 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042aa:	f7fd fc01 	bl	8001ab0 <HAL_GetTick>
 80042ae:	1b80      	subs	r0, r0, r6
 80042b0:	2802      	cmp	r0, #2
 80042b2:	d855      	bhi.n	8004360 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b4:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80042b8:	079f      	lsls	r7, r3, #30
 80042ba:	d4f6      	bmi.n	80042aa <HAL_RCC_OscConfig+0x22a>
 80042bc:	e73d      	b.n	800413a <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042be:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80042c2:	2a02      	cmp	r2, #2
 80042c4:	f43f af06 	beq.w	80040d4 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042c8:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 80042ca:	4d19      	ldr	r5, [pc, #100]	@ (8004330 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d037      	beq.n	8004340 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 80042d0:	682b      	ldr	r3, [r5, #0]
 80042d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80042d8:	f7fd fbea 	bl	8001ab0 <HAL_GetTick>
 80042dc:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042de:	e004      	b.n	80042ea <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e0:	f7fd fbe6 	bl	8001ab0 <HAL_GetTick>
 80042e4:	1b80      	subs	r0, r0, r6
 80042e6:	2802      	cmp	r0, #2
 80042e8:	d83a      	bhi.n	8004360 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042ea:	682b      	ldr	r3, [r5, #0]
 80042ec:	055f      	lsls	r7, r3, #21
 80042ee:	d5f7      	bpl.n	80042e0 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f0:	686b      	ldr	r3, [r5, #4]
 80042f2:	6922      	ldr	r2, [r4, #16]
 80042f4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80042f8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80042fc:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	e700      	b.n	8004104 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004302:	4a0b      	ldr	r2, [pc, #44]	@ (8004330 <HAL_RCC_OscConfig+0x2b0>)
 8004304:	6813      	ldr	r3, [r2, #0]
 8004306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800430a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800430c:	f7fd fbd0 	bl	8001ab0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004310:	4e07      	ldr	r6, [pc, #28]	@ (8004330 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8004312:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004314:	e004      	b.n	8004320 <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004316:	f7fd fbcb 	bl	8001ab0 <HAL_GetTick>
 800431a:	1b40      	subs	r0, r0, r5
 800431c:	2864      	cmp	r0, #100	@ 0x64
 800431e:	d81f      	bhi.n	8004360 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004320:	6833      	ldr	r3, [r6, #0]
 8004322:	039f      	lsls	r7, r3, #14
 8004324:	d5f7      	bpl.n	8004316 <HAL_RCC_OscConfig+0x296>
 8004326:	e7b1      	b.n	800428c <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 8004328:	2001      	movs	r0, #1
}
 800432a:	b002      	add	sp, #8
 800432c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004330:	40021000 	.word	0x40021000
 8004334:	20000008 	.word	0x20000008
 8004338:	40007000 	.word	0x40007000
 800433c:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 8004340:	682b      	ldr	r3, [r5, #0]
 8004342:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004346:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004348:	f7fd fbb2 	bl	8001ab0 <HAL_GetTick>
 800434c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800434e:	682b      	ldr	r3, [r5, #0]
 8004350:	0559      	lsls	r1, r3, #21
 8004352:	f57f aed6 	bpl.w	8004102 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004356:	f7fd fbab 	bl	8001ab0 <HAL_GetTick>
 800435a:	1b80      	subs	r0, r0, r6
 800435c:	2802      	cmp	r0, #2
 800435e:	d9f6      	bls.n	800434e <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8004360:	2003      	movs	r0, #3
}
 8004362:	b002      	add	sp, #8
 8004364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8004368:	2500      	movs	r5, #0
 800436a:	e6f8      	b.n	800415e <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800436c:	4a65      	ldr	r2, [pc, #404]	@ (8004504 <HAL_RCC_OscConfig+0x484>)
 800436e:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004372:	f043 0301 	orr.w	r3, r3, #1
 8004376:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 800437a:	f7fd fb99 	bl	8001ab0 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800437e:	4f61      	ldr	r7, [pc, #388]	@ (8004504 <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 8004380:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004382:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004386:	e004      	b.n	8004392 <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004388:	f7fd fb92 	bl	8001ab0 <HAL_GetTick>
 800438c:	1b80      	subs	r0, r0, r6
 800438e:	4540      	cmp	r0, r8
 8004390:	d8e6      	bhi.n	8004360 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004392:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004396:	079b      	lsls	r3, r3, #30
 8004398:	d5f6      	bpl.n	8004388 <HAL_RCC_OscConfig+0x308>
 800439a:	e70c      	b.n	80041b6 <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 800439c:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80043a0:	f023 0301 	bic.w	r3, r3, #1
 80043a4:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80043a8:	f7fd fb82 	bl	8001ab0 <HAL_GetTick>
 80043ac:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043ae:	e004      	b.n	80043ba <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043b0:	f7fd fb7e 	bl	8001ab0 <HAL_GetTick>
 80043b4:	1b80      	subs	r0, r0, r6
 80043b6:	2802      	cmp	r0, #2
 80043b8:	d8d2      	bhi.n	8004360 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043ba:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80043be:	079f      	lsls	r7, r3, #30
 80043c0:	d4f6      	bmi.n	80043b0 <HAL_RCC_OscConfig+0x330>
 80043c2:	e71a      	b.n	80041fa <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043c4:	6833      	ldr	r3, [r6, #0]
 80043c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ca:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80043cc:	f7fd fb70 	bl	8001ab0 <HAL_GetTick>
 80043d0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043d2:	6833      	ldr	r3, [r6, #0]
 80043d4:	05da      	lsls	r2, r3, #23
 80043d6:	f53f aec7 	bmi.w	8004168 <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043da:	f7fd fb69 	bl	8001ab0 <HAL_GetTick>
 80043de:	1bc0      	subs	r0, r0, r7
 80043e0:	2802      	cmp	r0, #2
 80043e2:	d9f6      	bls.n	80043d2 <HAL_RCC_OscConfig+0x352>
 80043e4:	e7bc      	b.n	8004360 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043ea:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	681a      	ldr	r2, [r3, #0]
 80043f8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80043fc:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043fe:	e785      	b.n	800430c <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 8004400:	2001      	movs	r0, #1
}
 8004402:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8004404:	f7fd fb54 	bl	8001ab0 <HAL_GetTick>
 8004408:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800440a:	e004      	b.n	8004416 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440c:	f7fd fb50 	bl	8001ab0 <HAL_GetTick>
 8004410:	1b80      	subs	r0, r0, r6
 8004412:	2802      	cmp	r0, #2
 8004414:	d8a4      	bhi.n	8004360 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004416:	682b      	ldr	r3, [r5, #0]
 8004418:	0199      	lsls	r1, r3, #6
 800441a:	d4f7      	bmi.n	800440c <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800441c:	68e9      	ldr	r1, [r5, #12]
 800441e:	4b3a      	ldr	r3, [pc, #232]	@ (8004508 <HAL_RCC_OscConfig+0x488>)
 8004420:	6a22      	ldr	r2, [r4, #32]
 8004422:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8004424:	400b      	ands	r3, r1
 8004426:	4313      	orrs	r3, r2
 8004428:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 800442c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004430:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8004434:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 8004438:	3801      	subs	r0, #1
 800443a:	0849      	lsrs	r1, r1, #1
 800443c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004440:	3901      	subs	r1, #1
 8004442:	0852      	lsrs	r2, r2, #1
 8004444:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8004448:	3a01      	subs	r2, #1
 800444a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800444e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8004450:	682b      	ldr	r3, [r5, #0]
 8004452:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004456:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004458:	68eb      	ldr	r3, [r5, #12]
 800445a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800445e:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004460:	f7fd fb26 	bl	8001ab0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004464:	4d27      	ldr	r5, [pc, #156]	@ (8004504 <HAL_RCC_OscConfig+0x484>)
        tickstart = HAL_GetTick();
 8004466:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004468:	e005      	b.n	8004476 <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446a:	f7fd fb21 	bl	8001ab0 <HAL_GetTick>
 800446e:	1b00      	subs	r0, r0, r4
 8004470:	2802      	cmp	r0, #2
 8004472:	f63f af75 	bhi.w	8004360 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004476:	682b      	ldr	r3, [r5, #0]
 8004478:	019a      	lsls	r2, r3, #6
 800447a:	d5f6      	bpl.n	800446a <HAL_RCC_OscConfig+0x3ea>
 800447c:	e6de      	b.n	800423c <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800447e:	4b21      	ldr	r3, [pc, #132]	@ (8004504 <HAL_RCC_OscConfig+0x484>)
 8004480:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004484:	f042 0204 	orr.w	r2, r2, #4
 8004488:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800448c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8004490:	f042 0201 	orr.w	r2, r2, #1
 8004494:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004498:	e76f      	b.n	800437a <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800449a:	2b01      	cmp	r3, #1
 800449c:	f43f af44 	beq.w	8004328 <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 80044a0:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a2:	6a22      	ldr	r2, [r4, #32]
 80044a4:	f003 0103 	and.w	r1, r3, #3
 80044a8:	4291      	cmp	r1, r2
 80044aa:	f47f af3d 	bne.w	8004328 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044ae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80044b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80044b4:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b6:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80044ba:	f47f af35 	bne.w	8004328 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044be:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80044c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044c4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80044c8:	f47f af2e 	bne.w	8004328 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044cc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80044ce:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044d2:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80044d6:	f47f af27 	bne.w	8004328 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044da:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80044dc:	0852      	lsrs	r2, r2, #1
 80044de:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 80044e2:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044e4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80044e8:	f47f af1e 	bne.w	8004328 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044ec:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80044ee:	0852      	lsrs	r2, r2, #1
 80044f0:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80044f4:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044f6:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80044fa:	bf14      	ite	ne
 80044fc:	2001      	movne	r0, #1
 80044fe:	2000      	moveq	r0, #0
 8004500:	e69d      	b.n	800423e <HAL_RCC_OscConfig+0x1be>
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000
 8004508:	019f800c 	.word	0x019f800c

0800450c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800450c:	4b18      	ldr	r3, [pc, #96]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x64>)
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	f002 020c 	and.w	r2, r2, #12
 8004514:	2a04      	cmp	r2, #4
 8004516:	d026      	beq.n	8004566 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	f002 020c 	and.w	r2, r2, #12
 800451e:	2a08      	cmp	r2, #8
 8004520:	d023      	beq.n	800456a <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	f002 020c 	and.w	r2, r2, #12
 8004528:	2a0c      	cmp	r2, #12
 800452a:	d001      	beq.n	8004530 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 800452c:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 800452e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004530:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004532:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004534:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004536:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 800453a:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800453c:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004540:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004544:	bf0c      	ite	eq
 8004546:	4b0b      	ldreq	r3, [pc, #44]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004548:	4b0b      	ldrne	r3, [pc, #44]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800454a:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800454c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004550:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004554:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <HAL_RCC_GetSysClockFreq+0x64>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800455c:	3301      	adds	r3, #1
 800455e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8004560:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8004564:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8004566:	4804      	ldr	r0, [pc, #16]	@ (8004578 <HAL_RCC_GetSysClockFreq+0x6c>)
 8004568:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800456a:	4802      	ldr	r0, [pc, #8]	@ (8004574 <HAL_RCC_GetSysClockFreq+0x68>)
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40021000 	.word	0x40021000
 8004574:	016e3600 	.word	0x016e3600
 8004578:	00f42400 	.word	0x00f42400

0800457c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800457c:	2800      	cmp	r0, #0
 800457e:	f000 80ee 	beq.w	800475e <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004582:	4a78      	ldr	r2, [pc, #480]	@ (8004764 <HAL_RCC_ClockConfig+0x1e8>)
{
 8004584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004588:	6813      	ldr	r3, [r2, #0]
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	428b      	cmp	r3, r1
 8004590:	460d      	mov	r5, r1
 8004592:	4604      	mov	r4, r0
 8004594:	d20c      	bcs.n	80045b0 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004596:	6813      	ldr	r3, [r2, #0]
 8004598:	f023 030f 	bic.w	r3, r3, #15
 800459c:	430b      	orrs	r3, r1
 800459e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a0:	6813      	ldr	r3, [r2, #0]
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	428b      	cmp	r3, r1
 80045a8:	d002      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80045aa:	2001      	movs	r0, #1
}
 80045ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b0:	6823      	ldr	r3, [r4, #0]
 80045b2:	07df      	lsls	r7, r3, #31
 80045b4:	d569      	bpl.n	800468a <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045b6:	6867      	ldr	r7, [r4, #4]
 80045b8:	2f03      	cmp	r7, #3
 80045ba:	f000 80a0 	beq.w	80046fe <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045be:	4b6a      	ldr	r3, [pc, #424]	@ (8004768 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c0:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045c2:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c4:	f000 8097 	beq.w	80046f6 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c8:	055b      	lsls	r3, r3, #21
 80045ca:	d5ee      	bpl.n	80045aa <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80045cc:	f7ff ff9e 	bl	800450c <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80045d0:	4b66      	ldr	r3, [pc, #408]	@ (800476c <HAL_RCC_ClockConfig+0x1f0>)
 80045d2:	4298      	cmp	r0, r3
 80045d4:	f240 80c0 	bls.w	8004758 <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045d8:	4a63      	ldr	r2, [pc, #396]	@ (8004768 <HAL_RCC_ClockConfig+0x1ec>)
 80045da:	6893      	ldr	r3, [r2, #8]
 80045dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80045e6:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045ea:	4e5f      	ldr	r6, [pc, #380]	@ (8004768 <HAL_RCC_ClockConfig+0x1ec>)
 80045ec:	68b3      	ldr	r3, [r6, #8]
 80045ee:	f023 0303 	bic.w	r3, r3, #3
 80045f2:	433b      	orrs	r3, r7
 80045f4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80045f6:	f7fd fa5b 	bl	8001ab0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045fa:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80045fe:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004600:	e004      	b.n	800460c <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004602:	f7fd fa55 	bl	8001ab0 <HAL_GetTick>
 8004606:	1bc0      	subs	r0, r0, r7
 8004608:	4540      	cmp	r0, r8
 800460a:	d871      	bhi.n	80046f0 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800460c:	68b3      	ldr	r3, [r6, #8]
 800460e:	6862      	ldr	r2, [r4, #4]
 8004610:	f003 030c 	and.w	r3, r3, #12
 8004614:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004618:	d1f3      	bne.n	8004602 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	079f      	lsls	r7, r3, #30
 800461e:	d436      	bmi.n	800468e <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8004620:	f1b9 0f00 	cmp.w	r9, #0
 8004624:	d003      	beq.n	800462e <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004626:	68b3      	ldr	r3, [r6, #8]
 8004628:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800462c:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800462e:	4e4d      	ldr	r6, [pc, #308]	@ (8004764 <HAL_RCC_ClockConfig+0x1e8>)
 8004630:	6833      	ldr	r3, [r6, #0]
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	42ab      	cmp	r3, r5
 8004638:	d846      	bhi.n	80046c8 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800463a:	6823      	ldr	r3, [r4, #0]
 800463c:	075a      	lsls	r2, r3, #29
 800463e:	d506      	bpl.n	800464e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004640:	4949      	ldr	r1, [pc, #292]	@ (8004768 <HAL_RCC_ClockConfig+0x1ec>)
 8004642:	68e0      	ldr	r0, [r4, #12]
 8004644:	688a      	ldr	r2, [r1, #8]
 8004646:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800464a:	4302      	orrs	r2, r0
 800464c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464e:	071b      	lsls	r3, r3, #28
 8004650:	d507      	bpl.n	8004662 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004652:	4a45      	ldr	r2, [pc, #276]	@ (8004768 <HAL_RCC_ClockConfig+0x1ec>)
 8004654:	6921      	ldr	r1, [r4, #16]
 8004656:	6893      	ldr	r3, [r2, #8]
 8004658:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800465c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004660:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004662:	f7ff ff53 	bl	800450c <HAL_RCC_GetSysClockFreq>
 8004666:	4a40      	ldr	r2, [pc, #256]	@ (8004768 <HAL_RCC_ClockConfig+0x1ec>)
 8004668:	4c41      	ldr	r4, [pc, #260]	@ (8004770 <HAL_RCC_ClockConfig+0x1f4>)
 800466a:	6892      	ldr	r2, [r2, #8]
 800466c:	4941      	ldr	r1, [pc, #260]	@ (8004774 <HAL_RCC_ClockConfig+0x1f8>)
 800466e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004672:	4603      	mov	r3, r0
 8004674:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8004676:	4840      	ldr	r0, [pc, #256]	@ (8004778 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004678:	f002 021f 	and.w	r2, r2, #31
 800467c:	40d3      	lsrs	r3, r2
 800467e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8004680:	6800      	ldr	r0, [r0, #0]
}
 8004682:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8004686:	f7fd b9d1 	b.w	8001a2c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800468a:	079e      	lsls	r6, r3, #30
 800468c:	d5cf      	bpl.n	800462e <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800468e:	0758      	lsls	r0, r3, #29
 8004690:	d504      	bpl.n	800469c <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004692:	4935      	ldr	r1, [pc, #212]	@ (8004768 <HAL_RCC_ClockConfig+0x1ec>)
 8004694:	688a      	ldr	r2, [r1, #8]
 8004696:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800469a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800469c:	0719      	lsls	r1, r3, #28
 800469e:	d506      	bpl.n	80046ae <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046a0:	4a31      	ldr	r2, [pc, #196]	@ (8004768 <HAL_RCC_ClockConfig+0x1ec>)
 80046a2:	6893      	ldr	r3, [r2, #8]
 80046a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80046a8:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046ac:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ae:	4a2e      	ldr	r2, [pc, #184]	@ (8004768 <HAL_RCC_ClockConfig+0x1ec>)
 80046b0:	68a1      	ldr	r1, [r4, #8]
 80046b2:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046b4:	4e2b      	ldr	r6, [pc, #172]	@ (8004764 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046ba:	430b      	orrs	r3, r1
 80046bc:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046be:	6833      	ldr	r3, [r6, #0]
 80046c0:	f003 030f 	and.w	r3, r3, #15
 80046c4:	42ab      	cmp	r3, r5
 80046c6:	d9b8      	bls.n	800463a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c8:	6833      	ldr	r3, [r6, #0]
 80046ca:	f023 030f 	bic.w	r3, r3, #15
 80046ce:	432b      	orrs	r3, r5
 80046d0:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80046d2:	f7fd f9ed 	bl	8001ab0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d6:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80046da:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046dc:	6833      	ldr	r3, [r6, #0]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	42ab      	cmp	r3, r5
 80046e4:	d0a9      	beq.n	800463a <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e6:	f7fd f9e3 	bl	8001ab0 <HAL_GetTick>
 80046ea:	1bc0      	subs	r0, r0, r7
 80046ec:	4540      	cmp	r0, r8
 80046ee:	d9f5      	bls.n	80046dc <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 80046f0:	2003      	movs	r0, #3
}
 80046f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046f6:	039a      	lsls	r2, r3, #14
 80046f8:	f53f af68 	bmi.w	80045cc <HAL_RCC_ClockConfig+0x50>
 80046fc:	e755      	b.n	80045aa <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fe:	4a1a      	ldr	r2, [pc, #104]	@ (8004768 <HAL_RCC_ClockConfig+0x1ec>)
 8004700:	6811      	ldr	r1, [r2, #0]
 8004702:	0188      	lsls	r0, r1, #6
 8004704:	f57f af51 	bpl.w	80045aa <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004708:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800470a:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800470c:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 800470e:	4e17      	ldr	r6, [pc, #92]	@ (800476c <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004710:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8004714:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004716:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800471a:	bf0c      	ite	eq
 800471c:	4817      	ldreq	r0, [pc, #92]	@ (800477c <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800471e:	4818      	ldrne	r0, [pc, #96]	@ (8004780 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004720:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004722:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004726:	4810      	ldr	r0, [pc, #64]	@ (8004768 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004728:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800472c:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004730:	68c1      	ldr	r1, [r0, #12]
 8004732:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8004736:	3101      	adds	r1, #1
 8004738:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 800473a:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 800473e:	42b2      	cmp	r2, r6
 8004740:	d90a      	bls.n	8004758 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004742:	6882      	ldr	r2, [r0, #8]
 8004744:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8004748:	f43f af46 	beq.w	80045d8 <HAL_RCC_ClockConfig+0x5c>
 800474c:	0799      	lsls	r1, r3, #30
 800474e:	d503      	bpl.n	8004758 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004750:	68a3      	ldr	r3, [r4, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	f43f af40 	beq.w	80045d8 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004758:	f04f 0900 	mov.w	r9, #0
 800475c:	e745      	b.n	80045ea <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 800475e:	2001      	movs	r0, #1
}
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	40022000 	.word	0x40022000
 8004768:	40021000 	.word	0x40021000
 800476c:	04c4b400 	.word	0x04c4b400
 8004770:	080091d4 	.word	0x080091d4
 8004774:	20000000 	.word	0x20000000
 8004778:	20000008 	.word	0x20000008
 800477c:	016e3600 	.word	0x016e3600
 8004780:	00f42400 	.word	0x00f42400

08004784 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004784:	4b05      	ldr	r3, [pc, #20]	@ (800479c <HAL_RCC_GetPCLK1Freq+0x18>)
 8004786:	4a06      	ldr	r2, [pc, #24]	@ (80047a0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004788:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800478a:	4906      	ldr	r1, [pc, #24]	@ (80047a4 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800478c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004790:	6808      	ldr	r0, [r1, #0]
 8004792:	5cd3      	ldrb	r3, [r2, r3]
 8004794:	f003 031f 	and.w	r3, r3, #31
}
 8004798:	40d8      	lsrs	r0, r3
 800479a:	4770      	bx	lr
 800479c:	40021000 	.word	0x40021000
 80047a0:	080091cc 	.word	0x080091cc
 80047a4:	20000000 	.word	0x20000000

080047a8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047a8:	4b05      	ldr	r3, [pc, #20]	@ (80047c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80047aa:	4a06      	ldr	r2, [pc, #24]	@ (80047c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80047ac:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80047ae:	4906      	ldr	r1, [pc, #24]	@ (80047c8 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80047b0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80047b4:	6808      	ldr	r0, [r1, #0]
 80047b6:	5cd3      	ldrb	r3, [r2, r3]
 80047b8:	f003 031f 	and.w	r3, r3, #31
}
 80047bc:	40d8      	lsrs	r0, r3
 80047be:	4770      	bx	lr
 80047c0:	40021000 	.word	0x40021000
 80047c4:	080091cc 	.word	0x080091cc
 80047c8:	20000000 	.word	0x20000000

080047cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047d0:	6803      	ldr	r3, [r0, #0]
{
 80047d2:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047d4:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 80047d8:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047da:	d041      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x94>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047dc:	4bab      	ldr	r3, [pc, #684]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80047de:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80047e0:	00d5      	lsls	r5, r2, #3
 80047e2:	f140 8129 	bpl.w	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    FlagStatus       pwrclkchanged = RESET;
 80047e6:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047e8:	4da9      	ldr	r5, [pc, #676]	@ (8004a90 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80047ea:	682b      	ldr	r3, [r5, #0]
 80047ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f0:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047f2:	f7fd f95d 	bl	8001ab0 <HAL_GetTick>
 80047f6:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047f8:	e004      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x38>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047fa:	f7fd f959 	bl	8001ab0 <HAL_GetTick>
 80047fe:	1b83      	subs	r3, r0, r6
 8004800:	2b02      	cmp	r3, #2
 8004802:	d828      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004804:	682b      	ldr	r3, [r5, #0]
 8004806:	05d8      	lsls	r0, r3, #23
 8004808:	d5f7      	bpl.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800480a:	4da0      	ldr	r5, [pc, #640]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800480c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800480e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004812:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8004816:	f000 8159 	beq.w	8004acc <HAL_RCCEx_PeriphCLKConfig+0x300>
 800481a:	4293      	cmp	r3, r2
 800481c:	f000 8156 	beq.w	8004acc <HAL_RCCEx_PeriphCLKConfig+0x300>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004820:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004824:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800482c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004830:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004834:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004838:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800483c:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004840:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8004842:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004846:	f140 8141 	bpl.w	8004acc <HAL_RCCEx_PeriphCLKConfig+0x300>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484a:	f7fd f931 	bl	8001ab0 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800484e:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8004852:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004854:	e135      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004856:	2003      	movs	r0, #3
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004858:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 800485a:	2f00      	cmp	r7, #0
 800485c:	f040 80f7 	bne.w	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x282>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004860:	07dd      	lsls	r5, r3, #31
 8004862:	d508      	bpl.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004864:	4989      	ldr	r1, [pc, #548]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004866:	6865      	ldr	r5, [r4, #4]
 8004868:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800486c:	f022 0203 	bic.w	r2, r2, #3
 8004870:	432a      	orrs	r2, r5
 8004872:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004876:	0799      	lsls	r1, r3, #30
 8004878:	d508      	bpl.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800487a:	4984      	ldr	r1, [pc, #528]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800487c:	68a5      	ldr	r5, [r4, #8]
 800487e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004882:	f022 020c 	bic.w	r2, r2, #12
 8004886:	432a      	orrs	r2, r5
 8004888:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800488c:	075a      	lsls	r2, r3, #29
 800488e:	d508      	bpl.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004890:	497e      	ldr	r1, [pc, #504]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004892:	68e5      	ldr	r5, [r4, #12]
 8004894:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004898:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800489c:	432a      	orrs	r2, r5
 800489e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048a2:	071f      	lsls	r7, r3, #28
 80048a4:	d508      	bpl.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048a6:	4979      	ldr	r1, [pc, #484]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80048a8:	6925      	ldr	r5, [r4, #16]
 80048aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80048ae:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80048b2:	432a      	orrs	r2, r5
 80048b4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048b8:	06de      	lsls	r6, r3, #27
 80048ba:	d508      	bpl.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048bc:	4973      	ldr	r1, [pc, #460]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80048be:	6965      	ldr	r5, [r4, #20]
 80048c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80048c4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80048c8:	432a      	orrs	r2, r5
 80048ca:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048ce:	069d      	lsls	r5, r3, #26
 80048d0:	d508      	bpl.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048d2:	496e      	ldr	r1, [pc, #440]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80048d4:	69a5      	ldr	r5, [r4, #24]
 80048d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80048da:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80048de:	432a      	orrs	r2, r5
 80048e0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048e4:	0659      	lsls	r1, r3, #25
 80048e6:	d508      	bpl.n	80048fa <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048e8:	4968      	ldr	r1, [pc, #416]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80048ea:	69e5      	ldr	r5, [r4, #28]
 80048ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80048f0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80048f4:	432a      	orrs	r2, r5
 80048f6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048fa:	061a      	lsls	r2, r3, #24
 80048fc:	d508      	bpl.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048fe:	4963      	ldr	r1, [pc, #396]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004900:	6a25      	ldr	r5, [r4, #32]
 8004902:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004906:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800490a:	432a      	orrs	r2, r5
 800490c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004910:	05df      	lsls	r7, r3, #23
 8004912:	d508      	bpl.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004914:	495d      	ldr	r1, [pc, #372]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004916:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8004918:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800491c:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8004920:	432a      	orrs	r2, r5
 8004922:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004926:	039e      	lsls	r6, r3, #14
 8004928:	d508      	bpl.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800492a:	4958      	ldr	r1, [pc, #352]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800492c:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800492e:	f8d1 209c 	ldr.w	r2, [r1, #156]	@ 0x9c
 8004932:	f022 0203 	bic.w	r2, r2, #3
 8004936:	432a      	orrs	r2, r5
 8004938:	f8c1 209c 	str.w	r2, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800493c:	059d      	lsls	r5, r3, #22
 800493e:	d508      	bpl.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004940:	4952      	ldr	r1, [pc, #328]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004942:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8004944:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004948:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 800494c:	432a      	orrs	r2, r5
 800494e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004952:	0559      	lsls	r1, r3, #21
 8004954:	d50b      	bpl.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004956:	494d      	ldr	r1, [pc, #308]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004958:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800495a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800495e:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8004962:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004964:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004968:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800496c:	d075      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x28e>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800496e:	051a      	lsls	r2, r3, #20
 8004970:	d50b      	bpl.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004972:	4946      	ldr	r1, [pc, #280]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004974:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8004976:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800497a:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800497e:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004980:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004984:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004988:	d06c      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x298>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800498a:	04df      	lsls	r7, r3, #19
 800498c:	d50b      	bpl.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800498e:	493f      	ldr	r1, [pc, #252]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004990:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8004992:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004996:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800499a:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800499c:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049a0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80049a4:	d063      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049a6:	049e      	lsls	r6, r3, #18
 80049a8:	d50b      	bpl.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049aa:	4938      	ldr	r1, [pc, #224]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80049ac:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 80049ae:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80049b2:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80049b6:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049b8:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049bc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049c0:	d05a      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049c2:	045d      	lsls	r5, r3, #17
 80049c4:	d50b      	bpl.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049c6:	4931      	ldr	r1, [pc, #196]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80049c8:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 80049ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80049ce:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80049d2:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049d4:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049d8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049dc:	d051      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049de:	0419      	lsls	r1, r3, #16
 80049e0:	d50b      	bpl.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049e2:	492a      	ldr	r1, [pc, #168]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80049e4:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 80049e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80049ea:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80049ee:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80049f0:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049f4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80049f8:	d04c      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80049fa:	03da      	lsls	r2, r3, #15
 80049fc:	d50b      	bpl.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80049fe:	4923      	ldr	r1, [pc, #140]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004a00:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8004a02:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8004a06:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 8004a0a:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004a0c:	f1b5 4f80 	cmp.w	r5, #1073741824	@ 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004a10:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004a14:	d043      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a16:	035b      	lsls	r3, r3, #13
 8004a18:	d50b      	bpl.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004a1c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8004a1e:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8004a22:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004a26:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004a28:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a2c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004a30:	d03a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  }

#endif /* QUADSPI */

  return status;
}
 8004a32:	b002      	add	sp, #8
 8004a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004a3a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004a3e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a46:	9301      	str	r3, [sp, #4]
 8004a48:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004a4a:	2701      	movs	r7, #1
 8004a4c:	e6cc      	b.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a4e:	490f      	ldr	r1, [pc, #60]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8004a50:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8004a52:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004a56:	658a      	str	r2, [r1, #88]	@ 0x58
 8004a58:	e702      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a5a:	68ca      	ldr	r2, [r1, #12]
 8004a5c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004a60:	60ca      	str	r2, [r1, #12]
 8004a62:	e784      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a64:	68ca      	ldr	r2, [r1, #12]
 8004a66:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004a6a:	60ca      	str	r2, [r1, #12]
 8004a6c:	e78d      	b.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x1be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a6e:	68ca      	ldr	r2, [r1, #12]
 8004a70:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004a74:	60ca      	str	r2, [r1, #12]
 8004a76:	e796      	b.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a78:	68ca      	ldr	r2, [r1, #12]
 8004a7a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004a7e:	60ca      	str	r2, [r1, #12]
 8004a80:	e79f      	b.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a82:	68ca      	ldr	r2, [r1, #12]
 8004a84:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8004a88:	60ca      	str	r2, [r1, #12]
 8004a8a:	e7a8      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x212>
 8004a8c:	40021000 	.word	0x40021000
 8004a90:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a94:	68ca      	ldr	r2, [r1, #12]
 8004a96:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004a9a:	60ca      	str	r2, [r1, #12]
 8004a9c:	e7ad      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a9e:	68ca      	ldr	r2, [r1, #12]
 8004aa0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004aa4:	60ca      	str	r2, [r1, #12]
 8004aa6:	e7b6      	b.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa8:	68d3      	ldr	r3, [r2, #12]
 8004aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aae:	60d3      	str	r3, [r2, #12]
}
 8004ab0:	b002      	add	sp, #8
 8004ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ab6:	f7fc fffb 	bl	8001ab0 <HAL_GetTick>
 8004aba:	1b80      	subs	r0, r0, r6
 8004abc:	4540      	cmp	r0, r8
 8004abe:	f63f aeca 	bhi.w	8004856 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ac2:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8004ac6:	079b      	lsls	r3, r3, #30
 8004ac8:	d5f5      	bpl.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004aca:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8004acc:	4904      	ldr	r1, [pc, #16]	@ (8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004ace:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8004ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004adc:	2000      	movs	r0, #0
 8004ade:	e6bb      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8004ae0:	40021000 	.word	0x40021000

08004ae4 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ae4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d12f      	bne.n	8004b4c <HAL_TIM_Base_Start+0x68>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aec:	6803      	ldr	r3, [r0, #0]
 8004aee:	4a18      	ldr	r2, [pc, #96]	@ (8004b50 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af2:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004af8:	d01a      	beq.n	8004b30 <HAL_TIM_Base_Start+0x4c>
 8004afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004afe:	d017      	beq.n	8004b30 <HAL_TIM_Base_Start+0x4c>
 8004b00:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d013      	beq.n	8004b30 <HAL_TIM_Base_Start+0x4c>
 8004b08:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00f      	beq.n	8004b30 <HAL_TIM_Base_Start+0x4c>
 8004b10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00b      	beq.n	8004b30 <HAL_TIM_Base_Start+0x4c>
 8004b18:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d007      	beq.n	8004b30 <HAL_TIM_Base_Start+0x4c>
 8004b20:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d003      	beq.n	8004b30 <HAL_TIM_Base_Start+0x4c>
 8004b28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d107      	bne.n	8004b40 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b30:	6899      	ldr	r1, [r3, #8]
 8004b32:	4a08      	ldr	r2, [pc, #32]	@ (8004b54 <HAL_TIM_Base_Start+0x70>)
 8004b34:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b36:	2a06      	cmp	r2, #6
 8004b38:	d006      	beq.n	8004b48 <HAL_TIM_Base_Start+0x64>
 8004b3a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8004b3e:	d003      	beq.n	8004b48 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	f042 0201 	orr.w	r2, r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8004b48:	2000      	movs	r0, #0
 8004b4a:	4770      	bx	lr
    return HAL_ERROR;
 8004b4c:	2001      	movs	r0, #1
}
 8004b4e:	4770      	bx	lr
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	00010007 	.word	0x00010007

08004b58 <HAL_TIM_Encoder_MspInit>:
/**
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop

08004b5c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b5c:	4a3e      	ldr	r2, [pc, #248]	@ (8004c58 <TIM_Base_SetConfig+0xfc>)
  tmpcr1 = TIMx->CR1;
 8004b5e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b60:	4290      	cmp	r0, r2
{
 8004b62:	b410      	push	{r4}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b64:	d049      	beq.n	8004bfa <TIM_Base_SetConfig+0x9e>
 8004b66:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004b6a:	d029      	beq.n	8004bc0 <TIM_Base_SetConfig+0x64>
 8004b6c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004b70:	4290      	cmp	r0, r2
 8004b72:	d025      	beq.n	8004bc0 <TIM_Base_SetConfig+0x64>
 8004b74:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004b78:	4290      	cmp	r0, r2
 8004b7a:	d021      	beq.n	8004bc0 <TIM_Base_SetConfig+0x64>
 8004b7c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004b80:	4290      	cmp	r0, r2
 8004b82:	d01d      	beq.n	8004bc0 <TIM_Base_SetConfig+0x64>
 8004b84:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8004b88:	4290      	cmp	r0, r2
 8004b8a:	d04a      	beq.n	8004c22 <TIM_Base_SetConfig+0xc6>
 8004b8c:	f502 52e0 	add.w	r2, r2, #7168	@ 0x1c00
 8004b90:	4290      	cmp	r0, r2
 8004b92:	d032      	beq.n	8004bfa <TIM_Base_SetConfig+0x9e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b94:	f5a2 5280 	sub.w	r2, r2, #4096	@ 0x1000
 8004b98:	4290      	cmp	r0, r2
 8004b9a:	d047      	beq.n	8004c2c <TIM_Base_SetConfig+0xd0>
 8004b9c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004ba0:	4290      	cmp	r0, r2
 8004ba2:	d043      	beq.n	8004c2c <TIM_Base_SetConfig+0xd0>
 8004ba4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004ba8:	4290      	cmp	r0, r2
 8004baa:	d045      	beq.n	8004c38 <TIM_Base_SetConfig+0xdc>

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bac:	680a      	ldr	r2, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bae:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb0:	6949      	ldr	r1, [r1, #20]
 8004bb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bb6:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004bb8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bba:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004bbc:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bbe:	e010      	b.n	8004be2 <TIM_Base_SetConfig+0x86>
    tmpcr1 |= Structure->CounterMode;
 8004bc0:	684a      	ldr	r2, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bc2:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004bc8:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bce:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bd0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bd6:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bd8:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8004bda:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8004bdc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bde:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004be0:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004be2:	2301      	movs	r3, #1
 8004be4:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004be6:	6903      	ldr	r3, [r0, #16]
 8004be8:	07db      	lsls	r3, r3, #31
 8004bea:	d503      	bpl.n	8004bf4 <TIM_Base_SetConfig+0x98>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004bec:	6903      	ldr	r3, [r0, #16]
 8004bee:	f023 0301 	bic.w	r3, r3, #1
 8004bf2:	6103      	str	r3, [r0, #16]
  }
}
 8004bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bf8:	4770      	bx	lr
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bfa:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bfc:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004c02:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c08:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c0a:	694a      	ldr	r2, [r1, #20]
 8004c0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c10:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004c12:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c14:	688b      	ldr	r3, [r1, #8]
 8004c16:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004c18:	680b      	ldr	r3, [r1, #0]
 8004c1a:	6283      	str	r3, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004c1c:	690b      	ldr	r3, [r1, #16]
 8004c1e:	6303      	str	r3, [r0, #48]	@ 0x30
 8004c20:	e7df      	b.n	8004be2 <TIM_Base_SetConfig+0x86>
    tmpcr1 |= Structure->CounterMode;
 8004c22:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c24:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004c2a:	e7ea      	b.n	8004c02 <TIM_Base_SetConfig+0xa6>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c2c:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c2e:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c34:	4323      	orrs	r3, r4
 8004c36:	e7e9      	b.n	8004c0c <TIM_Base_SetConfig+0xb0>
 8004c38:	68cc      	ldr	r4, [r1, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c3a:	694a      	ldr	r2, [r1, #20]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c40:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c46:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004c48:	4a04      	ldr	r2, [pc, #16]	@ (8004c5c <TIM_Base_SetConfig+0x100>)
 8004c4a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c4c:	688b      	ldr	r3, [r1, #8]
 8004c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004c50:	680b      	ldr	r3, [r1, #0]
 8004c52:	6293      	str	r3, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c54:	e7e2      	b.n	8004c1c <TIM_Base_SetConfig+0xc0>
 8004c56:	bf00      	nop
 8004c58:	40012c00 	.word	0x40012c00
 8004c5c:	40014800 	.word	0x40014800

08004c60 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 8004c60:	b370      	cbz	r0, 8004cc0 <HAL_TIM_IC_Init+0x60>
{
 8004c62:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004c64:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004c68:	4604      	mov	r4, r0
 8004c6a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004c6e:	b313      	cbz	r3, 8004cb6 <HAL_TIM_IC_Init+0x56>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c70:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8004c72:	2302      	movs	r3, #2
 8004c74:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c78:	f851 0b04 	ldr.w	r0, [r1], #4
 8004c7c:	f7ff ff6e 	bl	8004b5c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c80:	2301      	movs	r3, #1
 8004c82:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c86:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004c8a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004c8e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004c92:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8004c96:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004c9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004ca2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8004ca6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8004caa:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004cae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004cb2:	2000      	movs	r0, #0
}
 8004cb4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004cb6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_IC_MspInit(htim);
 8004cba:	f7fc fd97 	bl	80017ec <HAL_TIM_IC_MspInit>
 8004cbe:	e7d7      	b.n	8004c70 <HAL_TIM_IC_Init+0x10>
    return HAL_ERROR;
 8004cc0:	2001      	movs	r0, #1
}
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	d051      	beq.n	8004d6c <HAL_TIM_Encoder_Init+0xa8>
{
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004cca:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004cce:	460d      	mov	r5, r1
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d043      	beq.n	8004d62 <HAL_TIM_Encoder_Init+0x9e>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004cda:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8004cdc:	2302      	movs	r3, #2
 8004cde:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ce2:	f851 0b04 	ldr.w	r0, [r1], #4
 8004ce6:	6883      	ldr	r3, [r0, #8]
 8004ce8:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004cec:	f023 0307 	bic.w	r3, r3, #7
 8004cf0:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf2:	f7ff ff33 	bl	8004b5c <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8004cf6:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8004cf8:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004cfa:	69a9      	ldr	r1, [r5, #24]
 8004cfc:	68aa      	ldr	r2, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004cfe:	6a2f      	ldr	r7, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d04:	f023 0303 	bic.w	r3, r3, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004d08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004d0c:	431a      	orrs	r2, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d0e:	692b      	ldr	r3, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004d10:	69e9      	ldr	r1, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004d18:	68e9      	ldr	r1, [r5, #12]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d1a:	f422 427c 	bic.w	r2, r2, #64512	@ 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d1e:	430b      	orrs	r3, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004d20:	f022 02fc 	bic.w	r2, r2, #252	@ 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d24:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccer = htim->Instance->CCER;
 8004d28:	6a01      	ldr	r1, [r0, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d2a:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004d2c:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d2e:	686a      	ldr	r2, [r5, #4]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004d30:	f021 01aa 	bic.w	r1, r1, #170	@ 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004d34:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 8004d38:	4311      	orrs	r1, r2
  tmpsmcr |= sConfig->EncoderMode;
 8004d3a:	682a      	ldr	r2, [r5, #0]
 8004d3c:	4316      	orrs	r6, r2
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d3e:	2201      	movs	r2, #1
  htim->Instance->SMCR = tmpsmcr;
 8004d40:	6086      	str	r6, [r0, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8004d42:	6183      	str	r3, [r0, #24]
  htim->Instance->CCER = tmpccer;
 8004d44:	6201      	str	r1, [r0, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d46:	f884 2048 	strb.w	r2, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d4a:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d4e:	f884 203f 	strb.w	r2, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004d52:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004d56:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004d5a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004d5e:	2000      	movs	r0, #0
}
 8004d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 8004d62:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8004d66:	f7ff fef7 	bl	8004b58 <HAL_TIM_Encoder_MspInit>
 8004d6a:	e7b6      	b.n	8004cda <HAL_TIM_Encoder_Init+0x16>
    return HAL_ERROR;
 8004d6c:	2001      	movs	r0, #1
}
 8004d6e:	4770      	bx	lr

08004d70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d70:	b470      	push	{r4, r5, r6}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d72:	6a05      	ldr	r5, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d74:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d76:	4e1a      	ldr	r6, [pc, #104]	@ (8004de0 <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d78:	f024 0401 	bic.w	r4, r4, #1
 8004d7c:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d7e:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 8004d80:	6984      	ldr	r4, [r0, #24]
{
 8004d82:	4694      	mov	ip, r2
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d84:	d01c      	beq.n	8004dc0 <TIM_TI1_SetConfig+0x50>
 8004d86:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004d8a:	d019      	beq.n	8004dc0 <TIM_TI1_SetConfig+0x50>
 8004d8c:	4a15      	ldr	r2, [pc, #84]	@ (8004de4 <TIM_TI1_SetConfig+0x74>)
 8004d8e:	4290      	cmp	r0, r2
 8004d90:	d016      	beq.n	8004dc0 <TIM_TI1_SetConfig+0x50>
 8004d92:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004d96:	4290      	cmp	r0, r2
 8004d98:	d012      	beq.n	8004dc0 <TIM_TI1_SetConfig+0x50>
 8004d9a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004d9e:	4290      	cmp	r0, r2
 8004da0:	d00e      	beq.n	8004dc0 <TIM_TI1_SetConfig+0x50>
 8004da2:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8004da6:	4290      	cmp	r0, r2
 8004da8:	d00a      	beq.n	8004dc0 <TIM_TI1_SetConfig+0x50>
 8004daa:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8004dae:	4290      	cmp	r0, r2
 8004db0:	d006      	beq.n	8004dc0 <TIM_TI1_SetConfig+0x50>
 8004db2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004db6:	4290      	cmp	r0, r2
 8004db8:	d002      	beq.n	8004dc0 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
    tmpccmr1 |= TIM_ICSelection;
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004dba:	f044 0201 	orr.w	r2, r4, #1
 8004dbe:	e003      	b.n	8004dc8 <TIM_TI1_SetConfig+0x58>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004dc0:	f024 0203 	bic.w	r2, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8004dc4:	ea42 020c 	orr.w	r2, r2, ip
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dc8:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004dcc:	f001 010a 	and.w	r1, r1, #10
 8004dd0:	4329      	orrs	r1, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004dd2:	f363 1207 	bfi	r2, r3, #4, #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dd6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
}
 8004dd8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8004dda:	6201      	str	r1, [r0, #32]
}
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40012c00 	.word	0x40012c00
 8004de4:	40000400 	.word	0x40000400

08004de8 <HAL_TIM_IC_ConfigChannel>:
  __HAL_LOCK(htim);
 8004de8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	f000 808d 	beq.w	8004f0c <HAL_TIM_IC_ConfigChannel+0x124>
 8004df2:	2301      	movs	r3, #1
{
 8004df4:	b570      	push	{r4, r5, r6, lr}
 8004df6:	4604      	mov	r4, r0
 8004df8:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8004dfa:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (Channel == TIM_CHANNEL_1)
 8004dfe:	2a0c      	cmp	r2, #12
 8004e00:	d808      	bhi.n	8004e14 <HAL_TIM_IC_ConfigChannel+0x2c>
 8004e02:	e8df f002 	tbb	[pc, r2]
 8004e06:	0732      	.short	0x0732
 8004e08:	07410707 	.word	0x07410707
 8004e0c:	07630707 	.word	0x07630707
 8004e10:	0707      	.short	0x0707
 8004e12:	0c          	.byte	0x0c
 8004e13:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8004e14:	2300      	movs	r3, #0
 8004e16:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  __HAL_LOCK(htim);
 8004e1a:	2001      	movs	r0, #1
}
 8004e1c:	bd70      	pop	{r4, r5, r6, pc}
    TIM_TI4_SetConfig(htim->Instance,
 8004e1e:	6803      	ldr	r3, [r0, #0]
                      sConfig->ICFilter);
 8004e20:	68ee      	ldr	r6, [r5, #12]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e22:	68ad      	ldr	r5, [r5, #8]
                      sConfig->ICSelection,
 8004e24:	e9d1 2000 	ldrd	r2, r0, [r1]
{
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004e28:	6a19      	ldr	r1, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e2a:	0312      	lsls	r2, r2, #12
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004e2c:	f421 4120 	bic.w	r1, r1, #40960	@ 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004e30:	f402 4220 	and.w	r2, r2, #40960	@ 0xa000
 8004e34:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e36:	6a19      	ldr	r1, [r3, #32]
 8004e38:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
 8004e3c:	6219      	str	r1, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e3e:	69d9      	ldr	r1, [r3, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004e40:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004e44:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004e48:	f366 310f 	bfi	r1, r6, #12, #4

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e4c:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004e4e:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e50:	69da      	ldr	r2, [r3, #28]
 8004e52:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004e56:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e58:	69da      	ldr	r2, [r3, #28]
 8004e5a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004e5e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004e60:	2300      	movs	r3, #0
 8004e62:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004e66:	2000      	movs	r0, #0
}
 8004e68:	bd70      	pop	{r4, r5, r6, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8004e6a:	6800      	ldr	r0, [r0, #0]
 8004e6c:	68cb      	ldr	r3, [r1, #12]
 8004e6e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8004e72:	f7ff ff7d 	bl	8004d70 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e76:	6983      	ldr	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e78:	68aa      	ldr	r2, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004e7a:	f023 030c 	bic.w	r3, r3, #12
 8004e7e:	6183      	str	r3, [r0, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e80:	6983      	ldr	r3, [r0, #24]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	6183      	str	r3, [r0, #24]
 8004e86:	e7eb      	b.n	8004e60 <HAL_TIM_IC_ConfigChannel+0x78>
    TIM_TI2_SetConfig(htim->Instance,
 8004e88:	6803      	ldr	r3, [r0, #0]
                      sConfig->ICFilter);
 8004e8a:	68ee      	ldr	r6, [r5, #12]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e8c:	68ad      	ldr	r5, [r5, #8]
                      sConfig->ICSelection,
 8004e8e:	e9d1 2000 	ldrd	r2, r0, [r1]
  tmpccer = TIMx->CCER;
 8004e92:	6a19      	ldr	r1, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004e94:	0112      	lsls	r2, r2, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e96:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004e9a:	f002 02a0 	and.w	r2, r2, #160	@ 0xa0
 8004e9e:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea0:	6a19      	ldr	r1, [r3, #32]
 8004ea2:	f021 0110 	bic.w	r1, r1, #16
 8004ea6:	6219      	str	r1, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea8:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004eaa:	f421 7140 	bic.w	r1, r1, #768	@ 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004eae:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004eb2:	f366 310f 	bfi	r1, r6, #12, #4
  TIMx->CCMR1 = tmpccmr1 ;
 8004eb6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb8:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004eba:	699a      	ldr	r2, [r3, #24]
 8004ebc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004ec0:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004ec2:	699a      	ldr	r2, [r3, #24]
 8004ec4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004ec8:	619a      	str	r2, [r3, #24]
 8004eca:	e7c9      	b.n	8004e60 <HAL_TIM_IC_ConfigChannel+0x78>
    TIM_TI3_SetConfig(htim->Instance,
 8004ecc:	6803      	ldr	r3, [r0, #0]
                      sConfig->ICFilter);
 8004ece:	68ee      	ldr	r6, [r5, #12]
  tmpccer = TIMx->CCER;
 8004ed0:	6a18      	ldr	r0, [r3, #32]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004ed2:	68ad      	ldr	r5, [r5, #8]
                      sConfig->ICSelection,
 8004ed4:	e9d1 2100 	ldrd	r2, r1, [r1]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004ed8:	0212      	lsls	r2, r2, #8
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004eda:	f420 6020 	bic.w	r0, r0, #2560	@ 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004ede:	f402 6220 	and.w	r2, r2, #2560	@ 0xa00
 8004ee2:	4302      	orrs	r2, r0
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ee4:	6a18      	ldr	r0, [r3, #32]
 8004ee6:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8004eea:	6218      	str	r0, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004eec:	69d8      	ldr	r0, [r3, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004eee:	f020 0003 	bic.w	r0, r0, #3
  tmpccmr2 |= TIM_ICSelection;
 8004ef2:	4301      	orrs	r1, r0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004ef4:	f366 1107 	bfi	r1, r6, #4, #4
  TIMx->CCMR2 = tmpccmr2;
 8004ef8:	61d9      	str	r1, [r3, #28]
  TIMx->CCER = tmpccer;
 8004efa:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004efc:	69da      	ldr	r2, [r3, #28]
 8004efe:	f022 020c 	bic.w	r2, r2, #12
 8004f02:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004f04:	69da      	ldr	r2, [r3, #28]
 8004f06:	432a      	orrs	r2, r5
 8004f08:	61da      	str	r2, [r3, #28]
 8004f0a:	e7a9      	b.n	8004e60 <HAL_TIM_IC_ConfigChannel+0x78>
  __HAL_LOCK(htim);
 8004f0c:	2002      	movs	r0, #2
}
 8004f0e:	4770      	bx	lr

08004f10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f10:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f12:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f14:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f16:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f1a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004f1e:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f20:	6082      	str	r2, [r0, #8]
}
 8004f22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f28:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d04f      	beq.n	8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
{
 8004f30:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f32:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f34:	4d27      	ldr	r5, [pc, #156]	@ (8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004f36:	2302      	movs	r3, #2
 8004f38:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f3c:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8004f3e:	6853      	ldr	r3, [r2, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f40:	680c      	ldr	r4, [r1, #0]
 8004f42:	4684      	mov	ip, r0
  tmpsmcr = htim->Instance->SMCR;
 8004f44:	6890      	ldr	r0, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f46:	d01d      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
 8004f48:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8004f4c:	42aa      	cmp	r2, r5
 8004f4e:	d034      	beq.n	8004fba <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8004f50:	f505 55e0 	add.w	r5, r5, #7168	@ 0x1c00
 8004f54:	42aa      	cmp	r2, r5
 8004f56:	d015      	beq.n	8004f84 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f58:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f60:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f62:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8004f66:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f68:	d117      	bne.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f6a:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f6c:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f70:	4318      	orrs	r0, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f72:	6090      	str	r0, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004f74:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004f76:	2301      	movs	r3, #1
 8004f78:	f88c 303d 	strb.w	r3, [ip, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004f7c:	f88c 003c 	strb.w	r0, [ip, #60]	@ 0x3c

  return HAL_OK;
}
 8004f80:	bc30      	pop	{r4, r5}
 8004f82:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f84:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f86:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f8a:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f8c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004f90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f94:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8004f96:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f98:	e7e7      	b.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d0e4      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004fa0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d0e0      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004fa8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d0dc      	beq.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x42>
 8004fb0:	f503 339a 	add.w	r3, r3, #78848	@ 0x13400
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d1dd      	bne.n	8004f74 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004fb8:	e7d7      	b.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x42>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fba:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fbc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fc0:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fc2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fca:	431c      	orrs	r4, r3
  htim->Instance->CR2 = tmpcr2;
 8004fcc:	6054      	str	r4, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fce:	e7cc      	b.n	8004f6a <HAL_TIMEx_MasterConfigSynchronization+0x42>
  __HAL_LOCK(htim);
 8004fd0:	2002      	movs	r0, #2
}
 8004fd2:	4770      	bx	lr
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40000400 	.word	0x40000400

08004fdc <HAL_TIMEx_ConfigEncoderIndex>:
  assert_param(IS_FUNCTIONAL_STATE(sEncoderIndexConfig->FirstIndexEnable));
  assert_param(IS_TIM_ENCODERINDEX_POSITION(sEncoderIndexConfig->Position));
  assert_param(IS_TIM_ENCODERINDEX_DIRECTION(sEncoderIndexConfig->Direction));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fdc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d023      	beq.n	800502c <HAL_TIMEx_ConfigEncoderIndex+0x50>
 8004fe4:	2301      	movs	r3, #1
{
 8004fe6:	b570      	push	{r4, r5, r6, lr}
 8004fe8:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 8004fea:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c

  /* Configures the TIMx External Trigger (ETR) which is used as Index input */
  TIM_ETR_SetConfig(htim->Instance,
 8004fee:	4605      	mov	r5, r0
 8004ff0:	688b      	ldr	r3, [r1, #8]
 8004ff2:	6800      	ldr	r0, [r0, #0]
 8004ff4:	e9d1 2100 	ldrd	r2, r1, [r1]
 8004ff8:	f7ff ff8a 	bl	8004f10 <TIM_ETR_SetConfig>
                    sEncoderIndexConfig->Prescaler,
                    sEncoderIndexConfig->Polarity,
                    sEncoderIndexConfig->Filter);

  /* Configures the encoder index */
  MODIFY_REG(htim->Instance->ECR,
 8004ffc:	7b21      	ldrb	r1, [r4, #12]
 8004ffe:	6828      	ldr	r0, [r5, #0]
 8005000:	e9d4 6304 	ldrd	r6, r3, [r4, #16]
 8005004:	f1a1 0101 	sub.w	r1, r1, #1
 8005008:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 800500a:	fab1 f181 	clz	r1, r1
 800500e:	4333      	orrs	r3, r6
 8005010:	0949      	lsrs	r1, r1, #5
 8005012:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8005016:	f022 02e6 	bic.w	r2, r2, #230	@ 0xe6
 800501a:	4313      	orrs	r3, r2
 800501c:	f043 0301 	orr.w	r3, r3, #1
             (sEncoderIndexConfig->Direction |
              ((sEncoderIndexConfig->FirstIndexEnable == ENABLE) ? (0x1U << TIM_ECR_FIDX_Pos) : 0U) |
              sEncoderIndexConfig->Position |
              TIM_ECR_IE));

  __HAL_UNLOCK(htim);
 8005020:	2200      	movs	r2, #0
  MODIFY_REG(htim->Instance->ECR,
 8005022:	6583      	str	r3, [r0, #88]	@ 0x58
  __HAL_UNLOCK(htim);
 8005024:	f885 203c 	strb.w	r2, [r5, #60]	@ 0x3c

  return HAL_OK;
 8005028:	4610      	mov	r0, r2
}
 800502a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800502c:	2002      	movs	r0, #2
}
 800502e:	4770      	bx	lr

08005030 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005030:	b410      	push	{r4}
 8005032:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005034:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005038:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	e842 3100 	strex	r1, r3, [r2]
 8005040:	2900      	cmp	r1, #0
 8005042:	d1f7      	bne.n	8005034 <UART_EndRxTransfer+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005044:	4c14      	ldr	r4, [pc, #80]	@ (8005098 <UART_EndRxTransfer+0x68>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005046:	f102 0308 	add.w	r3, r2, #8
 800504a:	e853 3f00 	ldrex	r3, [r3]
 800504e:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	f102 0c08 	add.w	ip, r2, #8
 8005054:	e84c 3100 	strex	r1, r3, [ip]
 8005058:	2900      	cmp	r1, #0
 800505a:	d1f4      	bne.n	8005046 <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800505e:	2b01      	cmp	r3, #1
 8005060:	d008      	beq.n	8005074 <UART_EndRxTransfer+0x44>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005062:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005064:	2220      	movs	r2, #32
 8005066:	f8c0 208c 	str.w	r2, [r0, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
}
 800506a:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart->RxISR = NULL;
 800506e:	6743      	str	r3, [r0, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005070:	66c3      	str	r3, [r0, #108]	@ 0x6c
}
 8005072:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005078:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	e842 3100 	strex	r1, r3, [r2]
 8005080:	2900      	cmp	r1, #0
 8005082:	d0ee      	beq.n	8005062 <UART_EndRxTransfer+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005084:	e852 3f00 	ldrex	r3, [r2]
 8005088:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	e842 3100 	strex	r1, r3, [r2]
 8005090:	2900      	cmp	r1, #0
 8005092:	d1ef      	bne.n	8005074 <UART_EndRxTransfer+0x44>
 8005094:	e7e5      	b.n	8005062 <UART_EndRxTransfer+0x32>
 8005096:	bf00      	nop
 8005098:	effffffe 	.word	0xeffffffe

0800509c <UART_SetConfig>:
{
 800509c:	b570      	push	{r4, r5, r6, lr}
 800509e:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050a0:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050a2:	6882      	ldr	r2, [r0, #8]
 80050a4:	6900      	ldr	r0, [r0, #16]
 80050a6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050a8:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050aa:	4302      	orrs	r2, r0
 80050ac:	430a      	orrs	r2, r1
 80050ae:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050b0:	4997      	ldr	r1, [pc, #604]	@ (8005310 <UART_SetConfig+0x274>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050b2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050b4:	4029      	ands	r1, r5
 80050b6:	430a      	orrs	r2, r1
 80050b8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050ba:	685a      	ldr	r2, [r3, #4]
 80050bc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050be:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050c0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80050c4:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050c6:	4993      	ldr	r1, [pc, #588]	@ (8005314 <UART_SetConfig+0x278>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050c8:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050ca:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050cc:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050ce:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050d0:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 80050d4:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050d8:	f000 80c1 	beq.w	800525e <UART_SetConfig+0x1c2>
    tmpreg |= huart->Init.OneBitSampling;
 80050dc:	6a26      	ldr	r6, [r4, #32]
 80050de:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050e0:	430a      	orrs	r2, r1
 80050e2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e6:	f022 020f 	bic.w	r2, r2, #15
 80050ea:	432a      	orrs	r2, r5
 80050ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050ee:	4a8a      	ldr	r2, [pc, #552]	@ (8005318 <UART_SetConfig+0x27c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d039      	beq.n	8005168 <UART_SetConfig+0xcc>
 80050f4:	4a89      	ldr	r2, [pc, #548]	@ (800531c <UART_SetConfig+0x280>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d011      	beq.n	800511e <UART_SetConfig+0x82>
 80050fa:	4a89      	ldr	r2, [pc, #548]	@ (8005320 <UART_SetConfig+0x284>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d059      	beq.n	80051b4 <UART_SetConfig+0x118>
 8005100:	4a88      	ldr	r2, [pc, #544]	@ (8005324 <UART_SetConfig+0x288>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d044      	beq.n	8005190 <UART_SetConfig+0xf4>
 8005106:	4a88      	ldr	r2, [pc, #544]	@ (8005328 <UART_SetConfig+0x28c>)
 8005108:	4293      	cmp	r3, r2
 800510a:	f000 809b 	beq.w	8005244 <UART_SetConfig+0x1a8>
        ret = HAL_ERROR;
 800510e:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8005110:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8005112:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 8005116:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 800511a:	66a2      	str	r2, [r4, #104]	@ 0x68
}
 800511c:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800511e:	4b83      	ldr	r3, [pc, #524]	@ (800532c <UART_SetConfig+0x290>)
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005124:	f003 030c 	and.w	r3, r3, #12
 8005128:	2b0c      	cmp	r3, #12
 800512a:	d8f0      	bhi.n	800510e <UART_SetConfig+0x72>
 800512c:	a201      	add	r2, pc, #4	@ (adr r2, 8005134 <UART_SetConfig+0x98>)
 800512e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005132:	bf00      	nop
 8005134:	08005239 	.word	0x08005239
 8005138:	0800510f 	.word	0x0800510f
 800513c:	0800510f 	.word	0x0800510f
 8005140:	0800510f 	.word	0x0800510f
 8005144:	080051a7 	.word	0x080051a7
 8005148:	0800510f 	.word	0x0800510f
 800514c:	0800510f 	.word	0x0800510f
 8005150:	0800510f 	.word	0x0800510f
 8005154:	080051fb 	.word	0x080051fb
 8005158:	0800510f 	.word	0x0800510f
 800515c:	0800510f 	.word	0x0800510f
 8005160:	0800510f 	.word	0x0800510f
 8005164:	080051c9 	.word	0x080051c9
 8005168:	4b70      	ldr	r3, [pc, #448]	@ (800532c <UART_SetConfig+0x290>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d041      	beq.n	80051fa <UART_SetConfig+0x15e>
 8005176:	2b03      	cmp	r3, #3
 8005178:	d026      	beq.n	80051c8 <UART_SetConfig+0x12c>
 800517a:	2b01      	cmp	r3, #1
 800517c:	d013      	beq.n	80051a6 <UART_SetConfig+0x10a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800517e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8005182:	f000 80b3 	beq.w	80052ec <UART_SetConfig+0x250>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005186:	f7ff fb0f 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 800518a:	b3a0      	cbz	r0, 80051f6 <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800518c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800518e:	e020      	b.n	80051d2 <UART_SetConfig+0x136>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005190:	4b66      	ldr	r3, [pc, #408]	@ (800532c <UART_SetConfig+0x290>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005196:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800519a:	2b80      	cmp	r3, #128	@ 0x80
 800519c:	d02d      	beq.n	80051fa <UART_SetConfig+0x15e>
 800519e:	f200 809b 	bhi.w	80052d8 <UART_SetConfig+0x23c>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d048      	beq.n	8005238 <UART_SetConfig+0x19c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051a6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80051aa:	f000 80a7 	beq.w	80052fc <UART_SetConfig+0x260>
        pclk = HAL_RCC_GetSysClockFreq();
 80051ae:	f7ff f9ad 	bl	800450c <HAL_RCC_GetSysClockFreq>
        break;
 80051b2:	e7ea      	b.n	800518a <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80051b4:	4b5d      	ldr	r3, [pc, #372]	@ (800532c <UART_SetConfig+0x290>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80051be:	2b20      	cmp	r3, #32
 80051c0:	d01b      	beq.n	80051fa <UART_SetConfig+0x15e>
 80051c2:	d9ee      	bls.n	80051a2 <UART_SetConfig+0x106>
 80051c4:	2b30      	cmp	r3, #48	@ 0x30
 80051c6:	d1a2      	bne.n	800510e <UART_SetConfig+0x72>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051c8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80051cc:	d019      	beq.n	8005202 <UART_SetConfig+0x166>
        pclk = (uint32_t) LSE_VALUE;
 80051ce:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051d2:	6863      	ldr	r3, [r4, #4]
 80051d4:	4a56      	ldr	r2, [pc, #344]	@ (8005330 <UART_SetConfig+0x294>)
 80051d6:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 80051da:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051de:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051e2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80051e6:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ea:	f1a0 0310 	sub.w	r3, r0, #16
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d88d      	bhi.n	800510e <UART_SetConfig+0x72>
          huart->Instance->BRR = usartdiv;
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	60d8      	str	r0, [r3, #12]
        ret = HAL_ERROR;
 80051f6:	2000      	movs	r0, #0
 80051f8:	e78a      	b.n	8005110 <UART_SetConfig+0x74>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051fa:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80051fe:	484d      	ldr	r0, [pc, #308]	@ (8005334 <UART_SetConfig+0x298>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005200:	d1e7      	bne.n	80051d2 <UART_SetConfig+0x136>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005202:	6862      	ldr	r2, [r4, #4]
 8005204:	4b4a      	ldr	r3, [pc, #296]	@ (8005330 <UART_SetConfig+0x294>)
 8005206:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 800520a:	fbb0 f0f1 	udiv	r0, r0, r1
 800520e:	0853      	lsrs	r3, r2, #1
 8005210:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005214:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005218:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800521c:	f1a3 0210 	sub.w	r2, r3, #16
 8005220:	428a      	cmp	r2, r1
 8005222:	f63f af74 	bhi.w	800510e <UART_SetConfig+0x72>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005226:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 800522a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800522c:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800522e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8005232:	4313      	orrs	r3, r2
 8005234:	60cb      	str	r3, [r1, #12]
 8005236:	e7de      	b.n	80051f6 <UART_SetConfig+0x15a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005238:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800523c:	d050      	beq.n	80052e0 <UART_SetConfig+0x244>
        pclk = HAL_RCC_GetPCLK1Freq();
 800523e:	f7ff faa1 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
        break;
 8005242:	e7a2      	b.n	800518a <UART_SetConfig+0xee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005244:	4b39      	ldr	r3, [pc, #228]	@ (800532c <UART_SetConfig+0x290>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800524e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005252:	d0d2      	beq.n	80051fa <UART_SetConfig+0x15e>
 8005254:	d9a5      	bls.n	80051a2 <UART_SetConfig+0x106>
 8005256:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800525a:	d0b5      	beq.n	80051c8 <UART_SetConfig+0x12c>
 800525c:	e757      	b.n	800510e <UART_SetConfig+0x72>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800525e:	4311      	orrs	r1, r2
 8005260:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005264:	4931      	ldr	r1, [pc, #196]	@ (800532c <UART_SetConfig+0x290>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005266:	f022 020f 	bic.w	r2, r2, #15
 800526a:	432a      	orrs	r2, r5
 800526c:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800526e:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8005272:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005276:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800527a:	d03a      	beq.n	80052f2 <UART_SetConfig+0x256>
 800527c:	d841      	bhi.n	8005302 <UART_SetConfig+0x266>
 800527e:	2b00      	cmp	r3, #0
 8005280:	d039      	beq.n	80052f6 <UART_SetConfig+0x25a>
        pclk = HAL_RCC_GetSysClockFreq();
 8005282:	f7ff f943 	bl	800450c <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8005286:	2800      	cmp	r0, #0
 8005288:	d0b5      	beq.n	80051f6 <UART_SetConfig+0x15a>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800528a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800528c:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800528e:	4b28      	ldr	r3, [pc, #160]	@ (8005330 <UART_SetConfig+0x294>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005290:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005294:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8005298:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800529c:	4299      	cmp	r1, r3
 800529e:	f63f af36 	bhi.w	800510e <UART_SetConfig+0x72>
 80052a2:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80052a6:	f63f af32 	bhi.w	800510e <UART_SetConfig+0x72>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052aa:	2300      	movs	r3, #0
 80052ac:	4619      	mov	r1, r3
 80052ae:	f7fb f8df 	bl	8000470 <__aeabi_uldivmod>
 80052b2:	0872      	lsrs	r2, r6, #1
 80052b4:	0203      	lsls	r3, r0, #8
 80052b6:	0209      	lsls	r1, r1, #8
 80052b8:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80052bc:	1898      	adds	r0, r3, r2
 80052be:	f141 0100 	adc.w	r1, r1, #0
 80052c2:	4632      	mov	r2, r6
 80052c4:	2300      	movs	r3, #0
 80052c6:	f7fb f8d3 	bl	8000470 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005338 <UART_SetConfig+0x29c>)
 80052cc:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80052d0:	429a      	cmp	r2, r3
 80052d2:	f63f af1c 	bhi.w	800510e <UART_SetConfig+0x72>
 80052d6:	e78c      	b.n	80051f2 <UART_SetConfig+0x156>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052d8:	2bc0      	cmp	r3, #192	@ 0xc0
 80052da:	f43f af75 	beq.w	80051c8 <UART_SetConfig+0x12c>
 80052de:	e716      	b.n	800510e <UART_SetConfig+0x72>
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e0:	f7ff fa50 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d086      	beq.n	80051f6 <UART_SetConfig+0x15a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052e8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80052ea:	e78a      	b.n	8005202 <UART_SetConfig+0x166>
        pclk = HAL_RCC_GetPCLK2Freq();
 80052ec:	f7ff fa5c 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
        break;
 80052f0:	e7f8      	b.n	80052e4 <UART_SetConfig+0x248>
        pclk = (uint32_t) HSI_VALUE;
 80052f2:	4810      	ldr	r0, [pc, #64]	@ (8005334 <UART_SetConfig+0x298>)
 80052f4:	e7ca      	b.n	800528c <UART_SetConfig+0x1f0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80052f6:	f7ff fa45 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
        break;
 80052fa:	e7c4      	b.n	8005286 <UART_SetConfig+0x1ea>
        pclk = HAL_RCC_GetSysClockFreq();
 80052fc:	f7ff f906 	bl	800450c <HAL_RCC_GetSysClockFreq>
        break;
 8005300:	e7f0      	b.n	80052e4 <UART_SetConfig+0x248>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005302:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005306:	f47f af02 	bne.w	800510e <UART_SetConfig+0x72>
        pclk = (uint32_t) LSE_VALUE;
 800530a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800530e:	e7bd      	b.n	800528c <UART_SetConfig+0x1f0>
 8005310:	cfff69f3 	.word	0xcfff69f3
 8005314:	40008000 	.word	0x40008000
 8005318:	40013800 	.word	0x40013800
 800531c:	40004400 	.word	0x40004400
 8005320:	40004800 	.word	0x40004800
 8005324:	40004c00 	.word	0x40004c00
 8005328:	40005000 	.word	0x40005000
 800532c:	40021000 	.word	0x40021000
 8005330:	08009200 	.word	0x08009200
 8005334:	00f42400 	.word	0x00f42400
 8005338:	000ffcff 	.word	0x000ffcff

0800533c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800533c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800533e:	071a      	lsls	r2, r3, #28
{
 8005340:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005342:	d506      	bpl.n	8005352 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005344:	6801      	ldr	r1, [r0, #0]
 8005346:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8005348:	684a      	ldr	r2, [r1, #4]
 800534a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800534e:	4322      	orrs	r2, r4
 8005350:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005352:	07dc      	lsls	r4, r3, #31
 8005354:	d506      	bpl.n	8005364 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005356:	6801      	ldr	r1, [r0, #0]
 8005358:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800535a:	684a      	ldr	r2, [r1, #4]
 800535c:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005360:	4322      	orrs	r2, r4
 8005362:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005364:	0799      	lsls	r1, r3, #30
 8005366:	d506      	bpl.n	8005376 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005368:	6801      	ldr	r1, [r0, #0]
 800536a:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800536c:	684a      	ldr	r2, [r1, #4]
 800536e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005372:	4322      	orrs	r2, r4
 8005374:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005376:	075a      	lsls	r2, r3, #29
 8005378:	d506      	bpl.n	8005388 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800537a:	6801      	ldr	r1, [r0, #0]
 800537c:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800537e:	684a      	ldr	r2, [r1, #4]
 8005380:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005384:	4322      	orrs	r2, r4
 8005386:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005388:	06dc      	lsls	r4, r3, #27
 800538a:	d506      	bpl.n	800539a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800538c:	6801      	ldr	r1, [r0, #0]
 800538e:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8005390:	688a      	ldr	r2, [r1, #8]
 8005392:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005396:	4322      	orrs	r2, r4
 8005398:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800539a:	0699      	lsls	r1, r3, #26
 800539c:	d506      	bpl.n	80053ac <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800539e:	6801      	ldr	r1, [r0, #0]
 80053a0:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80053a2:	688a      	ldr	r2, [r1, #8]
 80053a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053a8:	4322      	orrs	r2, r4
 80053aa:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053ac:	065a      	lsls	r2, r3, #25
 80053ae:	d509      	bpl.n	80053c4 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053b0:	6801      	ldr	r1, [r0, #0]
 80053b2:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 80053b4:	684a      	ldr	r2, [r1, #4]
 80053b6:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80053ba:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053bc:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053c0:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053c2:	d00b      	beq.n	80053dc <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053c4:	061b      	lsls	r3, r3, #24
 80053c6:	d506      	bpl.n	80053d6 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053c8:	6802      	ldr	r2, [r0, #0]
 80053ca:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80053cc:	6853      	ldr	r3, [r2, #4]
 80053ce:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80053d2:	430b      	orrs	r3, r1
 80053d4:	6053      	str	r3, [r2, #4]
}
 80053d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80053da:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053dc:	684a      	ldr	r2, [r1, #4]
 80053de:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80053e0:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80053e4:	4322      	orrs	r2, r4
 80053e6:	604a      	str	r2, [r1, #4]
 80053e8:	e7ec      	b.n	80053c4 <UART_AdvFeatureConfig+0x88>
 80053ea:	bf00      	nop

080053ec <UART_WaitOnFlagUntilTimeout>:
{
 80053ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053f0:	9f08      	ldr	r7, [sp, #32]
 80053f2:	460c      	mov	r4, r1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f4:	6801      	ldr	r1, [r0, #0]
{
 80053f6:	4606      	mov	r6, r0
 80053f8:	4615      	mov	r5, r2
 80053fa:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053fc:	69ca      	ldr	r2, [r1, #28]
 80053fe:	ea34 0202 	bics.w	r2, r4, r2
 8005402:	bf0c      	ite	eq
 8005404:	2201      	moveq	r2, #1
 8005406:	2200      	movne	r2, #0
 8005408:	42aa      	cmp	r2, r5
 800540a:	d109      	bne.n	8005420 <UART_WaitOnFlagUntilTimeout+0x34>
    if (Timeout != HAL_MAX_DELAY)
 800540c:	1c78      	adds	r0, r7, #1
 800540e:	d10b      	bne.n	8005428 <UART_WaitOnFlagUntilTimeout+0x3c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005410:	69cb      	ldr	r3, [r1, #28]
 8005412:	ea34 0303 	bics.w	r3, r4, r3
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	42ab      	cmp	r3, r5
 800541e:	d0f7      	beq.n	8005410 <UART_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005428:	f7fc fb42 	bl	8001ab0 <HAL_GetTick>
 800542c:	eba0 0008 	sub.w	r0, r0, r8
 8005430:	42b8      	cmp	r0, r7
 8005432:	d81a      	bhi.n	800546a <UART_WaitOnFlagUntilTimeout+0x7e>
 8005434:	b1cf      	cbz	r7, 800546a <UART_WaitOnFlagUntilTimeout+0x7e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005436:	6831      	ldr	r1, [r6, #0]
 8005438:	680b      	ldr	r3, [r1, #0]
 800543a:	075a      	lsls	r2, r3, #29
 800543c:	d5de      	bpl.n	80053fc <UART_WaitOnFlagUntilTimeout+0x10>
 800543e:	2c80      	cmp	r4, #128	@ 0x80
 8005440:	d0dc      	beq.n	80053fc <UART_WaitOnFlagUntilTimeout+0x10>
 8005442:	2c40      	cmp	r4, #64	@ 0x40
 8005444:	d0da      	beq.n	80053fc <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005446:	69cb      	ldr	r3, [r1, #28]
 8005448:	f013 0908 	ands.w	r9, r3, #8
 800544c:	d10f      	bne.n	800546e <UART_WaitOnFlagUntilTimeout+0x82>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800544e:	69ca      	ldr	r2, [r1, #28]
 8005450:	0513      	lsls	r3, r2, #20
 8005452:	d5d3      	bpl.n	80053fc <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005454:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005458:	620a      	str	r2, [r1, #32]
          UART_EndRxTransfer(huart);
 800545a:	4630      	mov	r0, r6
 800545c:	f7ff fde8 	bl	8005030 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005460:	2220      	movs	r2, #32
 8005462:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8005466:	f886 9084 	strb.w	r9, [r6, #132]	@ 0x84
        return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e7d9      	b.n	8005422 <UART_WaitOnFlagUntilTimeout+0x36>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800546e:	2408      	movs	r4, #8
 8005470:	620c      	str	r4, [r1, #32]
          UART_EndRxTransfer(huart);
 8005472:	4630      	mov	r0, r6
 8005474:	f7ff fddc 	bl	8005030 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 8005478:	2200      	movs	r2, #0
          return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800547c:	f8c6 4090 	str.w	r4, [r6, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8005480:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
          return HAL_ERROR;
 8005484:	e7cd      	b.n	8005422 <UART_WaitOnFlagUntilTimeout+0x36>
 8005486:	bf00      	nop

08005488 <UART_CheckIdleState>:
{
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548c:	2600      	movs	r6, #0
{
 800548e:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005490:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8005494:	f7fc fb0c 	bl	8001ab0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 800549e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054a0:	d410      	bmi.n	80054c4 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	075b      	lsls	r3, r3, #29
 80054a6:	d427      	bmi.n	80054f8 <UART_CheckIdleState+0x70>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054a8:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80054aa:	2220      	movs	r2, #32
 80054ac:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 80054b0:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80054b2:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b6:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b8:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 80054ba:	2300      	movs	r3, #0
 80054bc:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 80054c0:	b002      	add	sp, #8
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	4632      	mov	r2, r6
 80054cc:	4603      	mov	r3, r0
 80054ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054d2:	4620      	mov	r0, r4
 80054d4:	f7ff ff8a 	bl	80053ec <UART_WaitOnFlagUntilTimeout>
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	2800      	cmp	r0, #0
 80054dc:	d0e1      	beq.n	80054a2 <UART_CheckIdleState+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054de:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80054e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	e843 2100 	strex	r1, r2, [r3]
 80054ea:	2900      	cmp	r1, #0
 80054ec:	d1f7      	bne.n	80054de <UART_CheckIdleState+0x56>
      huart->gState = HAL_UART_STATE_READY;
 80054ee:	2320      	movs	r3, #32
 80054f0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 80054f4:	2003      	movs	r0, #3
 80054f6:	e7e0      	b.n	80054ba <UART_CheckIdleState+0x32>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	2200      	movs	r2, #0
 8005500:	462b      	mov	r3, r5
 8005502:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005506:	4620      	mov	r0, r4
 8005508:	f7ff ff70 	bl	80053ec <UART_WaitOnFlagUntilTimeout>
 800550c:	2800      	cmp	r0, #0
 800550e:	d0cb      	beq.n	80054a8 <UART_CheckIdleState+0x20>
 8005510:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005512:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005516:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	e843 2100 	strex	r1, r2, [r3]
 800551e:	2900      	cmp	r1, #0
 8005520:	d1f7      	bne.n	8005512 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005522:	f103 0208 	add.w	r2, r3, #8
 8005526:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552e:	f103 0008 	add.w	r0, r3, #8
 8005532:	e840 2100 	strex	r1, r2, [r0]
 8005536:	2900      	cmp	r1, #0
 8005538:	d1f3      	bne.n	8005522 <UART_CheckIdleState+0x9a>
      huart->RxState = HAL_UART_STATE_READY;
 800553a:	2320      	movs	r3, #32
 800553c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8005540:	e7d8      	b.n	80054f4 <UART_CheckIdleState+0x6c>
 8005542:	bf00      	nop

08005544 <HAL_UART_Init>:
  if (huart == NULL)
 8005544:	b380      	cbz	r0, 80055a8 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005546:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800554a:	b510      	push	{r4, lr}
 800554c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800554e:	b333      	cbz	r3, 800559e <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8005550:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005552:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8005554:	2324      	movs	r3, #36	@ 0x24
 8005556:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800555a:	6813      	ldr	r3, [r2, #0]
 800555c:	f023 0301 	bic.w	r3, r3, #1
 8005560:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005562:	b9c1      	cbnz	r1, 8005596 <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005564:	4620      	mov	r0, r4
 8005566:	f7ff fd99 	bl	800509c <UART_SetConfig>
 800556a:	2801      	cmp	r0, #1
 800556c:	d011      	beq.n	8005592 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	685a      	ldr	r2, [r3, #4]
 8005572:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005576:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800557e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8005586:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8005588:	601a      	str	r2, [r3, #0]
}
 800558a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800558e:	f7ff bf7b 	b.w	8005488 <UART_CheckIdleState>
}
 8005592:	2001      	movs	r0, #1
 8005594:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8005596:	4620      	mov	r0, r4
 8005598:	f7ff fed0 	bl	800533c <UART_AdvFeatureConfig>
 800559c:	e7e2      	b.n	8005564 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800559e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80055a2:	f7fc f869 	bl	8001678 <HAL_UART_MspInit>
 80055a6:	e7d3      	b.n	8005550 <HAL_UART_Init+0xc>
}
 80055a8:	2001      	movs	r0, #1
 80055aa:	4770      	bx	lr

080055ac <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055ac:	6803      	ldr	r3, [r0, #0]
 80055ae:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055b0:	689b      	ldr	r3, [r3, #8]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 80055b2:	b430      	push	{r4, r5}
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055b4:	ea4f 7c53 	mov.w	ip, r3, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055b8:	4d0a      	ldr	r5, [pc, #40]	@ (80055e4 <UARTEx_SetNbDataToProcess.part.0+0x38>)
                               (uint16_t)denominator[tx_fifo_threshold];
 80055ba:	4c0b      	ldr	r4, [pc, #44]	@ (80055e8 <UARTEx_SetNbDataToProcess.part.0+0x3c>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055bc:	f815 200c 	ldrb.w	r2, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055c0:	f3c1 6142 	ubfx	r1, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055c4:	00d2      	lsls	r2, r2, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055c6:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 80055c8:	f814 500c 	ldrb.w	r5, [r4, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 80055cc:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055ce:	fbb2 f2f5 	udiv	r2, r2, r5
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055d2:	00db      	lsls	r3, r3, #3
  }
}
 80055d4:	bc30      	pop	{r4, r5}
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055d6:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055da:	f8a0 206a 	strh.w	r2, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055de:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
}
 80055e2:	4770      	bx	lr
 80055e4:	08009220 	.word	0x08009220
 80055e8:	08009218 	.word	0x08009218

080055ec <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 80055ec:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d019      	beq.n	8005628 <HAL_UARTEx_EnableFifoMode+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055f4:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80055f6:	2224      	movs	r2, #36	@ 0x24
{
 80055f8:	b510      	push	{r4, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80055fa:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055fe:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005600:	6819      	ldr	r1, [r3, #0]
 8005602:	f021 0101 	bic.w	r1, r1, #1
 8005606:	6019      	str	r1, [r3, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005608:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800560c:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
 8005610:	4604      	mov	r4, r0
 8005612:	6641      	str	r1, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005614:	601a      	str	r2, [r3, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005616:	f7ff ffc9 	bl	80055ac <UARTEx_SetNbDataToProcess.part.0>
  __HAL_UNLOCK(huart);
 800561a:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800561c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800561e:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 8005622:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 8005626:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8005628:	2002      	movs	r0, #2
}
 800562a:	4770      	bx	lr

0800562c <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800562c:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8005630:	2b01      	cmp	r3, #1
 8005632:	d017      	beq.n	8005664 <HAL_UARTEx_DisableFifoMode+0x38>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005634:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005636:	2324      	movs	r3, #36	@ 0x24
{
 8005638:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 800563a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800563e:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005640:	6814      	ldr	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005642:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8005644:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005648:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800564c:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800564e:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005650:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(huart);
 8005652:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 8005656:	2220      	movs	r2, #32
 8005658:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
}
 800565c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8005660:	4618      	mov	r0, r3
}
 8005662:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005664:	2002      	movs	r0, #2
}
 8005666:	4770      	bx	lr

08005668 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 8005668:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800566c:	2b01      	cmp	r3, #1
 800566e:	d01f      	beq.n	80056b0 <HAL_UARTEx_SetTxFifoThreshold+0x48>
{
 8005670:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8005672:	2324      	movs	r3, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005674:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8005676:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800567a:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800567c:	682b      	ldr	r3, [r5, #0]
 800567e:	f023 0301 	bic.w	r3, r3, #1
 8005682:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005684:	68ab      	ldr	r3, [r5, #8]
 8005686:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800568a:	4319      	orrs	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800568c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800568e:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005690:	4604      	mov	r4, r0
 8005692:	b14b      	cbz	r3, 80056a8 <HAL_UARTEx_SetTxFifoThreshold+0x40>
 8005694:	f7ff ff8a 	bl	80055ac <UARTEx_SetNbDataToProcess.part.0>
  __HAL_UNLOCK(huart);
 8005698:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800569a:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800569c:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800569e:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 80056a2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 80056a6:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 80056a8:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80056ac:	6683      	str	r3, [r0, #104]	@ 0x68
 80056ae:	e7f3      	b.n	8005698 <HAL_UARTEx_SetTxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 80056b0:	2002      	movs	r0, #2
}
 80056b2:	4770      	bx	lr

080056b4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80056b4:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d01f      	beq.n	80056fc <HAL_UARTEx_SetRxFifoThreshold+0x48>
{
 80056bc:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80056be:	2324      	movs	r3, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056c0:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80056c2:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056c6:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	f023 0301 	bic.w	r3, r3, #1
 80056ce:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056d0:	68ab      	ldr	r3, [r5, #8]
 80056d2:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 80056d6:	4319      	orrs	r1, r3
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056d8:	6e43      	ldr	r3, [r0, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80056da:	60a9      	str	r1, [r5, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056dc:	4604      	mov	r4, r0
 80056de:	b14b      	cbz	r3, 80056f4 <HAL_UARTEx_SetRxFifoThreshold+0x40>
 80056e0:	f7ff ff64 	bl	80055ac <UARTEx_SetNbDataToProcess.part.0>
  __HAL_UNLOCK(huart);
 80056e4:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056e6:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 80056e8:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80056ea:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 80056ee:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 80056f4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80056f8:	6683      	str	r3, [r0, #104]	@ 0x68
 80056fa:	e7f3      	b.n	80056e4 <HAL_UARTEx_SetRxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 80056fc:	2002      	movs	r0, #2
}
 80056fe:	4770      	bx	lr

08005700 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005704:	680d      	ldr	r5, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005706:	fa95 f2a5 	rbit	r2, r5
  if (value == 0U)
 800570a:	2a00      	cmp	r2, #0
 800570c:	f000 808e 	beq.w	800582c <LL_GPIO_Init+0x12c>
  return __builtin_clz(value);
 8005710:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005714:	fa35 f302 	lsrs.w	r3, r5, r2
 8005718:	f000 8088 	beq.w	800582c <LL_GPIO_Init+0x12c>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800571c:	f04f 0c01 	mov.w	ip, #1
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005720:	f04f 0e03 	mov.w	lr, #3
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005724:	43ef      	mvns	r7, r5
 8005726:	e01a      	b.n	800575e <LL_GPIO_Init+0x5e>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005728:	f8d0 8000 	ldr.w	r8, [r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800572c:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8005730:	b134      	cbz	r4, 8005740 <LL_GPIO_Init+0x40>
  return __builtin_clz(value);
 8005732:	fab4 f484 	clz	r4, r4
 8005736:	0064      	lsls	r4, r4, #1
 8005738:	fa0e f404 	lsl.w	r4, lr, r4
 800573c:	ea28 0804 	bic.w	r8, r8, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005740:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8005744:	b12b      	cbz	r3, 8005752 <LL_GPIO_Init+0x52>
  return __builtin_clz(value);
 8005746:	fab3 f383 	clz	r3, r3
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	409e      	lsls	r6, r3
 800574e:	ea48 0806 	orr.w	r8, r8, r6
 8005752:	f8c0 8000 	str.w	r8, [r0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 8005756:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005758:	fa35 f302 	lsrs.w	r3, r5, r2
 800575c:	d066      	beq.n	800582c <LL_GPIO_Init+0x12c>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800575e:	fa0c f302 	lsl.w	r3, ip, r2
    if (currentpin != 0x00u)
 8005762:	402b      	ands	r3, r5
 8005764:	d0f7      	beq.n	8005756 <LL_GPIO_Init+0x56>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005766:	684e      	ldr	r6, [r1, #4]
 8005768:	1e74      	subs	r4, r6, #1
 800576a:	2c01      	cmp	r4, #1
 800576c:	d93a      	bls.n	80057e4 <LL_GPIO_Init+0xe4>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800576e:	f8d1 9010 	ldr.w	r9, [r1, #16]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005772:	f8d0 800c 	ldr.w	r8, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005776:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800577a:	b134      	cbz	r4, 800578a <LL_GPIO_Init+0x8a>
  return __builtin_clz(value);
 800577c:	fab4 f484 	clz	r4, r4
 8005780:	0064      	lsls	r4, r4, #1
 8005782:	fa0e f404 	lsl.w	r4, lr, r4
 8005786:	ea28 0804 	bic.w	r8, r8, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578a:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 800578e:	b134      	cbz	r4, 800579e <LL_GPIO_Init+0x9e>
  return __builtin_clz(value);
 8005790:	fab4 f484 	clz	r4, r4
 8005794:	0064      	lsls	r4, r4, #1
 8005796:	fa09 f904 	lsl.w	r9, r9, r4
 800579a:	ea48 0809 	orr.w	r8, r8, r9
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800579e:	2e02      	cmp	r6, #2
 80057a0:	f8c0 800c 	str.w	r8, [r0, #12]
 80057a4:	d1c0      	bne.n	8005728 <LL_GPIO_Init+0x28>
        if (currentpin < LL_GPIO_PIN_8)
 80057a6:	2bff      	cmp	r3, #255	@ 0xff
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80057a8:	f8d1 8014 	ldr.w	r8, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 80057ac:	d841      	bhi.n	8005832 <LL_GPIO_Init+0x132>
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80057ae:	f8d0 9020 	ldr.w	r9, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b2:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 80057b6:	b144      	cbz	r4, 80057ca <LL_GPIO_Init+0xca>
  return __builtin_clz(value);
 80057b8:	fab4 f484 	clz	r4, r4
 80057bc:	00a4      	lsls	r4, r4, #2
 80057be:	f04f 0a0f 	mov.w	sl, #15
 80057c2:	fa0a f404 	lsl.w	r4, sl, r4
 80057c6:	ea29 0904 	bic.w	r9, r9, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ca:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 80057ce:	b134      	cbz	r4, 80057de <LL_GPIO_Init+0xde>
  return __builtin_clz(value);
 80057d0:	fab4 f484 	clz	r4, r4
 80057d4:	00a4      	lsls	r4, r4, #2
 80057d6:	fa08 f404 	lsl.w	r4, r8, r4
 80057da:	ea49 0904 	orr.w	r9, r9, r4
 80057de:	f8c0 9020 	str.w	r9, [r0, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80057e2:	e7a1      	b.n	8005728 <LL_GPIO_Init+0x28>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80057e4:	f8d1 9008 	ldr.w	r9, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80057e8:	f8d0 8008 	ldr.w	r8, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ec:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 80057f0:	b134      	cbz	r4, 8005800 <LL_GPIO_Init+0x100>
  return __builtin_clz(value);
 80057f2:	fab4 f484 	clz	r4, r4
 80057f6:	0064      	lsls	r4, r4, #1
 80057f8:	fa0e f404 	lsl.w	r4, lr, r4
 80057fc:	ea28 0804 	bic.w	r8, r8, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005800:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8005804:	b134      	cbz	r4, 8005814 <LL_GPIO_Init+0x114>
  return __builtin_clz(value);
 8005806:	fab4 f484 	clz	r4, r4
 800580a:	0064      	lsls	r4, r4, #1
 800580c:	fa09 f904 	lsl.w	r9, r9, r4
 8005810:	ea48 0809 	orr.w	r8, r8, r9
 8005814:	f8c0 8008 	str.w	r8, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005818:	6844      	ldr	r4, [r0, #4]
 800581a:	ea07 0804 	and.w	r8, r7, r4
 800581e:	68cc      	ldr	r4, [r1, #12]
 8005820:	fb05 f404 	mul.w	r4, r5, r4
 8005824:	ea48 0404 	orr.w	r4, r8, r4
 8005828:	6044      	str	r4, [r0, #4]
}
 800582a:	e7a0      	b.n	800576e <LL_GPIO_Init+0x6e>
  }
  return (SUCCESS);
}
 800582c:	2000      	movs	r0, #0
 800582e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005832:	f8d0 9024 	ldr.w	r9, [r0, #36]	@ 0x24
 8005836:	0a1c      	lsrs	r4, r3, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005838:	fa94 faa4 	rbit	sl, r4
  if (value == 0U)
 800583c:	f1ba 0f00 	cmp.w	sl, #0
 8005840:	d009      	beq.n	8005856 <LL_GPIO_Init+0x156>
  return __builtin_clz(value);
 8005842:	faba fa8a 	clz	sl, sl
 8005846:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800584a:	f04f 0b0f 	mov.w	fp, #15
 800584e:	fa0b fa0a 	lsl.w	sl, fp, sl
 8005852:	ea29 090a 	bic.w	r9, r9, sl
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005856:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800585a:	b134      	cbz	r4, 800586a <LL_GPIO_Init+0x16a>
  return __builtin_clz(value);
 800585c:	fab4 f484 	clz	r4, r4
 8005860:	00a4      	lsls	r4, r4, #2
 8005862:	fa08 f804 	lsl.w	r8, r8, r4
 8005866:	ea49 0908 	orr.w	r9, r9, r8
 800586a:	f8c0 9024 	str.w	r9, [r0, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800586e:	e75b      	b.n	8005728 <LL_GPIO_Init+0x28>

08005870 <LL_SPI_Init>:
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8005870:	6803      	ldr	r3, [r0, #0]
 8005872:	065b      	lsls	r3, r3, #25
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8005874:	4602      	mov	r2, r0
 8005876:	d432      	bmi.n	80058de <LL_SPI_Init+0x6e>
 8005878:	b430      	push	{r4, r5}
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800587a:	6814      	ldr	r4, [r2, #0]
 800587c:	6948      	ldr	r0, [r1, #20]
 800587e:	e9d1 3500 	ldrd	r3, r5, [r1]
 8005882:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00
 8005886:	68cc      	ldr	r4, [r1, #12]
 8005888:	432b      	orrs	r3, r5
 800588a:	4323      	orrs	r3, r4
 800588c:	690c      	ldr	r4, [r1, #16]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 800588e:	688d      	ldr	r5, [r1, #8]
    MODIFY_REG(SPIx->CR1,
 8005890:	4323      	orrs	r3, r4
 8005892:	698c      	ldr	r4, [r1, #24]
 8005894:	4303      	orrs	r3, r0
 8005896:	4323      	orrs	r3, r4
 8005898:	69cc      	ldr	r4, [r1, #28]
 800589a:	4323      	orrs	r3, r4
 800589c:	6a0c      	ldr	r4, [r1, #32]
 800589e:	f02c 0cbf 	bic.w	ip, ip, #191	@ 0xbf
 80058a2:	4323      	orrs	r3, r4
 80058a4:	ea43 030c 	orr.w	r3, r3, ip
 80058a8:	6013      	str	r3, [r2, #0]
    MODIFY_REG(SPIx->CR2,
 80058aa:	6853      	ldr	r3, [r2, #4]
 80058ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80058b0:	f023 0304 	bic.w	r3, r3, #4
 80058b4:	ea45 4010 	orr.w	r0, r5, r0, lsr #16
 80058b8:	4318      	orrs	r0, r3
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80058ba:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
    MODIFY_REG(SPIx->CR2,
 80058be:	6050      	str	r0, [r2, #4]
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 80058c0:	d203      	bcs.n	80058ca <LL_SPI_Init+0x5a>
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80058c2:	6853      	ldr	r3, [r2, #4]
 80058c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80058c8:	6053      	str	r3, [r2, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80058ca:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 80058ce:	d00c      	beq.n	80058ea <LL_SPI_Init+0x7a>
    status = SUCCESS;
  }

#if defined (SPI_I2S_SUPPORT)
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058d0:	69d3      	ldr	r3, [r2, #28]
 80058d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    status = SUCCESS;
 80058d6:	2000      	movs	r0, #0
#endif /* SPI_I2S_SUPPORT */
  return status;
}
 80058d8:	bc30      	pop	{r4, r5}
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058da:	61d3      	str	r3, [r2, #28]
}
 80058dc:	4770      	bx	lr
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058de:	69d3      	ldr	r3, [r2, #28]
 80058e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  ErrorStatus status = ERROR;
 80058e4:	2001      	movs	r0, #1
  CLEAR_BIT(SPIx->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058e6:	61d3      	str	r3, [r2, #28]
}
 80058e8:	4770      	bx	lr
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80058ea:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
 80058ec:	6113      	str	r3, [r2, #16]
}
 80058ee:	e7ef      	b.n	80058d0 <LL_SPI_Init+0x60>

080058f0 <Add_Float32_Update>:
/** Update                                                                                                           **/
/**********************************************************************************************************************/
void Add_Float32_Update(ADD_FLOAT32 *pTAdd_Float32)
{
/* USERCODE-BEGIN:UpdateFnc                                                                                           */
	OUT = IN1 + IN2;
 80058f0:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
 80058f4:	edd2 7a00 	vldr	s15, [r2]
 80058f8:	ed93 7a00 	vldr	s14, [r3]
 80058fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005900:	edc0 7a03 	vstr	s15, [r0, #12]

/* USERCODE-END:UpdateFnc                                                                                             */

}
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop

08005908 <Add_Float32_Init>:
/** Initialization                                                                                                   **/
/**********************************************************************************************************************/
void Add_Float32_Init(ADD_FLOAT32 *pTAdd_Float32)
{
    pTAdd_Float32->ID = ADD_FLOAT32_ID;
    pTAdd_Float32->Out = 0;
 8005908:	2300      	movs	r3, #0
    pTAdd_Float32->ID = ADD_FLOAT32_ID;
 800590a:	f241 3263 	movw	r2, #4963	@ 0x1363
 800590e:	8002      	strh	r2, [r0, #0]
    pTAdd_Float32->Out = 0;
 8005910:	60c3      	str	r3, [r0, #12]
/* USERCODE-BEGIN:InitFnc                                                                                             */
/* USERCODE-END:InitFnc                                                                                               */
}
 8005912:	4770      	bx	lr

08005914 <Add_Float32_GetAddress>:
/**********************************************************************************************************************/
#if !defined(ADD_FLOAT32_ISLINKED)
void* Add_Float32_GetAddress(const ADD_FLOAT32* block, uint16 elementId)
{
    void* addr;
    switch (elementId)
 8005914:	2902      	cmp	r1, #2
 8005916:	d007      	beq.n	8005928 <Add_Float32_GetAddress+0x14>
 8005918:	2903      	cmp	r1, #3
 800591a:	d003      	beq.n	8005924 <Add_Float32_GetAddress+0x10>
 800591c:	2901      	cmp	r1, #1
 800591e:	d105      	bne.n	800592c <Add_Float32_GetAddress+0x18>
    {
        case 1:
            addr = (void*)block->In1;
 8005920:	6840      	ldr	r0, [r0, #4]
            break;
 8005922:	4770      	bx	lr
        case 2:
            addr = (void*)block->In2;
            break;
        case 3:
            addr = (void*)&block->Out;
 8005924:	300c      	adds	r0, #12
            break;
 8005926:	4770      	bx	lr
            addr = (void*)block->In2;
 8005928:	6880      	ldr	r0, [r0, #8]
            break;
 800592a:	4770      	bx	lr
    switch (elementId)
 800592c:	2000      	movs	r0, #0
        default:
            addr = (void*)0;
            break;
    }
    return (addr);
}
 800592e:	4770      	bx	lr

08005930 <And_Bool_Update>:
/** Update                                                                                                           **/
/**********************************************************************************************************************/
void And_Bool_Update(AND_BOOL *pTAnd_Bool)
{
/* USERCODE-BEGIN:UpdateFnc                                                                                           */
	OUT = IN1 && IN2;
 8005930:	6843      	ldr	r3, [r0, #4]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	b10b      	cbz	r3, 800593a <And_Bool_Update+0xa>
 8005936:	6883      	ldr	r3, [r0, #8]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	7303      	strb	r3, [r0, #12]

/* USERCODE-END:UpdateFnc                                                                                             */

}
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop

08005940 <And_Bool_Init>:
/**********************************************************************************************************************/
/** Initialization                                                                                                   **/
/**********************************************************************************************************************/
void And_Bool_Init(AND_BOOL *pTAnd_Bool)
{
    pTAnd_Bool->ID = AND_BOOL_ID;
 8005940:	22ff      	movs	r2, #255	@ 0xff
    pTAnd_Bool->Out = 0;
 8005942:	2300      	movs	r3, #0
    pTAnd_Bool->ID = AND_BOOL_ID;
 8005944:	8002      	strh	r2, [r0, #0]
    pTAnd_Bool->Out = 0;
 8005946:	7303      	strb	r3, [r0, #12]
/* USERCODE-BEGIN:InitFnc                                                                                             */
/* USERCODE-END:InitFnc                                                                                               */
}
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop

0800594c <And_Bool_GetAddress>:
/**********************************************************************************************************************/
#if !defined(AND_BOOL_ISLINKED)
void* And_Bool_GetAddress(const AND_BOOL* block, uint16 elementId)
{
    void* addr;
    switch (elementId)
 800594c:	2902      	cmp	r1, #2
 800594e:	d007      	beq.n	8005960 <And_Bool_GetAddress+0x14>
 8005950:	2903      	cmp	r1, #3
 8005952:	d003      	beq.n	800595c <And_Bool_GetAddress+0x10>
 8005954:	2901      	cmp	r1, #1
 8005956:	d105      	bne.n	8005964 <And_Bool_GetAddress+0x18>
    {
        case 1:
            addr = (void*)block->In1;
 8005958:	6840      	ldr	r0, [r0, #4]
            break;
 800595a:	4770      	bx	lr
        case 2:
            addr = (void*)block->In2;
            break;
        case 3:
            addr = (void*)&block->Out;
 800595c:	300c      	adds	r0, #12
            break;
 800595e:	4770      	bx	lr
            addr = (void*)block->In2;
 8005960:	6880      	ldr	r0, [r0, #8]
            break;
 8005962:	4770      	bx	lr
    switch (elementId)
 8005964:	2000      	movs	r0, #0
        default:
            addr = (void*)0;
            break;
    }
    return (addr);
}
 8005966:	4770      	bx	lr

08005968 <Constant_Float32_Init>:
void Constant_Float32_Init(CONSTANT_FLOAT32 *pTConstant_Float32)
{
    pTConstant_Float32->ID = CONSTANT_FLOAT32_ID;
    pTConstant_Float32->Out = 0;
/* USERCODE-BEGIN:InitFnc                                                                                             */
     OUT = VALUE;
 8005968:	6883      	ldr	r3, [r0, #8]
 800596a:	6043      	str	r3, [r0, #4]
    pTConstant_Float32->ID = CONSTANT_FLOAT32_ID;
 800596c:	2233      	movs	r2, #51	@ 0x33
 800596e:	8002      	strh	r2, [r0, #0]
/* USERCODE-END:InitFnc                                                                                               */
}
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop

08005974 <Constant_Float32_Load>:
/** Load block data                                                                                                  **/
/**********************************************************************************************************************/
uint8 Constant_Float32_Load(const CONSTANT_FLOAT32 *pTConstant_Float32, uint8 data[], uint16 *dataLength, uint16 maxSize)
{
    uint8 error = (uint8)0;
    if ((uint16)4 > maxSize)
 8005974:	2b03      	cmp	r3, #3
 8005976:	d90e      	bls.n	8005996 <Constant_Float32_Load+0x22>
    {
        error = (uint8)1;
    }
    else
    {
        data[0] = (uint8)((*(uint32*)&(pTConstant_Float32->K)) & 0x000000FF);
 8005978:	6883      	ldr	r3, [r0, #8]
 800597a:	700b      	strb	r3, [r1, #0]
        data[1] = (uint8)((*(uint32*)&(pTConstant_Float32->K) >> 8) & 0x000000FF);
 800597c:	6883      	ldr	r3, [r0, #8]
 800597e:	0a1b      	lsrs	r3, r3, #8
 8005980:	704b      	strb	r3, [r1, #1]
        data[2] = (uint8)((*(uint32*)&(pTConstant_Float32->K) >> 16) & 0x000000FF);
 8005982:	8943      	ldrh	r3, [r0, #10]
 8005984:	708b      	strb	r3, [r1, #2]
        data[3] = (uint8)((*(uint32*)&(pTConstant_Float32->K) >> 24) & 0x000000FF);
 8005986:	7ac3      	ldrb	r3, [r0, #11]
 8005988:	70cb      	strb	r3, [r1, #3]
        *dataLength = (uint16)4;
 800598a:	f04f 0c04 	mov.w	ip, #4
    uint8 error = (uint8)0;
 800598e:	2000      	movs	r0, #0
        *dataLength = (uint16)4;
 8005990:	f8a2 c000 	strh.w	ip, [r2]
 8005994:	4770      	bx	lr
        error = (uint8)1;
 8005996:	2001      	movs	r0, #1
/* USERCODE-BEGIN:LoadFnc                                                                                             */
/* USERCODE-END:LoadFnc                                                                                               */
    }
    return (error);
}
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop

0800599c <Constant_Float32_Save>:
uint8 Constant_Float32_Save(CONSTANT_FLOAT32 *pTConstant_Float32, const uint8 data[], uint16 dataLength)
{
    uint8 error;
    uint32 tmp32;

    if (dataLength != (uint16)4)
 800599c:	2a04      	cmp	r2, #4
{
 800599e:	4603      	mov	r3, r0
    if (dataLength != (uint16)4)
 80059a0:	d001      	beq.n	80059a6 <Constant_Float32_Save+0xa>
    {
        error = (uint8)1;
 80059a2:	2001      	movs	r0, #1
/* USERCODE-BEGIN:SaveFnc                                                                                             */
          OUT = VALUE;
/* USERCODE-END:SaveFnc                                                                                               */
    }
    return (error);
}
 80059a4:	4770      	bx	lr
        pTConstant_Float32->K = (float32)(*(float32*)&tmp32);
 80059a6:	680a      	ldr	r2, [r1, #0]
 80059a8:	609a      	str	r2, [r3, #8]
        error = (uint8)0;
 80059aa:	2000      	movs	r0, #0
          OUT = VALUE;
 80059ac:	605a      	str	r2, [r3, #4]
 80059ae:	4770      	bx	lr

080059b0 <Constant_Float32_GetAddress>:
/**********************************************************************************************************************/
#if !defined(CONSTANT_FLOAT32_ISLINKED)
void* Constant_Float32_GetAddress(const CONSTANT_FLOAT32* block, uint16 elementId)
{
    void* addr;
    switch (elementId)
 80059b0:	2901      	cmp	r1, #1
    {
        case 1:
            addr = (void*)&block->Out;
 80059b2:	bf0c      	ite	eq
 80059b4:	3004      	addeq	r0, #4
            break;
        default:
            addr = (void*)0;
 80059b6:	2000      	movne	r0, #0
            break;
    }
    return (addr);
}
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop

080059bc <Div_Float32_Update>:
void Div_Float32_Update(DIV_FLOAT32 *pTDiv_Float32)
{
/* USERCODE-BEGIN:UpdateFnc                                                                                           */
	if (IN2 == 0)
	{
		if (IN1 > 0)
 80059bc:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	if (IN2 == 0)
 80059c0:	edd2 7a00 	vldr	s15, [r2]
		if (IN1 > 0)
 80059c4:	ed93 7a00 	vldr	s14, [r3]
	if (IN2 == 0)
 80059c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80059cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d0:	d109      	bne.n	80059e6 <Div_Float32_Update+0x2a>
		if (IN1 > 0)
 80059d2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80059d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059da:	dd09      	ble.n	80059f0 <Div_Float32_Update+0x34>
 80059dc:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8005a04 <Div_Float32_Update+0x48>
			OUT = FLOAT32_MAX;
		}
		else if (IN1 < 0)
		{
			/* -x/0 -> negative infinite */
			OUT = FLOAT32_MIN;
 80059e0:	edc0 6a03 	vstr	s13, [r0, #12]
		OUT = IN1 / IN2;
	}

/* USERCODE-END:UpdateFnc                                                                                             */

}
 80059e4:	4770      	bx	lr
		OUT = IN1 / IN2;
 80059e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
			OUT = FLOAT32_MIN;
 80059ea:	edc0 6a03 	vstr	s13, [r0, #12]
}
 80059ee:	4770      	bx	lr
		else if (IN1 < 0)
 80059f0:	d404      	bmi.n	80059fc <Div_Float32_Update+0x40>
 80059f2:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8005a08 <Div_Float32_Update+0x4c>
			OUT = FLOAT32_MIN;
 80059f6:	edc0 6a03 	vstr	s13, [r0, #12]
}
 80059fa:	4770      	bx	lr
 80059fc:	eddf 6a03 	vldr	s13, [pc, #12]	@ 8005a0c <Div_Float32_Update+0x50>
 8005a00:	e7f3      	b.n	80059ea <Div_Float32_Update+0x2e>
 8005a02:	bf00      	nop
 8005a04:	7f7fffff 	.word	0x7f7fffff
 8005a08:	00000000 	.word	0x00000000
 8005a0c:	ff7fffff 	.word	0xff7fffff

08005a10 <Div_Float32_Init>:
/** Initialization                                                                                                   **/
/**********************************************************************************************************************/
void Div_Float32_Init(DIV_FLOAT32 *pTDiv_Float32)
{
    pTDiv_Float32->ID = DIV_FLOAT32_ID;
    pTDiv_Float32->Out = 0;
 8005a10:	2300      	movs	r3, #0
    pTDiv_Float32->ID = DIV_FLOAT32_ID;
 8005a12:	f241 3243 	movw	r2, #4931	@ 0x1343
 8005a16:	8002      	strh	r2, [r0, #0]
    pTDiv_Float32->Out = 0;
 8005a18:	60c3      	str	r3, [r0, #12]
/* USERCODE-BEGIN:InitFnc                                                                                             */
/* USERCODE-END:InitFnc                                                                                               */
}
 8005a1a:	4770      	bx	lr

08005a1c <Div_Float32_GetAddress>:
/**********************************************************************************************************************/
#if !defined(DIV_FLOAT32_ISLINKED)
void* Div_Float32_GetAddress(const DIV_FLOAT32* block, uint16 elementId)
{
    void* addr;
    switch (elementId)
 8005a1c:	2902      	cmp	r1, #2
 8005a1e:	d007      	beq.n	8005a30 <Div_Float32_GetAddress+0x14>
 8005a20:	2903      	cmp	r1, #3
 8005a22:	d003      	beq.n	8005a2c <Div_Float32_GetAddress+0x10>
 8005a24:	2901      	cmp	r1, #1
 8005a26:	d105      	bne.n	8005a34 <Div_Float32_GetAddress+0x18>
    {
        case 1:
            addr = (void*)block->Num;
 8005a28:	6840      	ldr	r0, [r0, #4]
            break;
 8005a2a:	4770      	bx	lr
        case 2:
            addr = (void*)block->Den;
            break;
        case 3:
            addr = (void*)&block->Out;
 8005a2c:	300c      	adds	r0, #12
            break;
 8005a2e:	4770      	bx	lr
            addr = (void*)block->Den;
 8005a30:	6880      	ldr	r0, [r0, #8]
            break;
 8005a32:	4770      	bx	lr
    switch (elementId)
 8005a34:	2000      	movs	r0, #0
        default:
            addr = (void*)0;
            break;
    }
    return (addr);
}
 8005a36:	4770      	bx	lr

08005a38 <Gain_Float32_Update>:
/** Update                                                                                                           **/
/**********************************************************************************************************************/
void Gain_Float32_Update(GAIN_FLOAT32 *pTGain_Float32)
{
/* USERCODE-BEGIN:UpdateFnc                                                                                           */
	OUT = IN * GAIN;
 8005a38:	6843      	ldr	r3, [r0, #4]
 8005a3a:	ed90 7a03 	vldr	s14, [r0, #12]
 8005a3e:	edd3 7a00 	vldr	s15, [r3]
 8005a42:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a46:	edc0 7a02 	vstr	s15, [r0, #8]

/* USERCODE-END:UpdateFnc                                                                                             */

}
 8005a4a:	4770      	bx	lr

08005a4c <Gain_Float32_Init>:
/** Initialization                                                                                                   **/
/**********************************************************************************************************************/
void Gain_Float32_Init(GAIN_FLOAT32 *pTGain_Float32)
{
    pTGain_Float32->ID = GAIN_FLOAT32_ID;
    pTGain_Float32->Out = 0;
 8005a4c:	2300      	movs	r3, #0
    pTGain_Float32->ID = GAIN_FLOAT32_ID;
 8005a4e:	2213      	movs	r2, #19
 8005a50:	8002      	strh	r2, [r0, #0]
    pTGain_Float32->Out = 0;
 8005a52:	6083      	str	r3, [r0, #8]
/* USERCODE-BEGIN:InitFnc                                                                                             */
/* USERCODE-END:InitFnc                                                                                               */
}
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop

08005a58 <Gain_Float32_Load>:
/** Load block data                                                                                                  **/
/**********************************************************************************************************************/
uint8 Gain_Float32_Load(const GAIN_FLOAT32 *pTGain_Float32, uint8 data[], uint16 *dataLength, uint16 maxSize)
{
    uint8 error = (uint8)0;
    if ((uint16)4 > maxSize)
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d90e      	bls.n	8005a7a <Gain_Float32_Load+0x22>
    {
        error = (uint8)1;
    }
    else
    {
        data[0] = (uint8)((*(uint32*)&(pTGain_Float32->V)) & 0x000000FF);
 8005a5c:	68c3      	ldr	r3, [r0, #12]
 8005a5e:	700b      	strb	r3, [r1, #0]
        data[1] = (uint8)((*(uint32*)&(pTGain_Float32->V) >> 8) & 0x000000FF);
 8005a60:	68c3      	ldr	r3, [r0, #12]
 8005a62:	0a1b      	lsrs	r3, r3, #8
 8005a64:	704b      	strb	r3, [r1, #1]
        data[2] = (uint8)((*(uint32*)&(pTGain_Float32->V) >> 16) & 0x000000FF);
 8005a66:	89c3      	ldrh	r3, [r0, #14]
 8005a68:	708b      	strb	r3, [r1, #2]
        data[3] = (uint8)((*(uint32*)&(pTGain_Float32->V) >> 24) & 0x000000FF);
 8005a6a:	7bc3      	ldrb	r3, [r0, #15]
 8005a6c:	70cb      	strb	r3, [r1, #3]
        *dataLength = (uint16)4;
 8005a6e:	f04f 0c04 	mov.w	ip, #4
    uint8 error = (uint8)0;
 8005a72:	2000      	movs	r0, #0
        *dataLength = (uint16)4;
 8005a74:	f8a2 c000 	strh.w	ip, [r2]
 8005a78:	4770      	bx	lr
        error = (uint8)1;
 8005a7a:	2001      	movs	r0, #1
/* USERCODE-BEGIN:LoadFnc                                                                                             */
/* USERCODE-END:LoadFnc                                                                                               */
    }
    return (error);
}
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop

08005a80 <Gain_Float32_Save>:
uint8 Gain_Float32_Save(GAIN_FLOAT32 *pTGain_Float32, const uint8 data[], uint16 dataLength)
{
    uint8 error;
    uint32 tmp32;

    if (dataLength != (uint16)4)
 8005a80:	2a04      	cmp	r2, #4
{
 8005a82:	4603      	mov	r3, r0
    else
    {
        tmp32 = (uint32)data[0] + \
            ((uint32)data[1] << 8) + ((uint32)data[2] << 16) + \
            ((uint32)data[3] << 24);
        pTGain_Float32->V = (float32)(*(float32*)&tmp32);
 8005a84:	bf03      	ittte	eq
 8005a86:	680a      	ldreq	r2, [r1, #0]
 8005a88:	60da      	streq	r2, [r3, #12]
        error = (uint8)0;
 8005a8a:	2000      	moveq	r0, #0
        error = (uint8)1;
 8005a8c:	2001      	movne	r0, #1
/* USERCODE-BEGIN:SaveFnc                                                                                             */
/* USERCODE-END:SaveFnc                                                                                               */
    }
    return (error);
}
 8005a8e:	4770      	bx	lr

08005a90 <Gain_Float32_GetAddress>:
/**********************************************************************************************************************/
#if !defined(GAIN_FLOAT32_ISLINKED)
void* Gain_Float32_GetAddress(const GAIN_FLOAT32* block, uint16 elementId)
{
    void* addr;
    switch (elementId)
 8005a90:	2901      	cmp	r1, #1
 8005a92:	d005      	beq.n	8005aa0 <Gain_Float32_GetAddress+0x10>
 8005a94:	2902      	cmp	r1, #2
 8005a96:	d001      	beq.n	8005a9c <Gain_Float32_GetAddress+0xc>
 8005a98:	2000      	movs	r0, #0
 8005a9a:	4770      	bx	lr
    {
        case 1:
            addr = (void*)block->In;
            break;
        case 2:
            addr = (void*)&block->Out;
 8005a9c:	3008      	adds	r0, #8
        default:
            addr = (void*)0;
            break;
    }
    return (addr);
}
 8005a9e:	4770      	bx	lr
            addr = (void*)block->In;
 8005aa0:	6840      	ldr	r0, [r0, #4]
            break;
 8005aa2:	4770      	bx	lr

08005aa4 <ManualSwitch_Float32_Update>:
    /* if Toggle==0: Out = In1
     * if Toggle==1: Out = In2
     * else:         Out is arbitrary!
     * => Conversion function MUST either set Toggle to 1 or 0!
     */
    OUT = **(&pTManualSwitch_Float32->In1 + (TOGGLE & 0x01));
 8005aa4:	7c03      	ldrb	r3, [r0, #16]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60c3      	str	r3, [r0, #12]

/* USERCODE-END:UpdateFnc                                                                                             */

}
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop

08005ab8 <ManualSwitch_Float32_Init>:
/** Initialization                                                                                                   **/
/**********************************************************************************************************************/
void ManualSwitch_Float32_Init(MANUALSWITCH_FLOAT32 *pTManualSwitch_Float32)
{
    pTManualSwitch_Float32->ID = MANUALSWITCH_FLOAT32_ID;
    pTManualSwitch_Float32->Out = 0;
 8005ab8:	2300      	movs	r3, #0
    pTManualSwitch_Float32->ID = MANUALSWITCH_FLOAT32_ID;
 8005aba:	2293      	movs	r2, #147	@ 0x93
 8005abc:	8002      	strh	r2, [r0, #0]
    pTManualSwitch_Float32->Out = 0;
 8005abe:	60c3      	str	r3, [r0, #12]
/* USERCODE-BEGIN:InitFnc                                                                                             */
/* USERCODE-END:InitFnc                                                                                               */
}
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop

08005ac4 <ManualSwitch_Float32_Load>:
/** Load block data                                                                                                  **/
/**********************************************************************************************************************/
uint8 ManualSwitch_Float32_Load(const MANUALSWITCH_FLOAT32 *pTManualSwitch_Float32, uint8 data[], uint16 *dataLength, uint16 maxSize)
{
    uint8 error = (uint8)0;
    if ((uint16)1 > maxSize)
 8005ac4:	b12b      	cbz	r3, 8005ad2 <ManualSwitch_Float32_Load+0xe>
    {
        error = (uint8)1;
    }
    else
    {
        data[0] = (uint8)pTManualSwitch_Float32->Toggle;
 8005ac6:	7c00      	ldrb	r0, [r0, #16]
 8005ac8:	7008      	strb	r0, [r1, #0]
        *dataLength = (uint16)1;
 8005aca:	2301      	movs	r3, #1
    uint8 error = (uint8)0;
 8005acc:	2000      	movs	r0, #0
        *dataLength = (uint16)1;
 8005ace:	8013      	strh	r3, [r2, #0]
 8005ad0:	4770      	bx	lr
        error = (uint8)1;
 8005ad2:	2001      	movs	r0, #1
/* USERCODE-BEGIN:LoadFnc                                                                                             */
/* USERCODE-END:LoadFnc                                                                                               */
    }
    return (error);
}
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop

08005ad8 <ManualSwitch_Float32_Save>:
/**********************************************************************************************************************/
uint8 ManualSwitch_Float32_Save(MANUALSWITCH_FLOAT32 *pTManualSwitch_Float32, const uint8 data[], uint16 dataLength)
{
    uint8 error;

    if (dataLength != (uint16)1)
 8005ad8:	2a01      	cmp	r2, #1
    {
        error = (uint8)1;
    }
    else
    {
        pTManualSwitch_Float32->Toggle = ((uint8)data[0]);
 8005ada:	bf03      	ittte	eq
 8005adc:	780b      	ldrbeq	r3, [r1, #0]
 8005ade:	7403      	strbeq	r3, [r0, #16]
        error = (uint8)0;
 8005ae0:	2000      	moveq	r0, #0
        error = (uint8)1;
 8005ae2:	2001      	movne	r0, #1
/* USERCODE-BEGIN:SaveFnc                                                                                             */
/* USERCODE-END:SaveFnc                                                                                               */
    }
    return (error);
}
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop

08005ae8 <ManualSwitch_Float32_GetAddress>:
/**********************************************************************************************************************/
#if !defined(MANUALSWITCH_FLOAT32_ISLINKED)
void* ManualSwitch_Float32_GetAddress(const MANUALSWITCH_FLOAT32* block, uint16 elementId)
{
    void* addr;
    switch (elementId)
 8005ae8:	2902      	cmp	r1, #2
 8005aea:	d007      	beq.n	8005afc <ManualSwitch_Float32_GetAddress+0x14>
 8005aec:	2903      	cmp	r1, #3
 8005aee:	d003      	beq.n	8005af8 <ManualSwitch_Float32_GetAddress+0x10>
 8005af0:	2901      	cmp	r1, #1
 8005af2:	d105      	bne.n	8005b00 <ManualSwitch_Float32_GetAddress+0x18>
    {
        case 1:
            addr = (void*)block->In1;
 8005af4:	6840      	ldr	r0, [r0, #4]
            break;
 8005af6:	4770      	bx	lr
        case 2:
            addr = (void*)block->In2;
            break;
        case 3:
            addr = (void*)&block->Out;
 8005af8:	300c      	adds	r0, #12
            break;
 8005afa:	4770      	bx	lr
            addr = (void*)block->In2;
 8005afc:	6880      	ldr	r0, [r0, #8]
            break;
 8005afe:	4770      	bx	lr
    switch (elementId)
 8005b00:	2000      	movs	r0, #0
        default:
            addr = (void*)0;
            break;
    }
    return (addr);
}
 8005b02:	4770      	bx	lr

08005b04 <Negation_Float32_Update>:
/** Update                                                                                                           **/
/**********************************************************************************************************************/
void Negation_Float32_Update(NEGATION_FLOAT32 *pTNegation_Float32)
{
/* USERCODE-BEGIN:UpdateFnc                                                                                           */
	OUT = -IN;
 8005b04:	6843      	ldr	r3, [r0, #4]
 8005b06:	edd3 7a00 	vldr	s15, [r3]
 8005b0a:	eef1 7a67 	vneg.f32	s15, s15
 8005b0e:	edc0 7a02 	vstr	s15, [r0, #8]

/* USERCODE-END:UpdateFnc                                                                                             */

}
 8005b12:	4770      	bx	lr

08005b14 <Negation_Float32_Init>:
/** Initialization                                                                                                   **/
/**********************************************************************************************************************/
void Negation_Float32_Init(NEGATION_FLOAT32 *pTNegation_Float32)
{
    pTNegation_Float32->ID = NEGATION_FLOAT32_ID;
    pTNegation_Float32->Out = 0;
 8005b14:	2300      	movs	r3, #0
    pTNegation_Float32->ID = NEGATION_FLOAT32_ID;
 8005b16:	f241 32b3 	movw	r2, #5043	@ 0x13b3
 8005b1a:	8002      	strh	r2, [r0, #0]
    pTNegation_Float32->Out = 0;
 8005b1c:	6083      	str	r3, [r0, #8]
/* USERCODE-BEGIN:InitFnc                                                                                             */
/* USERCODE-END:InitFnc                                                                                               */
}
 8005b1e:	4770      	bx	lr

08005b20 <Negation_Float32_GetAddress>:
/**********************************************************************************************************************/
#if !defined(NEGATION_FLOAT32_ISLINKED)
void* Negation_Float32_GetAddress(const NEGATION_FLOAT32* block, uint16 elementId)
{
    void* addr;
    switch (elementId)
 8005b20:	2901      	cmp	r1, #1
 8005b22:	d005      	beq.n	8005b30 <Negation_Float32_GetAddress+0x10>
 8005b24:	2902      	cmp	r1, #2
 8005b26:	d001      	beq.n	8005b2c <Negation_Float32_GetAddress+0xc>
 8005b28:	2000      	movs	r0, #0
 8005b2a:	4770      	bx	lr
    {
        case 1:
            addr = (void*)block->In;
            break;
        case 2:
            addr = (void*)&block->Out;
 8005b2c:	3008      	adds	r0, #8
        default:
            addr = (void*)0;
            break;
    }
    return (addr);
}
 8005b2e:	4770      	bx	lr
            addr = (void*)block->In;
 8005b30:	6840      	ldr	r0, [r0, #4]
            break;
 8005b32:	4770      	bx	lr

08005b34 <Not_Bool_Update>:
/** Update                                                                                                           **/
/**********************************************************************************************************************/
void Not_Bool_Update(NOT_BOOL *pTNot_Bool)
{
/* USERCODE-BEGIN:UpdateFnc                                                                                           */
	OUT = !IN;
 8005b34:	6843      	ldr	r3, [r0, #4]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	f083 0301 	eor.w	r3, r3, #1
 8005b3c:	7203      	strb	r3, [r0, #8]

/* USERCODE-END:UpdateFnc                                                                                             */

}
 8005b3e:	4770      	bx	lr

08005b40 <Not_Bool_Init>:
/**********************************************************************************************************************/
/** Initialization                                                                                                   **/
/**********************************************************************************************************************/
void Not_Bool_Init(NOT_BOOL *pTNot_Bool)
{
    pTNot_Bool->ID = NOT_BOOL_ID;
 8005b40:	22ef      	movs	r2, #239	@ 0xef
    pTNot_Bool->Out = 0;
 8005b42:	2300      	movs	r3, #0
    pTNot_Bool->ID = NOT_BOOL_ID;
 8005b44:	8002      	strh	r2, [r0, #0]
    pTNot_Bool->Out = 0;
 8005b46:	7203      	strb	r3, [r0, #8]
/* USERCODE-BEGIN:InitFnc                                                                                             */
/* USERCODE-END:InitFnc                                                                                               */
}
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop

08005b4c <Not_Bool_GetAddress>:
/**********************************************************************************************************************/
#if !defined(NOT_BOOL_ISLINKED)
void* Not_Bool_GetAddress(const NOT_BOOL* block, uint16 elementId)
{
    void* addr;
    switch (elementId)
 8005b4c:	2901      	cmp	r1, #1
 8005b4e:	d005      	beq.n	8005b5c <Not_Bool_GetAddress+0x10>
 8005b50:	2902      	cmp	r1, #2
 8005b52:	d001      	beq.n	8005b58 <Not_Bool_GetAddress+0xc>
 8005b54:	2000      	movs	r0, #0
 8005b56:	4770      	bx	lr
    {
        case 1:
            addr = (void*)block->In;
            break;
        case 2:
            addr = (void*)&block->Out;
 8005b58:	3008      	adds	r0, #8
        default:
            addr = (void*)0;
            break;
    }
    return (addr);
}
 8005b5a:	4770      	bx	lr
            addr = (void*)block->In;
 8005b5c:	6840      	ldr	r0, [r0, #4]
            break;
 8005b5e:	4770      	bx	lr

08005b60 <Or_Bool_Update>:
/** Update                                                                                                           **/
/**********************************************************************************************************************/
void Or_Bool_Update(OR_BOOL *pTOr_Bool)
{
/* USERCODE-BEGIN:UpdateFnc                                                                                           */
	OUT = IN1 || IN2;
 8005b60:	6843      	ldr	r3, [r0, #4]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	b90b      	cbnz	r3, 8005b6a <Or_Bool_Update+0xa>
 8005b66:	6883      	ldr	r3, [r0, #8]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	7303      	strb	r3, [r0, #12]

/* USERCODE-END:UpdateFnc                                                                                             */

}
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop

08005b70 <Or_Bool_Init>:
/**********************************************************************************************************************/
/** Initialization                                                                                                   **/
/**********************************************************************************************************************/
void Or_Bool_Init(OR_BOOL *pTOr_Bool)
{
    pTOr_Bool->ID = OR_BOOL_ID;
 8005b70:	f240 120f 	movw	r2, #271	@ 0x10f
    pTOr_Bool->Out = 0;
 8005b74:	2300      	movs	r3, #0
    pTOr_Bool->ID = OR_BOOL_ID;
 8005b76:	8002      	strh	r2, [r0, #0]
    pTOr_Bool->Out = 0;
 8005b78:	7303      	strb	r3, [r0, #12]
/* USERCODE-BEGIN:InitFnc                                                                                             */
/* USERCODE-END:InitFnc                                                                                               */
}
 8005b7a:	4770      	bx	lr

08005b7c <Or_Bool_GetAddress>:
/**********************************************************************************************************************/
#if !defined(OR_BOOL_ISLINKED)
void* Or_Bool_GetAddress(const OR_BOOL* block, uint16 elementId)
{
    void* addr;
    switch (elementId)
 8005b7c:	2902      	cmp	r1, #2
 8005b7e:	d007      	beq.n	8005b90 <Or_Bool_GetAddress+0x14>
 8005b80:	2903      	cmp	r1, #3
 8005b82:	d003      	beq.n	8005b8c <Or_Bool_GetAddress+0x10>
 8005b84:	2901      	cmp	r1, #1
 8005b86:	d105      	bne.n	8005b94 <Or_Bool_GetAddress+0x18>
    {
        case 1:
            addr = (void*)block->In1;
 8005b88:	6840      	ldr	r0, [r0, #4]
            break;
 8005b8a:	4770      	bx	lr
        case 2:
            addr = (void*)block->In2;
            break;
        case 3:
            addr = (void*)&block->Out;
 8005b8c:	300c      	adds	r0, #12
            break;
 8005b8e:	4770      	bx	lr
            addr = (void*)block->In2;
 8005b90:	6880      	ldr	r0, [r0, #8]
            break;
 8005b92:	4770      	bx	lr
    switch (elementId)
 8005b94:	2000      	movs	r0, #0
        default:
            addr = (void*)0;
            break;
    }
    return (addr);
}
 8005b96:	4770      	bx	lr

08005b98 <PILimit_Float32_Update>:
void PILimit_Float32_Update(PILIMIT_FLOAT32 *pTPILimit_Float32)
{
/* USERCODE-BEGIN:UpdateFnc                                                                                           */
	float32 y, yp;

	if (ENABLE)	/* Block enabled */
 8005b98:	6943      	ldr	r3, [r0, #20]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	b34b      	cbz	r3, 8005bf2 <PILimit_Float32_Update+0x5a>
	{
		if (!ENABLE_OLD)	/* Rising edge of enable signal occurred */
 8005b9e:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8005ba2:	b36a      	cbz	r2, 8005c00 <PILimit_Float32_Update+0x68>

		/* Proportional term */
		yp = B1 * IN;

		/* Sum of proportional and integral term */
		y = yp + I_OLD;
 8005ba4:	edd0 7a09 	vldr	s15, [r0, #36]	@ 0x24
		yp = B1 * IN;
 8005ba8:	6842      	ldr	r2, [r0, #4]

		/* Calculation of integral part */
		I_OLD += (B0 * IN);
 8005baa:	edd0 5a07 	vldr	s11, [r0, #28]
		yp = B1 * IN;
 8005bae:	ed92 7a00 	vldr	s14, [r2]
		y = yp + I_OLD;
 8005bb2:	ed90 6a08 	vldr	s12, [r0, #32]

        /* Output limitation and anti wind-up */
        if (y > LIMIT_UP)
 8005bb6:	68c2      	ldr	r2, [r0, #12]
		I_OLD += (B0 * IN);
 8005bb8:	eef0 6a67 	vmov.f32	s13, s15
 8005bbc:	eee7 6a25 	vfma.f32	s13, s14, s11
		y = yp + I_OLD;
 8005bc0:	eee6 7a07 	vfma.f32	s15, s12, s14
		I_OLD += (B0 * IN);
 8005bc4:	edc0 6a09 	vstr	s13, [r0, #36]	@ 0x24
        if (y > LIMIT_UP)
 8005bc8:	ed92 7a00 	vldr	s14, [r2]
 8005bcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd4:	d51a      	bpl.n	8005c0c <PILimit_Float32_Update+0x74>
        {
            /* Output beyond upper limit -> clamp */
            y = LIMIT_UP;

            /* Limitation of integral part (anti wind-up) */
            if (I_OLD > LIMIT_UP)
 8005bd6:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bde:	dd01      	ble.n	8005be4 <PILimit_Float32_Update+0x4c>
            y = LIMIT_DOWN;

            /* Limitation of integral part (anti wind-up) */
            if (I_OLD < LIMIT_DOWN)
            {
                I_OLD = LIMIT_DOWN;
 8005be0:	ed80 7a09 	vstr	s14, [r0, #36]	@ 0x24
            y = LIMIT_DOWN;
 8005be4:	eef0 7a47 	vmov.f32	s15, s14
            }
        }
        /* else: no output limitation */

		/* Assign output */
		OUT = y;
 8005be8:	edc0 7a06 	vstr	s15, [r0, #24]
	}
	else				/* Block disabled */
	{
		OUT = 0;	/* Reset output */
	}
	ENABLE_OLD = ENABLE;
 8005bec:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28

/* USERCODE-END:UpdateFnc                                                                                             */

}
 8005bf0:	4770      	bx	lr
 8005bf2:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8005c28 <PILimit_Float32_Update+0x90>
		OUT = y;
 8005bf6:	edc0 7a06 	vstr	s15, [r0, #24]
	ENABLE_OLD = ENABLE;
 8005bfa:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
}
 8005bfe:	4770      	bx	lr
		 	I_OLD = INIT;
 8005c00:	6882      	ldr	r2, [r0, #8]
 8005c02:	edd2 7a00 	vldr	s15, [r2]
 8005c06:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8005c0a:	e7cd      	b.n	8005ba8 <PILimit_Float32_Update+0x10>
        else if (y < LIMIT_DOWN)
 8005c0c:	6902      	ldr	r2, [r0, #16]
 8005c0e:	ed92 7a00 	vldr	s14, [r2]
 8005c12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c1a:	ddec      	ble.n	8005bf6 <PILimit_Float32_Update+0x5e>
            if (I_OLD < LIMIT_DOWN)
 8005c1c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c24:	d5de      	bpl.n	8005be4 <PILimit_Float32_Update+0x4c>
 8005c26:	e7db      	b.n	8005be0 <PILimit_Float32_Update+0x48>
 8005c28:	00000000 	.word	0x00000000

08005c2c <PILimit_Float32_Init>:
{
    pTPILimit_Float32->ID = PILIMIT_FLOAT32_ID;
    pTPILimit_Float32->Out = 0;
/* USERCODE-BEGIN:InitFnc                                                                                             */
    /* Preset old values */
   	I_OLD = INIT;
 8005c2c:	6883      	ldr	r3, [r0, #8]
    pTPILimit_Float32->Out = 0;
 8005c2e:	2200      	movs	r2, #0
 8005c30:	6182      	str	r2, [r0, #24]
   	I_OLD = INIT;
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	6242      	str	r2, [r0, #36]	@ 0x24
    pTPILimit_Float32->ID = PILIMIT_FLOAT32_ID;
 8005c36:	f640 41a3 	movw	r1, #3235	@ 0xca3
  	ENABLE_OLD = false;
 8005c3a:	2300      	movs	r3, #0
    pTPILimit_Float32->ID = PILIMIT_FLOAT32_ID;
 8005c3c:	8001      	strh	r1, [r0, #0]
  	ENABLE_OLD = false;
 8005c3e:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28

/* USERCODE-END:InitFnc                                                                                               */
}
 8005c42:	4770      	bx	lr

08005c44 <PILimit_Float32_Load>:
/** Load block data                                                                                                  **/
/**********************************************************************************************************************/
uint8 PILimit_Float32_Load(const PILIMIT_FLOAT32 *pTPILimit_Float32, uint8 data[], uint16 *dataLength, uint16 maxSize)
{
    uint8 error = (uint8)0;
    if ((uint16)8 > maxSize)
 8005c44:	2b07      	cmp	r3, #7
 8005c46:	d91a      	bls.n	8005c7e <PILimit_Float32_Load+0x3a>
    {
        error = (uint8)1;
    }
    else
    {
        data[0] = (uint8)((*(uint32*)&(pTPILimit_Float32->b0)) & 0x000000FF);
 8005c48:	69c3      	ldr	r3, [r0, #28]
 8005c4a:	700b      	strb	r3, [r1, #0]
        data[1] = (uint8)((*(uint32*)&(pTPILimit_Float32->b0) >> 8) & 0x000000FF);
 8005c4c:	69c3      	ldr	r3, [r0, #28]
        data[3] = (uint8)((*(uint32*)&(pTPILimit_Float32->b0) >> 24) & 0x000000FF);
        data[4] = (uint8)((*(uint32*)&(pTPILimit_Float32->b1)) & 0x000000FF);
        data[5] = (uint8)((*(uint32*)&(pTPILimit_Float32->b1) >> 8) & 0x000000FF);
        data[6] = (uint8)((*(uint32*)&(pTPILimit_Float32->b1) >> 16) & 0x000000FF);
        data[7] = (uint8)((*(uint32*)&(pTPILimit_Float32->b1) >> 24) & 0x000000FF);
        *dataLength = (uint16)8;
 8005c4e:	f04f 0c08 	mov.w	ip, #8
        data[1] = (uint8)((*(uint32*)&(pTPILimit_Float32->b0) >> 8) & 0x000000FF);
 8005c52:	fa23 f30c 	lsr.w	r3, r3, ip
 8005c56:	704b      	strb	r3, [r1, #1]
        data[2] = (uint8)((*(uint32*)&(pTPILimit_Float32->b0) >> 16) & 0x000000FF);
 8005c58:	8bc3      	ldrh	r3, [r0, #30]
 8005c5a:	708b      	strb	r3, [r1, #2]
        data[3] = (uint8)((*(uint32*)&(pTPILimit_Float32->b0) >> 24) & 0x000000FF);
 8005c5c:	7fc3      	ldrb	r3, [r0, #31]
 8005c5e:	70cb      	strb	r3, [r1, #3]
        data[4] = (uint8)((*(uint32*)&(pTPILimit_Float32->b1)) & 0x000000FF);
 8005c60:	6a03      	ldr	r3, [r0, #32]
 8005c62:	710b      	strb	r3, [r1, #4]
        data[5] = (uint8)((*(uint32*)&(pTPILimit_Float32->b1) >> 8) & 0x000000FF);
 8005c64:	6a03      	ldr	r3, [r0, #32]
 8005c66:	fa23 f30c 	lsr.w	r3, r3, ip
 8005c6a:	714b      	strb	r3, [r1, #5]
        data[6] = (uint8)((*(uint32*)&(pTPILimit_Float32->b1) >> 16) & 0x000000FF);
 8005c6c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005c6e:	718b      	strb	r3, [r1, #6]
        data[7] = (uint8)((*(uint32*)&(pTPILimit_Float32->b1) >> 24) & 0x000000FF);
 8005c70:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8005c74:	71cb      	strb	r3, [r1, #7]
    uint8 error = (uint8)0;
 8005c76:	2000      	movs	r0, #0
        *dataLength = (uint16)8;
 8005c78:	f8a2 c000 	strh.w	ip, [r2]
 8005c7c:	4770      	bx	lr
        error = (uint8)1;
 8005c7e:	2001      	movs	r0, #1
/* USERCODE-BEGIN:LoadFnc                                                                                             */
/* USERCODE-END:LoadFnc                                                                                               */
    }
    return (error);
}
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop

08005c84 <PILimit_Float32_Save>:
uint8 PILimit_Float32_Save(PILIMIT_FLOAT32 *pTPILimit_Float32, const uint8 data[], uint16 dataLength)
{
    uint8 error;
    uint32 tmp32;

    if (dataLength != (uint16)8)
 8005c84:	2a08      	cmp	r2, #8
{
 8005c86:	4603      	mov	r3, r0
    if (dataLength != (uint16)8)
 8005c88:	d001      	beq.n	8005c8e <PILimit_Float32_Save+0xa>
    {
        error = (uint8)1;
 8005c8a:	2001      	movs	r0, #1
        error = (uint8)0;
/* USERCODE-BEGIN:SaveFnc                                                                                             */
/* USERCODE-END:SaveFnc                                                                                               */
    }
    return (error);
}
 8005c8c:	4770      	bx	lr
        pTPILimit_Float32->b0 = (float32)(*(float32*)&tmp32);
 8005c8e:	680a      	ldr	r2, [r1, #0]
 8005c90:	61da      	str	r2, [r3, #28]
        pTPILimit_Float32->b1 = (float32)(*(float32*)&tmp32);
 8005c92:	684a      	ldr	r2, [r1, #4]
 8005c94:	621a      	str	r2, [r3, #32]
        error = (uint8)0;
 8005c96:	2000      	movs	r0, #0
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop

08005c9c <PILimit_Float32_GetAddress>:
/**********************************************************************************************************************/
#if !defined(PILIMIT_FLOAT32_ISLINKED)
void* PILimit_Float32_GetAddress(const PILIMIT_FLOAT32* block, uint16 elementId)
{
    void* addr;
    switch (elementId)
 8005c9c:	3901      	subs	r1, #1
 8005c9e:	2905      	cmp	r1, #5
 8005ca0:	d810      	bhi.n	8005cc4 <PILimit_Float32_GetAddress+0x28>
 8005ca2:	e8df f001 	tbb	[pc, r1]
 8005ca6:	0705      	.short	0x0705
 8005ca8:	030d0b09 	.word	0x030d0b09
            break;
        case 5:
            addr = (void*)block->Enable;
            break;
        case 6:
            addr = (void*)&block->Out;
 8005cac:	3018      	adds	r0, #24
            break;
 8005cae:	4770      	bx	lr
            addr = (void*)block->In;
 8005cb0:	6840      	ldr	r0, [r0, #4]
            break;
 8005cb2:	4770      	bx	lr
            addr = (void*)block->Init;
 8005cb4:	6880      	ldr	r0, [r0, #8]
            break;
 8005cb6:	4770      	bx	lr
            addr = (void*)block->max;
 8005cb8:	68c0      	ldr	r0, [r0, #12]
            break;
 8005cba:	4770      	bx	lr
            addr = (void*)block->min;
 8005cbc:	6900      	ldr	r0, [r0, #16]
            break;
 8005cbe:	4770      	bx	lr
            addr = (void*)block->Enable;
 8005cc0:	6940      	ldr	r0, [r0, #20]
            break;
 8005cc2:	4770      	bx	lr
    switch (elementId)
 8005cc4:	2000      	movs	r0, #0
        default:
            addr = (void*)0;
            break;
    }
    return (addr);
}
 8005cc6:	4770      	bx	lr

08005cc8 <PT1_Float32_Update>:
{
/* USERCODE-BEGIN:UpdateFnc                                                                                           */
	float32 temp;

	temp  = B0 * IN_OLD;	/* y = b0.u(k-1) */
	temp += (B1 * IN);		/* y = b0.u(k-1) + b1.u(k) */
 8005cc8:	6843      	ldr	r3, [r0, #4]
 8005cca:	edd0 7a04 	vldr	s15, [r0, #16]
 8005cce:	ed93 7a00 	vldr	s14, [r3]
 8005cd2:	ed90 6a06 	vldr	s12, [r0, #24]
 8005cd6:	edd0 5a03 	vldr	s11, [r0, #12]
	temp -= (A0 * OUT);		/* y = b0.u(k-1) + b1.u(k) - a0.y(k-1) */
 8005cda:	edd0 6a02 	vldr	s13, [r0, #8]

	/* save values for next update call and assign output */
	IN_OLD = IN;
 8005cde:	ed80 7a06 	vstr	s14, [r0, #24]
	temp += (B1 * IN);		/* y = b0.u(k-1) + b1.u(k) */
 8005ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce6:	eee5 7a86 	vfma.f32	s15, s11, s12
	temp -= (A0 * OUT);		/* y = b0.u(k-1) + b1.u(k) - a0.y(k-1) */
 8005cea:	ed90 6a05 	vldr	s12, [r0, #20]
 8005cee:	eee6 7a66 	vfms.f32	s15, s12, s13
	OUT    = temp;
 8005cf2:	edc0 7a02 	vstr	s15, [r0, #8]

/* USERCODE-END:UpdateFnc                                                                                             */

}
 8005cf6:	4770      	bx	lr

08005cf8 <PT1_Float32_Init>:
/** Initialization                                                                                                   **/
/**********************************************************************************************************************/
void TF1_Float32_Init(TF1_FLOAT32 *pTTF1_Float32)
{
    pTTF1_Float32->ID = TF1_FLOAT32_ID;
    pTTF1_Float32->Out = 0;
 8005cf8:	2300      	movs	r3, #0
    pTTF1_Float32->ID = TF1_FLOAT32_ID;
 8005cfa:	f640 42f3 	movw	r2, #3315	@ 0xcf3
 8005cfe:	8002      	strh	r2, [r0, #0]
    pTTF1_Float32->Out = 0;
 8005d00:	6083      	str	r3, [r0, #8]
/* USERCODE-BEGIN:InitFnc                                                                                             */
     /* reset old input value */
     IN_OLD = 0;
 8005d02:	6183      	str	r3, [r0, #24]

/* USERCODE-END:InitFnc                                                                                               */
}
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop

08005d08 <PT1_Float32_Load>:
/** Load block data                                                                                                  **/
/**********************************************************************************************************************/
uint8 TF1_Float32_Load(const TF1_FLOAT32 *pTTF1_Float32, uint8 data[], uint16 *dataLength, uint16 maxSize)
{
    uint8 error = (uint8)0;
    if ((uint16)12 > maxSize)
 8005d08:	2b0b      	cmp	r3, #11
 8005d0a:	d920      	bls.n	8005d4e <PT1_Float32_Load+0x46>
    {
        error = (uint8)1;
    }
    else
    {
        data[0] = (uint8)((*(uint32*)&(pTTF1_Float32->b0)) & 0x000000FF);
 8005d0c:	68c3      	ldr	r3, [r0, #12]
 8005d0e:	700b      	strb	r3, [r1, #0]
        data[1] = (uint8)((*(uint32*)&(pTTF1_Float32->b0) >> 8) & 0x000000FF);
 8005d10:	68c3      	ldr	r3, [r0, #12]
 8005d12:	0a1b      	lsrs	r3, r3, #8
 8005d14:	704b      	strb	r3, [r1, #1]
        data[2] = (uint8)((*(uint32*)&(pTTF1_Float32->b0) >> 16) & 0x000000FF);
 8005d16:	89c3      	ldrh	r3, [r0, #14]
 8005d18:	708b      	strb	r3, [r1, #2]
        data[3] = (uint8)((*(uint32*)&(pTTF1_Float32->b0) >> 24) & 0x000000FF);
 8005d1a:	7bc3      	ldrb	r3, [r0, #15]
 8005d1c:	70cb      	strb	r3, [r1, #3]
        data[4] = (uint8)((*(uint32*)&(pTTF1_Float32->b1)) & 0x000000FF);
 8005d1e:	6903      	ldr	r3, [r0, #16]
 8005d20:	710b      	strb	r3, [r1, #4]
        data[5] = (uint8)((*(uint32*)&(pTTF1_Float32->b1) >> 8) & 0x000000FF);
 8005d22:	6903      	ldr	r3, [r0, #16]
 8005d24:	0a1b      	lsrs	r3, r3, #8
 8005d26:	714b      	strb	r3, [r1, #5]
        data[6] = (uint8)((*(uint32*)&(pTTF1_Float32->b1) >> 16) & 0x000000FF);
 8005d28:	8a43      	ldrh	r3, [r0, #18]
 8005d2a:	718b      	strb	r3, [r1, #6]
        data[7] = (uint8)((*(uint32*)&(pTTF1_Float32->b1) >> 24) & 0x000000FF);
 8005d2c:	7cc3      	ldrb	r3, [r0, #19]
 8005d2e:	71cb      	strb	r3, [r1, #7]
        data[8] = (uint8)((*(uint32*)&(pTTF1_Float32->a0)) & 0x000000FF);
 8005d30:	6943      	ldr	r3, [r0, #20]
 8005d32:	720b      	strb	r3, [r1, #8]
        data[9] = (uint8)((*(uint32*)&(pTTF1_Float32->a0) >> 8) & 0x000000FF);
 8005d34:	6943      	ldr	r3, [r0, #20]
 8005d36:	0a1b      	lsrs	r3, r3, #8
 8005d38:	724b      	strb	r3, [r1, #9]
        data[10] = (uint8)((*(uint32*)&(pTTF1_Float32->a0) >> 16) & 0x000000FF);
 8005d3a:	8ac3      	ldrh	r3, [r0, #22]
 8005d3c:	728b      	strb	r3, [r1, #10]
        data[11] = (uint8)((*(uint32*)&(pTTF1_Float32->a0) >> 24) & 0x000000FF);
 8005d3e:	7dc3      	ldrb	r3, [r0, #23]
 8005d40:	72cb      	strb	r3, [r1, #11]
        *dataLength = (uint16)12;
 8005d42:	f04f 0c0c 	mov.w	ip, #12
    uint8 error = (uint8)0;
 8005d46:	2000      	movs	r0, #0
        *dataLength = (uint16)12;
 8005d48:	f8a2 c000 	strh.w	ip, [r2]
 8005d4c:	4770      	bx	lr
        error = (uint8)1;
 8005d4e:	2001      	movs	r0, #1
/* USERCODE-BEGIN:LoadFnc                                                                                             */
/* USERCODE-END:LoadFnc                                                                                               */
    }
    return (error);
}
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop

08005d54 <PT1_Float32_Save>:
uint8 TF1_Float32_Save(TF1_FLOAT32 *pTTF1_Float32, const uint8 data[], uint16 dataLength)
{
    uint8 error;
    uint32 tmp32;

    if (dataLength != (uint16)12)
 8005d54:	2a0c      	cmp	r2, #12
{
 8005d56:	4603      	mov	r3, r0
    if (dataLength != (uint16)12)
 8005d58:	d001      	beq.n	8005d5e <PT1_Float32_Save+0xa>
    {
        error = (uint8)1;
 8005d5a:	2001      	movs	r0, #1
        error = (uint8)0;
/* USERCODE-BEGIN:SaveFnc                                                                                             */
/* USERCODE-END:SaveFnc                                                                                               */
    }
    return (error);
}
 8005d5c:	4770      	bx	lr
        pTTF1_Float32->b0 = (float32)(*(float32*)&tmp32);
 8005d5e:	680a      	ldr	r2, [r1, #0]
 8005d60:	60da      	str	r2, [r3, #12]
        pTTF1_Float32->b1 = (float32)(*(float32*)&tmp32);
 8005d62:	684a      	ldr	r2, [r1, #4]
 8005d64:	611a      	str	r2, [r3, #16]
        pTTF1_Float32->a0 = (float32)(*(float32*)&tmp32);
 8005d66:	688a      	ldr	r2, [r1, #8]
 8005d68:	615a      	str	r2, [r3, #20]
        error = (uint8)0;
 8005d6a:	2000      	movs	r0, #0
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop

08005d70 <PT1_Float32_GetAddress>:
/**********************************************************************************************************************/
#if !defined(PT1_FLOAT32_ISLINKED)
void* PT1_Float32_GetAddress(const PT1_FLOAT32* block, uint16 elementId)
{
    void* addr;
    switch (elementId)
 8005d70:	2901      	cmp	r1, #1
 8005d72:	d005      	beq.n	8005d80 <PT1_Float32_GetAddress+0x10>
 8005d74:	2902      	cmp	r1, #2
 8005d76:	d001      	beq.n	8005d7c <PT1_Float32_GetAddress+0xc>
 8005d78:	2000      	movs	r0, #0
 8005d7a:	4770      	bx	lr
    {
        case 1:
            addr = (void*)block->In;
            break;
        case 2:
            addr = (void*)&block->Out;
 8005d7c:	3008      	adds	r0, #8
        default:
            addr = (void*)0;
            break;
    }
    return (addr);
}
 8005d7e:	4770      	bx	lr
            addr = (void*)block->In;
 8005d80:	6840      	ldr	r0, [r0, #4]
            break;
 8005d82:	4770      	bx	lr

08005d84 <RateLimiter_Float32_Update>:
void RateLimiter_Float32_Update(RATELIMITER_FLOAT32 *pTRateLimiter_Float32)
{
/* USERCODE-BEGIN:UpdateFnc                                                                                           */
 	float32	Diff;

 	if (!ENABLE)	/* Rate limiting disabled */
 8005d84:	68c3      	ldr	r3, [r0, #12]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	b923      	cbnz	r3, 8005d94 <RateLimiter_Float32_Update+0x10>
 	{
 		OUT = IN;
 8005d8a:	6842      	ldr	r2, [r0, #4]
 8005d8c:	6812      	ldr	r2, [r2, #0]
 8005d8e:	6102      	str	r2, [r0, #16]
					OUT = IN;				/* assign output */
				}
			}
 		}
 	}
 	ENABLE_OLD = ENABLE;
 8005d90:	7703      	strb	r3, [r0, #28]

/* USERCODE-END:UpdateFnc                                                                                             */

}
 8005d92:	4770      	bx	lr
 		if (!ENABLE_OLD)
 8005d94:	7f02      	ldrb	r2, [r0, #28]
 8005d96:	b922      	cbnz	r2, 8005da2 <RateLimiter_Float32_Update+0x1e>
 			OUT = INIT;						/* assign output to init value */
 8005d98:	6882      	ldr	r2, [r0, #8]
 8005d9a:	6812      	ldr	r2, [r2, #0]
 8005d9c:	6102      	str	r2, [r0, #16]
 	ENABLE_OLD = ENABLE;
 8005d9e:	7703      	strb	r3, [r0, #28]
}
 8005da0:	4770      	bx	lr
			Diff = IN - OUT;
 8005da2:	6842      	ldr	r2, [r0, #4]
 8005da4:	edd0 7a04 	vldr	s15, [r0, #16]
 8005da8:	edd2 6a00 	vldr	s13, [r2]
 8005dac:	ee36 7ae7 	vsub.f32	s14, s13, s15
			if (Diff > 0)		/* positive step */
 8005db0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005db8:	dd0b      	ble.n	8005dd2 <RateLimiter_Float32_Update+0x4e>
				if (Diff > RATE_UP)		/* step is higher than RateUp */
 8005dba:	ed90 6a05 	vldr	s12, [r0, #20]
 8005dbe:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8005dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dc6:	d513      	bpl.n	8005df0 <RateLimiter_Float32_Update+0x6c>
					OUT = OUT + RATE_UP;	/* increase output */
 8005dc8:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005dcc:	edc0 7a04 	vstr	s15, [r0, #16]
 8005dd0:	e7de      	b.n	8005d90 <RateLimiter_Float32_Update+0xc>
			else if (Diff < 0)	/* negative step */
 8005dd2:	d5dd      	bpl.n	8005d90 <RateLimiter_Float32_Update+0xc>
				if (-Diff > RATE_DOWN)	/* step is lower than RateDown */
 8005dd4:	ed90 6a06 	vldr	s12, [r0, #24]
 8005dd8:	eeb1 7a47 	vneg.f32	s14, s14
 8005ddc:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8005de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de4:	dd04      	ble.n	8005df0 <RateLimiter_Float32_Update+0x6c>
					OUT = OUT - RATE_DOWN;	/* decrease output */
 8005de6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8005dea:	edc0 7a04 	vstr	s15, [r0, #16]
 8005dee:	e7cf      	b.n	8005d90 <RateLimiter_Float32_Update+0xc>
					OUT = IN;				/* assign output */
 8005df0:	edc0 6a04 	vstr	s13, [r0, #16]
 8005df4:	e7cc      	b.n	8005d90 <RateLimiter_Float32_Update+0xc>
 8005df6:	bf00      	nop

08005df8 <RateLimiter_Float32_Init>:
/** Initialization                                                                                                   **/
/**********************************************************************************************************************/
void RateLimiter_Float32_Init(RATELIMITER_FLOAT32 *pTRateLimiter_Float32)
{
    pTRateLimiter_Float32->ID = RATELIMITER_FLOAT32_ID;
    pTRateLimiter_Float32->Out = 0;
 8005df8:	2200      	movs	r2, #0
    pTRateLimiter_Float32->ID = RATELIMITER_FLOAT32_ID;
 8005dfa:	2163      	movs	r1, #99	@ 0x63
/* USERCODE-BEGIN:InitFnc                                                                                             */
     ENABLE_OLD = false;
 8005dfc:	2300      	movs	r3, #0
    pTRateLimiter_Float32->ID = RATELIMITER_FLOAT32_ID;
 8005dfe:	8001      	strh	r1, [r0, #0]
    pTRateLimiter_Float32->Out = 0;
 8005e00:	6102      	str	r2, [r0, #16]
     ENABLE_OLD = false;
 8005e02:	7703      	strb	r3, [r0, #28]

/* USERCODE-END:InitFnc                                                                                               */
}
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop

08005e08 <RateLimiter_Float32_Load>:
/** Load block data                                                                                                  **/
/**********************************************************************************************************************/
uint8 RateLimiter_Float32_Load(const RATELIMITER_FLOAT32 *pTRateLimiter_Float32, uint8 data[], uint16 *dataLength, uint16 maxSize)
{
    uint8 error = (uint8)0;
    if ((uint16)8 > maxSize)
 8005e08:	2b07      	cmp	r3, #7
 8005e0a:	d919      	bls.n	8005e40 <RateLimiter_Float32_Load+0x38>
    {
        error = (uint8)1;
    }
    else
    {
        data[0] = (uint8)((*(uint32*)&(pTRateLimiter_Float32->RateUp)) & 0x000000FF);
 8005e0c:	6943      	ldr	r3, [r0, #20]
 8005e0e:	700b      	strb	r3, [r1, #0]
        data[1] = (uint8)((*(uint32*)&(pTRateLimiter_Float32->RateUp) >> 8) & 0x000000FF);
 8005e10:	6943      	ldr	r3, [r0, #20]
        data[3] = (uint8)((*(uint32*)&(pTRateLimiter_Float32->RateUp) >> 24) & 0x000000FF);
        data[4] = (uint8)((*(uint32*)&(pTRateLimiter_Float32->RateDown)) & 0x000000FF);
        data[5] = (uint8)((*(uint32*)&(pTRateLimiter_Float32->RateDown) >> 8) & 0x000000FF);
        data[6] = (uint8)((*(uint32*)&(pTRateLimiter_Float32->RateDown) >> 16) & 0x000000FF);
        data[7] = (uint8)((*(uint32*)&(pTRateLimiter_Float32->RateDown) >> 24) & 0x000000FF);
        *dataLength = (uint16)8;
 8005e12:	f04f 0c08 	mov.w	ip, #8
        data[1] = (uint8)((*(uint32*)&(pTRateLimiter_Float32->RateUp) >> 8) & 0x000000FF);
 8005e16:	fa23 f30c 	lsr.w	r3, r3, ip
 8005e1a:	704b      	strb	r3, [r1, #1]
        data[2] = (uint8)((*(uint32*)&(pTRateLimiter_Float32->RateUp) >> 16) & 0x000000FF);
 8005e1c:	8ac3      	ldrh	r3, [r0, #22]
 8005e1e:	708b      	strb	r3, [r1, #2]
        data[3] = (uint8)((*(uint32*)&(pTRateLimiter_Float32->RateUp) >> 24) & 0x000000FF);
 8005e20:	7dc3      	ldrb	r3, [r0, #23]
 8005e22:	70cb      	strb	r3, [r1, #3]
        data[4] = (uint8)((*(uint32*)&(pTRateLimiter_Float32->RateDown)) & 0x000000FF);
 8005e24:	6983      	ldr	r3, [r0, #24]
 8005e26:	710b      	strb	r3, [r1, #4]
        data[5] = (uint8)((*(uint32*)&(pTRateLimiter_Float32->RateDown) >> 8) & 0x000000FF);
 8005e28:	6983      	ldr	r3, [r0, #24]
 8005e2a:	fa23 f30c 	lsr.w	r3, r3, ip
 8005e2e:	714b      	strb	r3, [r1, #5]
        data[6] = (uint8)((*(uint32*)&(pTRateLimiter_Float32->RateDown) >> 16) & 0x000000FF);
 8005e30:	8b43      	ldrh	r3, [r0, #26]
 8005e32:	718b      	strb	r3, [r1, #6]
        data[7] = (uint8)((*(uint32*)&(pTRateLimiter_Float32->RateDown) >> 24) & 0x000000FF);
 8005e34:	7ec3      	ldrb	r3, [r0, #27]
 8005e36:	71cb      	strb	r3, [r1, #7]
    uint8 error = (uint8)0;
 8005e38:	2000      	movs	r0, #0
        *dataLength = (uint16)8;
 8005e3a:	f8a2 c000 	strh.w	ip, [r2]
 8005e3e:	4770      	bx	lr
        error = (uint8)1;
 8005e40:	2001      	movs	r0, #1
/* USERCODE-BEGIN:LoadFnc                                                                                             */
/* USERCODE-END:LoadFnc                                                                                               */
    }
    return (error);
}
 8005e42:	4770      	bx	lr

08005e44 <RateLimiter_Float32_Save>:
uint8 RateLimiter_Float32_Save(RATELIMITER_FLOAT32 *pTRateLimiter_Float32, const uint8 data[], uint16 dataLength)
{
    uint8 error;
    uint32 tmp32;

    if (dataLength != (uint16)8)
 8005e44:	2a08      	cmp	r2, #8
{
 8005e46:	4603      	mov	r3, r0
    if (dataLength != (uint16)8)
 8005e48:	d001      	beq.n	8005e4e <RateLimiter_Float32_Save+0xa>
    {
        error = (uint8)1;
 8005e4a:	2001      	movs	r0, #1
        error = (uint8)0;
/* USERCODE-BEGIN:SaveFnc                                                                                             */
/* USERCODE-END:SaveFnc                                                                                               */
    }
    return (error);
}
 8005e4c:	4770      	bx	lr
        pTRateLimiter_Float32->RateUp = (float32)(*(float32*)&tmp32);
 8005e4e:	680a      	ldr	r2, [r1, #0]
 8005e50:	615a      	str	r2, [r3, #20]
        pTRateLimiter_Float32->RateDown = (float32)(*(float32*)&tmp32);
 8005e52:	684a      	ldr	r2, [r1, #4]
 8005e54:	619a      	str	r2, [r3, #24]
        error = (uint8)0;
 8005e56:	2000      	movs	r0, #0
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop

08005e5c <RateLimiter_Float32_GetAddress>:
/**********************************************************************************************************************/
#if !defined(RATELIMITER_FLOAT32_ISLINKED)
void* RateLimiter_Float32_GetAddress(const RATELIMITER_FLOAT32* block, uint16 elementId)
{
    void* addr;
    switch (elementId)
 8005e5c:	3901      	subs	r1, #1
 8005e5e:	2903      	cmp	r1, #3
 8005e60:	d80b      	bhi.n	8005e7a <RateLimiter_Float32_GetAddress+0x1e>
 8005e62:	e8df f001 	tbb	[pc, r1]
 8005e66:	0608      	.short	0x0608
 8005e68:	0204      	.short	0x0204
            break;
        case 3:
            addr = (void*)block->Enable;
            break;
        case 4:
            addr = (void*)&block->Out;
 8005e6a:	3010      	adds	r0, #16
            break;
 8005e6c:	4770      	bx	lr
            addr = (void*)block->Enable;
 8005e6e:	68c0      	ldr	r0, [r0, #12]
            break;
 8005e70:	4770      	bx	lr
            addr = (void*)block->Init;
 8005e72:	6880      	ldr	r0, [r0, #8]
            break;
 8005e74:	4770      	bx	lr
            addr = (void*)block->In;
 8005e76:	6840      	ldr	r0, [r0, #4]
            break;
 8005e78:	4770      	bx	lr
    switch (elementId)
 8005e7a:	2000      	movs	r0, #0
        default:
            addr = (void*)0;
            break;
    }
    return (addr);
}
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop

08005e80 <Saturation_Float32_Update>:
/** Update                                                                                                           **/
/**********************************************************************************************************************/
void Saturation_Float32_Update(SATURATION_FLOAT32 *pTSaturation_Float32)
{
/* USERCODE-BEGIN:UpdateFnc                                                                                           */
	OUT = IN;
 8005e80:	6843      	ldr	r3, [r0, #4]
	if (OUT > MAX)
 8005e82:	ed90 7a03 	vldr	s14, [r0, #12]
	OUT = IN;
 8005e86:	edd3 7a00 	vldr	s15, [r3]
	if (OUT > MAX)
 8005e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	OUT = IN;
 8005e92:	edc0 7a02 	vstr	s15, [r0, #8]
	if (OUT > MAX)
 8005e96:	dc06      	bgt.n	8005ea6 <Saturation_Float32_Update+0x26>
	{
		/* input signal is higher than maximum allowed value */
		OUT = MAX;
	}
	else if (OUT < MIN)
 8005e98:	ed90 7a04 	vldr	s14, [r0, #16]
 8005e9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea4:	d501      	bpl.n	8005eaa <Saturation_Float32_Update+0x2a>
	{
		/* input signal is lower than minimum allowed value */
		OUT = MIN;
 8005ea6:	ed80 7a02 	vstr	s14, [r0, #8]
	}

/* USERCODE-END:UpdateFnc                                                                                             */

}
 8005eaa:	4770      	bx	lr

08005eac <Saturation_Float32_Init>:
/** Initialization                                                                                                   **/
/**********************************************************************************************************************/
void Saturation_Float32_Init(SATURATION_FLOAT32 *pTSaturation_Float32)
{
    pTSaturation_Float32->ID = SATURATION_FLOAT32_ID;
    pTSaturation_Float32->Out = 0;
 8005eac:	2300      	movs	r3, #0
    pTSaturation_Float32->ID = SATURATION_FLOAT32_ID;
 8005eae:	2253      	movs	r2, #83	@ 0x53
 8005eb0:	8002      	strh	r2, [r0, #0]
    pTSaturation_Float32->Out = 0;
 8005eb2:	6083      	str	r3, [r0, #8]
/* USERCODE-BEGIN:InitFnc                                                                                             */
/* USERCODE-END:InitFnc                                                                                               */
}
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop

08005eb8 <Saturation_Float32_Load>:
/** Load block data                                                                                                  **/
/**********************************************************************************************************************/
uint8 Saturation_Float32_Load(const SATURATION_FLOAT32 *pTSaturation_Float32, uint8 data[], uint16 *dataLength, uint16 maxSize)
{
    uint8 error = (uint8)0;
    if ((uint16)8 > maxSize)
 8005eb8:	2b07      	cmp	r3, #7
 8005eba:	d919      	bls.n	8005ef0 <Saturation_Float32_Load+0x38>
    {
        error = (uint8)1;
    }
    else
    {
        data[0] = (uint8)((*(uint32*)&(pTSaturation_Float32->max)) & 0x000000FF);
 8005ebc:	68c3      	ldr	r3, [r0, #12]
 8005ebe:	700b      	strb	r3, [r1, #0]
        data[1] = (uint8)((*(uint32*)&(pTSaturation_Float32->max) >> 8) & 0x000000FF);
 8005ec0:	68c3      	ldr	r3, [r0, #12]
        data[3] = (uint8)((*(uint32*)&(pTSaturation_Float32->max) >> 24) & 0x000000FF);
        data[4] = (uint8)((*(uint32*)&(pTSaturation_Float32->min)) & 0x000000FF);
        data[5] = (uint8)((*(uint32*)&(pTSaturation_Float32->min) >> 8) & 0x000000FF);
        data[6] = (uint8)((*(uint32*)&(pTSaturation_Float32->min) >> 16) & 0x000000FF);
        data[7] = (uint8)((*(uint32*)&(pTSaturation_Float32->min) >> 24) & 0x000000FF);
        *dataLength = (uint16)8;
 8005ec2:	f04f 0c08 	mov.w	ip, #8
        data[1] = (uint8)((*(uint32*)&(pTSaturation_Float32->max) >> 8) & 0x000000FF);
 8005ec6:	fa23 f30c 	lsr.w	r3, r3, ip
 8005eca:	704b      	strb	r3, [r1, #1]
        data[2] = (uint8)((*(uint32*)&(pTSaturation_Float32->max) >> 16) & 0x000000FF);
 8005ecc:	89c3      	ldrh	r3, [r0, #14]
 8005ece:	708b      	strb	r3, [r1, #2]
        data[3] = (uint8)((*(uint32*)&(pTSaturation_Float32->max) >> 24) & 0x000000FF);
 8005ed0:	7bc3      	ldrb	r3, [r0, #15]
 8005ed2:	70cb      	strb	r3, [r1, #3]
        data[4] = (uint8)((*(uint32*)&(pTSaturation_Float32->min)) & 0x000000FF);
 8005ed4:	6903      	ldr	r3, [r0, #16]
 8005ed6:	710b      	strb	r3, [r1, #4]
        data[5] = (uint8)((*(uint32*)&(pTSaturation_Float32->min) >> 8) & 0x000000FF);
 8005ed8:	6903      	ldr	r3, [r0, #16]
 8005eda:	fa23 f30c 	lsr.w	r3, r3, ip
 8005ede:	714b      	strb	r3, [r1, #5]
        data[6] = (uint8)((*(uint32*)&(pTSaturation_Float32->min) >> 16) & 0x000000FF);
 8005ee0:	8a43      	ldrh	r3, [r0, #18]
 8005ee2:	718b      	strb	r3, [r1, #6]
        data[7] = (uint8)((*(uint32*)&(pTSaturation_Float32->min) >> 24) & 0x000000FF);
 8005ee4:	7cc3      	ldrb	r3, [r0, #19]
 8005ee6:	71cb      	strb	r3, [r1, #7]
    uint8 error = (uint8)0;
 8005ee8:	2000      	movs	r0, #0
        *dataLength = (uint16)8;
 8005eea:	f8a2 c000 	strh.w	ip, [r2]
 8005eee:	4770      	bx	lr
        error = (uint8)1;
 8005ef0:	2001      	movs	r0, #1
/* USERCODE-BEGIN:LoadFnc                                                                                             */
/* USERCODE-END:LoadFnc                                                                                               */
    }
    return (error);
}
 8005ef2:	4770      	bx	lr

08005ef4 <Saturation_Float32_Save>:
uint8 Saturation_Float32_Save(SATURATION_FLOAT32 *pTSaturation_Float32, const uint8 data[], uint16 dataLength)
{
    uint8 error;
    uint32 tmp32;

    if (dataLength != (uint16)8)
 8005ef4:	2a08      	cmp	r2, #8
{
 8005ef6:	4603      	mov	r3, r0
    if (dataLength != (uint16)8)
 8005ef8:	d001      	beq.n	8005efe <Saturation_Float32_Save+0xa>
    {
        error = (uint8)1;
 8005efa:	2001      	movs	r0, #1
        error = (uint8)0;
/* USERCODE-BEGIN:SaveFnc                                                                                             */
/* USERCODE-END:SaveFnc                                                                                               */
    }
    return (error);
}
 8005efc:	4770      	bx	lr
        pTSaturation_Float32->max = (float32)(*(float32*)&tmp32);
 8005efe:	680a      	ldr	r2, [r1, #0]
 8005f00:	60da      	str	r2, [r3, #12]
        pTSaturation_Float32->min = (float32)(*(float32*)&tmp32);
 8005f02:	684a      	ldr	r2, [r1, #4]
 8005f04:	611a      	str	r2, [r3, #16]
        error = (uint8)0;
 8005f06:	2000      	movs	r0, #0
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop

08005f0c <Saturation_Float32_GetAddress>:
/**********************************************************************************************************************/
#if !defined(SATURATION_FLOAT32_ISLINKED)
void* Saturation_Float32_GetAddress(const SATURATION_FLOAT32* block, uint16 elementId)
{
    void* addr;
    switch (elementId)
 8005f0c:	2901      	cmp	r1, #1
 8005f0e:	d005      	beq.n	8005f1c <Saturation_Float32_GetAddress+0x10>
 8005f10:	2902      	cmp	r1, #2
 8005f12:	d001      	beq.n	8005f18 <Saturation_Float32_GetAddress+0xc>
 8005f14:	2000      	movs	r0, #0
 8005f16:	4770      	bx	lr
    {
        case 1:
            addr = (void*)block->In;
            break;
        case 2:
            addr = (void*)&block->Out;
 8005f18:	3008      	adds	r0, #8
        default:
            addr = (void*)0;
            break;
    }
    return (addr);
}
 8005f1a:	4770      	bx	lr
            addr = (void*)block->In;
 8005f1c:	6840      	ldr	r0, [r0, #4]
            break;
 8005f1e:	4770      	bx	lr

08005f20 <Sign_Float32_Update>:
/** Update                                                                                                           **/
/**********************************************************************************************************************/
void Sign_Float32_Update(SIGN_FLOAT32 *pTSign_Float32)
{
/* USERCODE-BEGIN:UpdateFnc                                                                                           */
    if (IN < 0)
 8005f20:	6843      	ldr	r3, [r0, #4]
 8005f22:	edd3 6a00 	vldr	s13, [r3]
    {
        OUT = -1.0f;
    }
    else
    {
        OUT = 1.0f;
 8005f26:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005f2a:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8005f2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f36:	bf58      	it	pl
 8005f38:	eef0 7a47 	vmovpl.f32	s15, s14
 8005f3c:	edc0 7a02 	vstr	s15, [r0, #8]
    }
/* USERCODE-END:UpdateFnc                                                                                             */

}
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop

08005f44 <Sign_Float32_Init>:
/** Initialization                                                                                                   **/
/**********************************************************************************************************************/
void Sign_Float32_Init(SIGN_FLOAT32 *pTSign_Float32)
{
    pTSign_Float32->ID = SIGN_FLOAT32_ID;
    pTSign_Float32->Out = 0;
 8005f44:	2300      	movs	r3, #0
    pTSign_Float32->ID = SIGN_FLOAT32_ID;
 8005f46:	f241 3223 	movw	r2, #4899	@ 0x1323
 8005f4a:	8002      	strh	r2, [r0, #0]
    pTSign_Float32->Out = 0;
 8005f4c:	6083      	str	r3, [r0, #8]
/* USERCODE-BEGIN:InitFnc                                                                                             */
/* USERCODE-END:InitFnc                                                                                               */
}
 8005f4e:	4770      	bx	lr

08005f50 <Sign_Float32_GetAddress>:
/**********************************************************************************************************************/
#if !defined(SIGN_FLOAT32_ISLINKED)
void* Sign_Float32_GetAddress(const SIGN_FLOAT32* block, uint16 elementId)
{
    void* addr;
    switch (elementId)
 8005f50:	2901      	cmp	r1, #1
 8005f52:	d005      	beq.n	8005f60 <Sign_Float32_GetAddress+0x10>
 8005f54:	2902      	cmp	r1, #2
 8005f56:	d001      	beq.n	8005f5c <Sign_Float32_GetAddress+0xc>
 8005f58:	2000      	movs	r0, #0
 8005f5a:	4770      	bx	lr
    {
        case 1:
            addr = (void*)block->In;
            break;
        case 2:
            addr = (void*)&block->Out;
 8005f5c:	3008      	adds	r0, #8
        default:
            addr = (void*)0;
            break;
    }
    return (addr);
}
 8005f5e:	4770      	bx	lr
            addr = (void*)block->In;
 8005f60:	6840      	ldr	r0, [r0, #4]
            break;
 8005f62:	4770      	bx	lr

08005f64 <SinGen_Float32_Update>:
{
/* USERCODE-BEGIN:UpdateFnc                                                                                           */
	float32	sine, angle;
	float32	temp;

	temp = DELTA_PHI * FREQUENCY;			/* calculate angle increment */
 8005f64:	6883      	ldr	r3, [r0, #8]
	PHI += temp;							/* increment angle */
 8005f66:	edd0 6a04 	vldr	s13, [r0, #16]
 8005f6a:	ed90 0a07 	vldr	s0, [r0, #28]
 8005f6e:	ed93 7a00 	vldr	s14, [r3]

	/* angle limitation to -pi..+pi range */
	if (PHI >= PI_R32)
 8005f72:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8005fcc <SinGen_Float32_Update+0x68>
	PHI += temp;							/* increment angle */
 8005f76:	eea6 0a87 	vfma.f32	s0, s13, s14
{
 8005f7a:	b510      	push	{r4, lr}
	if (PHI >= PI_R32)
 8005f7c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8005f84:	4604      	mov	r4, r0
	if (PHI >= PI_R32)
 8005f86:	db15      	blt.n	8005fb4 <SinGen_Float32_Update+0x50>
	{
		PHI = PHI - (2 * PI_R32);
 8005f88:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8005fd0 <SinGen_Float32_Update+0x6c>
 8005f8c:	ee30 0a67 	vsub.f32	s0, s0, s15
	{
		PHI = PHI + (2 * PI_R32);
	}

	/* sine calculation */
	angle = PHI + PHASE;					/* phi+phase (though angle might exceeds -pi..pi range, sine will be computed correctly) */
 8005f90:	edd4 7a05 	vldr	s15, [r4, #20]
		PHI = PHI - (2 * PI_R32);
 8005f94:	ed84 0a07 	vstr	s0, [r4, #28]
	sine  = (float32)sinf((float64)angle);	/* sin(phi+phase) */
 8005f98:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005f9c:	f002 fbda 	bl	8008754 <sinf>

	/* amplification */
	temp = AMPLITUDE * sine;				/* A*sin(phi+phase) */
 8005fa0:	6863      	ldr	r3, [r4, #4]

	/* offset */
	temp += OFFSET;							/* A*sin(phi+phase) + Offset */
 8005fa2:	edd4 7a06 	vldr	s15, [r4, #24]
 8005fa6:	ed93 7a00 	vldr	s14, [r3]
 8005faa:	eee7 7a00 	vfma.f32	s15, s14, s0

	OUT = temp;
 8005fae:	edc4 7a03 	vstr	s15, [r4, #12]

/* USERCODE-END:UpdateFnc                                                                                             */

}
 8005fb2:	bd10      	pop	{r4, pc}
	else if (PHI < -PI_R32)
 8005fb4:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8005fd4 <SinGen_Float32_Update+0x70>
 8005fb8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8005fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		PHI = PHI + (2 * PI_R32);
 8005fc0:	bf44      	itt	mi
 8005fc2:	eddf 7a03 	vldrmi	s15, [pc, #12]	@ 8005fd0 <SinGen_Float32_Update+0x6c>
 8005fc6:	ee30 0a27 	vaddmi.f32	s0, s0, s15
 8005fca:	e7e1      	b.n	8005f90 <SinGen_Float32_Update+0x2c>
 8005fcc:	40490fdb 	.word	0x40490fdb
 8005fd0:	40c90fdb 	.word	0x40c90fdb
 8005fd4:	c0490fdb 	.word	0xc0490fdb

08005fd8 <SinGen_Float32_Init>:
/** Initialization                                                                                                   **/
/**********************************************************************************************************************/
void SinGen_Float32_Init(SINGEN_FLOAT32 *pTSinGen_Float32)
{
    pTSinGen_Float32->ID = SINGEN_FLOAT32_ID;
    pTSinGen_Float32->u = 0;
 8005fd8:	2300      	movs	r3, #0
    pTSinGen_Float32->ID = SINGEN_FLOAT32_ID;
 8005fda:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8005fde:	8002      	strh	r2, [r0, #0]
    pTSinGen_Float32->u = 0;
 8005fe0:	60c3      	str	r3, [r0, #12]
/* USERCODE-BEGIN:InitFnc                                                                                             */
  	PHI = 0;
 8005fe2:	61c3      	str	r3, [r0, #28]

/* USERCODE-END:InitFnc                                                                                               */
}
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop

08005fe8 <SinGen_Float32_Load>:
/** Load block data                                                                                                  **/
/**********************************************************************************************************************/
uint8 SinGen_Float32_Load(const SINGEN_FLOAT32 *pTSinGen_Float32, uint8 data[], uint16 *dataLength, uint16 maxSize)
{
    uint8 error = (uint8)0;
    if ((uint16)12 > maxSize)
 8005fe8:	2b0b      	cmp	r3, #11
 8005fea:	d920      	bls.n	800602e <SinGen_Float32_Load+0x46>
    {
        error = (uint8)1;
    }
    else
    {
        data[0] = (uint8)((*(uint32*)&(pTSinGen_Float32->delta_phi)) & 0x000000FF);
 8005fec:	6903      	ldr	r3, [r0, #16]
 8005fee:	700b      	strb	r3, [r1, #0]
        data[1] = (uint8)((*(uint32*)&(pTSinGen_Float32->delta_phi) >> 8) & 0x000000FF);
 8005ff0:	6903      	ldr	r3, [r0, #16]
 8005ff2:	0a1b      	lsrs	r3, r3, #8
 8005ff4:	704b      	strb	r3, [r1, #1]
        data[2] = (uint8)((*(uint32*)&(pTSinGen_Float32->delta_phi) >> 16) & 0x000000FF);
 8005ff6:	8a43      	ldrh	r3, [r0, #18]
 8005ff8:	708b      	strb	r3, [r1, #2]
        data[3] = (uint8)((*(uint32*)&(pTSinGen_Float32->delta_phi) >> 24) & 0x000000FF);
 8005ffa:	7cc3      	ldrb	r3, [r0, #19]
 8005ffc:	70cb      	strb	r3, [r1, #3]
        data[4] = (uint8)((*(uint32*)&(pTSinGen_Float32->phase)) & 0x000000FF);
 8005ffe:	6943      	ldr	r3, [r0, #20]
 8006000:	710b      	strb	r3, [r1, #4]
        data[5] = (uint8)((*(uint32*)&(pTSinGen_Float32->phase) >> 8) & 0x000000FF);
 8006002:	6943      	ldr	r3, [r0, #20]
 8006004:	0a1b      	lsrs	r3, r3, #8
 8006006:	714b      	strb	r3, [r1, #5]
        data[6] = (uint8)((*(uint32*)&(pTSinGen_Float32->phase) >> 16) & 0x000000FF);
 8006008:	8ac3      	ldrh	r3, [r0, #22]
 800600a:	718b      	strb	r3, [r1, #6]
        data[7] = (uint8)((*(uint32*)&(pTSinGen_Float32->phase) >> 24) & 0x000000FF);
 800600c:	7dc3      	ldrb	r3, [r0, #23]
 800600e:	71cb      	strb	r3, [r1, #7]
        data[8] = (uint8)((*(uint32*)&(pTSinGen_Float32->offset)) & 0x000000FF);
 8006010:	6983      	ldr	r3, [r0, #24]
 8006012:	720b      	strb	r3, [r1, #8]
        data[9] = (uint8)((*(uint32*)&(pTSinGen_Float32->offset) >> 8) & 0x000000FF);
 8006014:	6983      	ldr	r3, [r0, #24]
 8006016:	0a1b      	lsrs	r3, r3, #8
 8006018:	724b      	strb	r3, [r1, #9]
        data[10] = (uint8)((*(uint32*)&(pTSinGen_Float32->offset) >> 16) & 0x000000FF);
 800601a:	8b43      	ldrh	r3, [r0, #26]
 800601c:	728b      	strb	r3, [r1, #10]
        data[11] = (uint8)((*(uint32*)&(pTSinGen_Float32->offset) >> 24) & 0x000000FF);
 800601e:	7ec3      	ldrb	r3, [r0, #27]
 8006020:	72cb      	strb	r3, [r1, #11]
        *dataLength = (uint16)12;
 8006022:	f04f 0c0c 	mov.w	ip, #12
    uint8 error = (uint8)0;
 8006026:	2000      	movs	r0, #0
        *dataLength = (uint16)12;
 8006028:	f8a2 c000 	strh.w	ip, [r2]
 800602c:	4770      	bx	lr
        error = (uint8)1;
 800602e:	2001      	movs	r0, #1
/* USERCODE-BEGIN:LoadFnc                                                                                             */
/* USERCODE-END:LoadFnc                                                                                               */
    }
    return (error);
}
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop

08006034 <SinGen_Float32_Save>:
uint8 SinGen_Float32_Save(SINGEN_FLOAT32 *pTSinGen_Float32, const uint8 data[], uint16 dataLength)
{
    uint8 error;
    uint32 tmp32;

    if (dataLength != (uint16)12)
 8006034:	2a0c      	cmp	r2, #12
{
 8006036:	4603      	mov	r3, r0
    if (dataLength != (uint16)12)
 8006038:	d001      	beq.n	800603e <SinGen_Float32_Save+0xa>
    {
        error = (uint8)1;
 800603a:	2001      	movs	r0, #1
        error = (uint8)0;
/* USERCODE-BEGIN:SaveFnc                                                                                             */
/* USERCODE-END:SaveFnc                                                                                               */
    }
    return (error);
}
 800603c:	4770      	bx	lr
        pTSinGen_Float32->delta_phi = (float32)(*(float32*)&tmp32);
 800603e:	680a      	ldr	r2, [r1, #0]
 8006040:	611a      	str	r2, [r3, #16]
        pTSinGen_Float32->phase = (float32)(*(float32*)&tmp32);
 8006042:	684a      	ldr	r2, [r1, #4]
 8006044:	615a      	str	r2, [r3, #20]
        pTSinGen_Float32->offset = (float32)(*(float32*)&tmp32);
 8006046:	688a      	ldr	r2, [r1, #8]
 8006048:	619a      	str	r2, [r3, #24]
        error = (uint8)0;
 800604a:	2000      	movs	r0, #0
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop

08006050 <SinGen_Float32_GetAddress>:
/**********************************************************************************************************************/
#if !defined(SINGEN_FLOAT32_ISLINKED)
void* SinGen_Float32_GetAddress(const SINGEN_FLOAT32* block, uint16 elementId)
{
    void* addr;
    switch (elementId)
 8006050:	2902      	cmp	r1, #2
 8006052:	d007      	beq.n	8006064 <SinGen_Float32_GetAddress+0x14>
 8006054:	2903      	cmp	r1, #3
 8006056:	d003      	beq.n	8006060 <SinGen_Float32_GetAddress+0x10>
 8006058:	2901      	cmp	r1, #1
 800605a:	d105      	bne.n	8006068 <SinGen_Float32_GetAddress+0x18>
    {
        case 1:
            addr = (void*)block->A;
 800605c:	6840      	ldr	r0, [r0, #4]
            break;
 800605e:	4770      	bx	lr
        case 2:
            addr = (void*)block->f;
            break;
        case 3:
            addr = (void*)&block->u;
 8006060:	300c      	adds	r0, #12
            break;
 8006062:	4770      	bx	lr
            addr = (void*)block->f;
 8006064:	6880      	ldr	r0, [r0, #8]
            break;
 8006066:	4770      	bx	lr
    switch (elementId)
 8006068:	2000      	movs	r0, #0
        default:
            addr = (void*)0;
            break;
    }
    return (addr);
}
 800606a:	4770      	bx	lr

0800606c <Sub_Float32_Update>:
/** Update                                                                                                           **/
/**********************************************************************************************************************/
void Sub_Float32_Update(SUB_FLOAT32 *pTSub_Float32)
{
/* USERCODE-BEGIN:UpdateFnc                                                                                           */
	OUT = IN1 - IN2;
 800606c:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
 8006070:	edd2 7a00 	vldr	s15, [r2]
 8006074:	ed93 7a00 	vldr	s14, [r3]
 8006078:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800607c:	edc0 7a03 	vstr	s15, [r0, #12]

/* USERCODE-END:UpdateFnc                                                                                             */

}
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop

08006084 <Sub_Float32_Init>:
/** Initialization                                                                                                   **/
/**********************************************************************************************************************/
void Sub_Float32_Init(SUB_FLOAT32 *pTSub_Float32)
{
    pTSub_Float32->ID = SUB_FLOAT32_ID;
    pTSub_Float32->Out = 0;
 8006084:	2300      	movs	r3, #0
    pTSub_Float32->ID = SUB_FLOAT32_ID;
 8006086:	f241 3283 	movw	r2, #4995	@ 0x1383
 800608a:	8002      	strh	r2, [r0, #0]
    pTSub_Float32->Out = 0;
 800608c:	60c3      	str	r3, [r0, #12]
/* USERCODE-BEGIN:InitFnc                                                                                             */
/* USERCODE-END:InitFnc                                                                                               */
}
 800608e:	4770      	bx	lr

08006090 <Sub_Float32_GetAddress>:
/**********************************************************************************************************************/
#if !defined(SUB_FLOAT32_ISLINKED)
void* Sub_Float32_GetAddress(const SUB_FLOAT32* block, uint16 elementId)
{
    void* addr;
    switch (elementId)
 8006090:	2902      	cmp	r1, #2
 8006092:	d007      	beq.n	80060a4 <Sub_Float32_GetAddress+0x14>
 8006094:	2903      	cmp	r1, #3
 8006096:	d003      	beq.n	80060a0 <Sub_Float32_GetAddress+0x10>
 8006098:	2901      	cmp	r1, #1
 800609a:	d105      	bne.n	80060a8 <Sub_Float32_GetAddress+0x18>
    {
        case 1:
            addr = (void*)block->Plus;
 800609c:	6840      	ldr	r0, [r0, #4]
            break;
 800609e:	4770      	bx	lr
        case 2:
            addr = (void*)block->Minus;
            break;
        case 3:
            addr = (void*)&block->Out;
 80060a0:	300c      	adds	r0, #12
            break;
 80060a2:	4770      	bx	lr
            addr = (void*)block->Minus;
 80060a4:	6880      	ldr	r0, [r0, #8]
            break;
 80060a6:	4770      	bx	lr
    switch (elementId)
 80060a8:	2000      	movs	r0, #0
        default:
            addr = (void*)0;
            break;
    }
    return (addr);
}
 80060aa:	4770      	bx	lr

080060ac <getRAMBlock>:
 *        Service is protected by payload protection.
 *
 * @param[IN] protocol Protocol
 */
void getRAMBlock(tProtocol* protocol)
{
 80060ac:	b570      	push	{r4, r5, r6, lr}
    const uint8 addrOffset = (uint8)5;
#else
#error ADDRESS WIDTH NOT DEFINED
#endif

    size = protocol->ucFRAMEData[addrOffset];
 80060ae:	68c2      	ldr	r2, [r0, #12]
    size += (uint16)protocol->ucFRAMEData[addrOffset + 1] << 8;
    type = protocol->ucFRAMEData[addrOffset + 2];

    if ((size + 2) > protocol->ucMaxCommSize)
 80060b0:	8943      	ldrh	r3, [r0, #10]
    size += (uint16)protocol->ucFRAMEData[addrOffset + 1] << 8;
 80060b2:	f8b2 4005 	ldrh.w	r4, [r2, #5]
    type = protocol->ucFRAMEData[addrOffset + 2];
 80060b6:	79d1      	ldrb	r1, [r2, #7]
    if ((size + 2) > protocol->ucMaxCommSize)
 80060b8:	1c65      	adds	r5, r4, #1
 80060ba:	429d      	cmp	r5, r3
 80060bc:	da0f      	bge.n	80060de <getRAMBlock+0x32>
                ((uint32) protocol->ucFRAMEData[4] << 24));
#else
#error ADDRESS WIDTH NOT DEFINED
#endif

        switch (type)
 80060be:	3901      	subs	r1, #1
                ((uint32) protocol->ucFRAMEData[3] << 16) + \
 80060c0:	f8d2 3001 	ldr.w	r3, [r2, #1]
        switch (type)
 80060c4:	2907      	cmp	r1, #7
 80060c6:	d805      	bhi.n	80060d4 <getRAMBlock+0x28>
 80060c8:	e8df f001 	tbb	[pc, r1]
 80060cc:	8304654a 	.word	0x8304654a
 80060d0:	0e040404 	.word	0x0e040404
    }
    else
    {
        sendError(protocol, errorID);
    }
}
 80060d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        switch (type)
 80060d8:	2114      	movs	r1, #20
        sendError(protocol, errorID);
 80060da:	f001 bd7d 	b.w	8007bd8 <sendError>
}
 80060de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        errorID = ERRORSizeTooLarge;
 80060e2:	2115      	movs	r1, #21
        sendError(protocol, errorID);
 80060e4:	f001 bd78 	b.w	8007bd8 <sendError>
            	for (i=0;i<size;i+=8)
 80060e8:	2100      	movs	r1, #0
 80060ea:	2c00      	cmp	r4, #0
 80060ec:	d030      	beq.n	8006150 <getRAMBlock+0xa4>
 80060ee:	fa1f fc81 	uxth.w	ip, r1
                    protocol->ucFRAMEData[2 + i] = (uint8) *addr64;
 80060f2:	4462      	add	r2, ip
 80060f4:	58cd      	ldr	r5, [r1, r3]
 80060f6:	7095      	strb	r5, [r2, #2]
                    protocol->ucFRAMEData[2 + i + 1] = (uint8) ((*addr64) >> 8);
 80060f8:	68c2      	ldr	r2, [r0, #12]
 80060fa:	58cd      	ldr	r5, [r1, r3]
 80060fc:	4462      	add	r2, ip
 80060fe:	0a2d      	lsrs	r5, r5, #8
 8006100:	70d5      	strb	r5, [r2, #3]
                    protocol->ucFRAMEData[2 + i + 2] = (uint8) ((*addr64) >> 16);
 8006102:	68c2      	ldr	r2, [r0, #12]
 8006104:	58cd      	ldr	r5, [r1, r3]
 8006106:	4462      	add	r2, ip
 8006108:	0c2d      	lsrs	r5, r5, #16
 800610a:	7115      	strb	r5, [r2, #4]
                    protocol->ucFRAMEData[2 + i + 3] = (uint8) ((*addr64) >> 24);
 800610c:	68c2      	ldr	r2, [r0, #12]
 800610e:	58cd      	ldr	r5, [r1, r3]
 8006110:	4462      	add	r2, ip
 8006112:	0e2d      	lsrs	r5, r5, #24
 8006114:	7155      	strb	r5, [r2, #5]
                    protocol->ucFRAMEData[2 + i + 4] = (uint8) ((*addr64) >> 32);
 8006116:	68c5      	ldr	r5, [r0, #12]
 8006118:	18ca      	adds	r2, r1, r3
 800611a:	4465      	add	r5, ip
 800611c:	6856      	ldr	r6, [r2, #4]
 800611e:	71ae      	strb	r6, [r5, #6]
                    protocol->ucFRAMEData[2 + i + 5] = (uint8) ((*addr64) >> 40);
 8006120:	68c5      	ldr	r5, [r0, #12]
 8006122:	eb05 0e0c 	add.w	lr, r5, ip
 8006126:	6855      	ldr	r5, [r2, #4]
 8006128:	0a2d      	lsrs	r5, r5, #8
 800612a:	f88e 5007 	strb.w	r5, [lr, #7]
                    protocol->ucFRAMEData[2 + i + 6] = (uint8) ((*addr64) >> 48);
 800612e:	68c5      	ldr	r5, [r0, #12]
 8006130:	eb05 0e0c 	add.w	lr, r5, ip
 8006134:	88d5      	ldrh	r5, [r2, #6]
 8006136:	f88e 5008 	strb.w	r5, [lr, #8]
                    protocol->ucFRAMEData[2 + i + 7] = (uint8) ((*addr64++) >> 56);
 800613a:	f892 e007 	ldrb.w	lr, [r2, #7]
 800613e:	68c2      	ldr	r2, [r0, #12]
            	for (i=0;i<size;i+=8)
 8006140:	3108      	adds	r1, #8
                    protocol->ucFRAMEData[2 + i + 7] = (uint8) ((*addr64++) >> 56);
 8006142:	4462      	add	r2, ip
            	for (i=0;i<size;i+=8)
 8006144:	b28d      	uxth	r5, r1
                    protocol->ucFRAMEData[2 + i + 7] = (uint8) ((*addr64++) >> 56);
 8006146:	f882 e009 	strb.w	lr, [r2, #9]
            	for (i=0;i<size;i+=8)
 800614a:	42a5      	cmp	r5, r4
        protocol->ucFRAMEData[1] = errorID;
 800614c:	68c2      	ldr	r2, [r0, #12]
            	for (i=0;i<size;i+=8)
 800614e:	d3ce      	bcc.n	80060ee <getRAMBlock+0x42>
        protocol->ucFRAMESize = size + 2;
 8006150:	3402      	adds	r4, #2
        protocol->ucFRAMEData[1] = errorID;
 8006152:	2300      	movs	r3, #0
        protocol->ucFRAMESize = size + 2;
 8006154:	8104      	strh	r4, [r0, #8]
        protocol->ucFRAMEData[1] = errorID;
 8006156:	7053      	strb	r3, [r2, #1]
}
 8006158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        protocol->pSnd_Enable(protocol);
 800615c:	6843      	ldr	r3, [r0, #4]
 800615e:	4718      	bx	r3
                for (i = 0; i < size; i++)
 8006160:	2c00      	cmp	r4, #0
 8006162:	d0f5      	beq.n	8006150 <getRAMBlock+0xa4>
                    protocol->ucFRAMEData[2 + i] = (uint8) *addr8++;
 8006164:	4619      	mov	r1, r3
                for (i = 0; i < size; i++)
 8006166:	2c01      	cmp	r4, #1
                    protocol->ucFRAMEData[2 + i] = (uint8) *addr8++;
 8006168:	f811 5b01 	ldrb.w	r5, [r1], #1
 800616c:	7095      	strb	r5, [r2, #2]
                for (i = 0; i < size; i++)
 800616e:	d010      	beq.n	8006192 <getRAMBlock+0xe6>
 8006170:	3302      	adds	r3, #2
 8006172:	f1a4 0c02 	sub.w	ip, r4, #2
 8006176:	fa13 fc8c 	uxtah	ip, r3, ip
                    protocol->ucFRAMEData[2 + i] = (uint8) *addr8++;
 800617a:	f1c1 0e02 	rsb	lr, r1, #2
 800617e:	460b      	mov	r3, r1
 8006180:	3101      	adds	r1, #1
 8006182:	781d      	ldrb	r5, [r3, #0]
 8006184:	68c2      	ldr	r2, [r0, #12]
 8006186:	eb01 030e 	add.w	r3, r1, lr
 800618a:	b29b      	uxth	r3, r3
                for (i = 0; i < size; i++)
 800618c:	4561      	cmp	r1, ip
                    protocol->ucFRAMEData[2 + i] = (uint8) *addr8++;
 800618e:	54d5      	strb	r5, [r2, r3]
                for (i = 0; i < size; i++)
 8006190:	d1f5      	bne.n	800617e <getRAMBlock+0xd2>
        protocol->ucFRAMEData[1] = errorID;
 8006192:	68c2      	ldr	r2, [r0, #12]
 8006194:	e7dc      	b.n	8006150 <getRAMBlock+0xa4>
                for (i = 0; i < size; i += 2)
 8006196:	2c00      	cmp	r4, #0
 8006198:	d0da      	beq.n	8006150 <getRAMBlock+0xa4>
                    protocol->ucFRAMEData[2 + i] = (uint8) *addr16;
 800619a:	8819      	ldrh	r1, [r3, #0]
 800619c:	7091      	strb	r1, [r2, #2]
                    protocol->ucFRAMEData[2 + i + 1] = (uint8) ((*addr16++) >> 8);
 800619e:	f833 2b02 	ldrh.w	r2, [r3], #2
 80061a2:	68c1      	ldr	r1, [r0, #12]
 80061a4:	0a12      	lsrs	r2, r2, #8
                for (i = 0; i < size; i += 2)
 80061a6:	2c02      	cmp	r4, #2
                    protocol->ucFRAMEData[2 + i + 1] = (uint8) ((*addr16++) >> 8);
 80061a8:	70ca      	strb	r2, [r1, #3]
                for (i = 0; i < size; i += 2)
 80061aa:	bf88      	it	hi
 80061ac:	2202      	movhi	r2, #2
 80061ae:	d9f0      	bls.n	8006192 <getRAMBlock+0xe6>
                    protocol->ucFRAMEData[2 + i] = (uint8) *addr16;
 80061b0:	68c1      	ldr	r1, [r0, #12]
 80061b2:	881d      	ldrh	r5, [r3, #0]
 80061b4:	4411      	add	r1, r2
                    protocol->ucFRAMEData[2 + i + 1] = (uint8) ((*addr16++) >> 8);
 80061b6:	3302      	adds	r3, #2
                    protocol->ucFRAMEData[2 + i] = (uint8) *addr16;
 80061b8:	708d      	strb	r5, [r1, #2]
                    protocol->ucFRAMEData[2 + i + 1] = (uint8) ((*addr16++) >> 8);
 80061ba:	68c1      	ldr	r1, [r0, #12]
 80061bc:	f833 5c02 	ldrh.w	r5, [r3, #-2]
 80061c0:	4411      	add	r1, r2
                for (i = 0; i < size; i += 2)
 80061c2:	3202      	adds	r2, #2
 80061c4:	b292      	uxth	r2, r2
                    protocol->ucFRAMEData[2 + i + 1] = (uint8) ((*addr16++) >> 8);
 80061c6:	0a2d      	lsrs	r5, r5, #8
                for (i = 0; i < size; i += 2)
 80061c8:	4294      	cmp	r4, r2
                    protocol->ucFRAMEData[2 + i + 1] = (uint8) ((*addr16++) >> 8);
 80061ca:	70cd      	strb	r5, [r1, #3]
                for (i = 0; i < size; i += 2)
 80061cc:	d8f0      	bhi.n	80061b0 <getRAMBlock+0x104>
        protocol->ucFRAMEData[1] = errorID;
 80061ce:	68c2      	ldr	r2, [r0, #12]
 80061d0:	e7be      	b.n	8006150 <getRAMBlock+0xa4>
                for (i = 0; i < size; i += 4)
 80061d2:	2100      	movs	r1, #0
 80061d4:	2c00      	cmp	r4, #0
 80061d6:	d0bb      	beq.n	8006150 <getRAMBlock+0xa4>
                    protocol->ucFRAMEData[2 + i] = (uint8) *addr32;
 80061d8:	fa1f fc81 	uxth.w	ip, r1
 80061dc:	4462      	add	r2, ip
 80061de:	585d      	ldr	r5, [r3, r1]
 80061e0:	7095      	strb	r5, [r2, #2]
                    protocol->ucFRAMEData[2 + i + 1] = (uint8) ((*addr32) >> 8);
 80061e2:	68c2      	ldr	r2, [r0, #12]
 80061e4:	585d      	ldr	r5, [r3, r1]
 80061e6:	4462      	add	r2, ip
 80061e8:	0a2d      	lsrs	r5, r5, #8
 80061ea:	70d5      	strb	r5, [r2, #3]
                    protocol->ucFRAMEData[2 + i + 2] = (uint8) ((*addr32) >> 16);
 80061ec:	68c2      	ldr	r2, [r0, #12]
 80061ee:	585d      	ldr	r5, [r3, r1]
 80061f0:	4462      	add	r2, ip
 80061f2:	0c2d      	lsrs	r5, r5, #16
 80061f4:	7115      	strb	r5, [r2, #4]
                    protocol->ucFRAMEData[2 + i + 3] = (uint8) ((*addr32++) >> 24);
 80061f6:	68c2      	ldr	r2, [r0, #12]
 80061f8:	585d      	ldr	r5, [r3, r1]
 80061fa:	4462      	add	r2, ip
                for (i = 0; i < size; i += 4)
 80061fc:	3104      	adds	r1, #4
                    protocol->ucFRAMEData[2 + i + 3] = (uint8) ((*addr32++) >> 24);
 80061fe:	0e2d      	lsrs	r5, r5, #24
 8006200:	7155      	strb	r5, [r2, #5]
                for (i = 0; i < size; i += 4)
 8006202:	b28a      	uxth	r2, r1
 8006204:	42a2      	cmp	r2, r4
        protocol->ucFRAMEData[1] = errorID;
 8006206:	68c2      	ldr	r2, [r0, #12]
                for (i = 0; i < size; i += 4)
 8006208:	d3e6      	bcc.n	80061d8 <getRAMBlock+0x12c>
 800620a:	e7a1      	b.n	8006150 <getRAMBlock+0xa4>

0800620c <putBlockData>:
 *
 * @note This service is not protected by payload length protection.
 *       It's not required because response frame length <= request frame.
 */
void putBlockData(tProtocol* protocol)
{
 800620c:	b570      	push	{r4, r5, r6, lr}
#error ADDRESS WIDTH NOT DEFINED
#endif
    id = *addr;

    i = 0;
    while ((id != TableStruct->TFncTable[i].iBlockID) && (TableStruct->TFncTable[i].iBlockID != 0))
 800620e:	4b22      	ldr	r3, [pc, #136]	@ (8006298 <putBlockData+0x8c>)
    addr = (uint16*) ((uint32) protocol->ucFRAMEData[1] + \
 8006210:	68c6      	ldr	r6, [r0, #12]
    while ((id != TableStruct->TFncTable[i].iBlockID) && (TableStruct->TFncTable[i].iBlockID != 0))
 8006212:	6819      	ldr	r1, [r3, #0]
{
 8006214:	4605      	mov	r5, r0
    while ((id != TableStruct->TFncTable[i].iBlockID) && (TableStruct->TFncTable[i].iBlockID != 0))
 8006216:	684b      	ldr	r3, [r1, #4]
    		((uint32) protocol->ucFRAMEData[3] << 16) + \
 8006218:	f8d6 0001 	ldr.w	r0, [r6, #1]
    while ((id != TableStruct->TFncTable[i].iBlockID) && (TableStruct->TFncTable[i].iBlockID != 0))
 800621c:	881b      	ldrh	r3, [r3, #0]
    id = *addr;
 800621e:	f8b0 e000 	ldrh.w	lr, [r0]
    while ((id != TableStruct->TFncTable[i].iBlockID) && (TableStruct->TFncTable[i].iBlockID != 0))
 8006222:	4573      	cmp	r3, lr
 8006224:	bf08      	it	eq
 8006226:	f04f 0c00 	moveq.w	ip, #0
 800622a:	d012      	beq.n	8006252 <putBlockData+0x46>
    i = 0;
 800622c:	2300      	movs	r3, #0
    while ((id != TableStruct->TFncTable[i].iBlockID) && (TableStruct->TFncTable[i].iBlockID != 0))
 800622e:	469c      	mov	ip, r3
 8006230:	e006      	b.n	8006240 <putBlockData+0x34>
 8006232:	684c      	ldr	r4, [r1, #4]
 8006234:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8006238:	f834 2032 	ldrh.w	r2, [r4, r2, lsl #3]
 800623c:	4572      	cmp	r2, lr
 800623e:	d008      	beq.n	8006252 <putBlockData+0x46>
 8006240:	684c      	ldr	r4, [r1, #4]
    {
        i++;
 8006242:	3301      	adds	r3, #1
    while ((id != TableStruct->TFncTable[i].iBlockID) && (TableStruct->TFncTable[i].iBlockID != 0))
 8006244:	f834 400c 	ldrh.w	r4, [r4, ip]
        i++;
 8006248:	b29b      	uxth	r3, r3
    while ((id != TableStruct->TFncTable[i].iBlockID) && (TableStruct->TFncTable[i].iBlockID != 0))
 800624a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800624e:	2c00      	cmp	r4, #0
 8006250:	d1ef      	bne.n	8006232 <putBlockData+0x26>
    }
    if (TableStruct->TFncTable[i].iBlockID == 0)
 8006252:	684b      	ldr	r3, [r1, #4]
 8006254:	f833 300c 	ldrh.w	r3, [r3, ip]
 8006258:	b1bb      	cbz	r3, 800628a <putBlockData+0x7e>
    {
        /* if correct block id was not found -> return wrong block id error */
        sendError(protocol, ERRORBlkID);
    } else {
        if (TableStruct->TFncTable[i].pFSave(addr,
 800625a:	684b      	ldr	r3, [r1, #4]
 800625c:	892a      	ldrh	r2, [r5, #8]
 800625e:	4463      	add	r3, ip
 8006260:	3a05      	subs	r2, #5
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	1d71      	adds	r1, r6, #5
 8006266:	b292      	uxth	r2, r2
 8006268:	4798      	blx	r3
 800626a:	b940      	cbnz	r0, 800627e <putBlockData+0x72>
            sendError(protocol, ERRORFormat);
        }
        else
        {
            protocol->ucFRAMESize = 2;
            protocol->ucFRAMEData[1] = ERRORSuccess;
 800626c:	68eb      	ldr	r3, [r5, #12]
            protocol->ucFRAMESize = 2;
 800626e:	2202      	movs	r2, #2
 8006270:	812a      	strh	r2, [r5, #8]
            protocol->ucFRAMEData[1] = ERRORSuccess;
 8006272:	7058      	strb	r0, [r3, #1]
            protocol->pSnd_Enable(protocol);
 8006274:	686b      	ldr	r3, [r5, #4]
 8006276:	4628      	mov	r0, r5
        }
    }
}
 8006278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            protocol->pSnd_Enable(protocol);
 800627c:	4718      	bx	r3
            sendError(protocol, ERRORFormat);
 800627e:	4628      	mov	r0, r5
 8006280:	2114      	movs	r1, #20
}
 8006282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            sendError(protocol, ERRORFormat);
 8006286:	f001 bca7 	b.w	8007bd8 <sendError>
        sendError(protocol, ERRORBlkID);
 800628a:	4628      	mov	r0, r5
 800628c:	2141      	movs	r1, #65	@ 0x41
}
 800628e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        sendError(protocol, ERRORBlkID);
 8006292:	f001 bca1 	b.w	8007bd8 <sendError>
 8006296:	bf00      	nop
 8006298:	2000000c 	.word	0x2000000c

0800629c <getBlockData>:
 *
 * @note This service is not protected by payload length protection.
 *       Implementation is currently not possible => see line with pFLoad instruction.
 */
void getBlockData(tProtocol* protocol)
{
 800629c:	b570      	push	{r4, r5, r6, lr}
#error ADDRESS WIDTH NOT DEFINED
#endif
    id = *addr;

    i = 0;
    while ((id != TableStruct->TFncTable[i].iBlockID) && (TableStruct->TFncTable[i].iBlockID != 0))
 800629e:	4b23      	ldr	r3, [pc, #140]	@ (800632c <getBlockData+0x90>)
        addr = (uint16*) ((uint32) protocol->ucFRAMEData[1] + \
 80062a0:	68c6      	ldr	r6, [r0, #12]
    while ((id != TableStruct->TFncTable[i].iBlockID) && (TableStruct->TFncTable[i].iBlockID != 0))
 80062a2:	6819      	ldr	r1, [r3, #0]
{
 80062a4:	4605      	mov	r5, r0
    while ((id != TableStruct->TFncTable[i].iBlockID) && (TableStruct->TFncTable[i].iBlockID != 0))
 80062a6:	684b      	ldr	r3, [r1, #4]
                ((uint32) protocol->ucFRAMEData[3] << 16) + \
 80062a8:	f8d6 0001 	ldr.w	r0, [r6, #1]
    while ((id != TableStruct->TFncTable[i].iBlockID) && (TableStruct->TFncTable[i].iBlockID != 0))
 80062ac:	881b      	ldrh	r3, [r3, #0]
    id = *addr;
 80062ae:	f8b0 e000 	ldrh.w	lr, [r0]
    while ((id != TableStruct->TFncTable[i].iBlockID) && (TableStruct->TFncTable[i].iBlockID != 0))
 80062b2:	4573      	cmp	r3, lr
 80062b4:	bf08      	it	eq
 80062b6:	f04f 0c00 	moveq.w	ip, #0
 80062ba:	d012      	beq.n	80062e2 <getBlockData+0x46>
    i = 0;
 80062bc:	2300      	movs	r3, #0
    while ((id != TableStruct->TFncTable[i].iBlockID) && (TableStruct->TFncTable[i].iBlockID != 0))
 80062be:	469c      	mov	ip, r3
 80062c0:	e006      	b.n	80062d0 <getBlockData+0x34>
 80062c2:	684c      	ldr	r4, [r1, #4]
 80062c4:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 80062c8:	f834 2032 	ldrh.w	r2, [r4, r2, lsl #3]
 80062cc:	4572      	cmp	r2, lr
 80062ce:	d008      	beq.n	80062e2 <getBlockData+0x46>
 80062d0:	684c      	ldr	r4, [r1, #4]
    {
        i++;
 80062d2:	3301      	adds	r3, #1
    while ((id != TableStruct->TFncTable[i].iBlockID) && (TableStruct->TFncTable[i].iBlockID != 0))
 80062d4:	f834 400c 	ldrh.w	r4, [r4, ip]
        i++;
 80062d8:	b29b      	uxth	r3, r3
    while ((id != TableStruct->TFncTable[i].iBlockID) && (TableStruct->TFncTable[i].iBlockID != 0))
 80062da:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80062de:	2c00      	cmp	r4, #0
 80062e0:	d1ef      	bne.n	80062c2 <getBlockData+0x26>
    }
    if (TableStruct->TFncTable[i].iBlockID == 0)
 80062e2:	684b      	ldr	r3, [r1, #4]
 80062e4:	f833 300c 	ldrh.w	r3, [r3, ip]
 80062e8:	b1d3      	cbz	r3, 8006320 <getBlockData+0x84>
        /* if correct block id was not found -> return wrong block id error */
        sendError(protocol, ERRORBlkID);
    }
    else
    {
    	if (TableStruct->TFncTable[i].pFLoad(addr, protocol->ucFRAMEData + 2, &(protocol->ucFRAMESize), protocol->ucMaxCommSize - 2))
 80062ea:	684b      	ldr	r3, [r1, #4]
 80062ec:	4463      	add	r3, ip
 80062ee:	1cb1      	adds	r1, r6, #2
 80062f0:	68dc      	ldr	r4, [r3, #12]
 80062f2:	896b      	ldrh	r3, [r5, #10]
 80062f4:	3b02      	subs	r3, #2
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	f105 0208 	add.w	r2, r5, #8
 80062fc:	47a0      	blx	r4
 80062fe:	b948      	cbnz	r0, 8006314 <getBlockData+0x78>
    	{
    		sendError(protocol, ERRORFormat);
    	}
    	else
    	{
    		protocol->ucFRAMESize += 2; /* add overhead size */
 8006300:	892b      	ldrh	r3, [r5, #8]
			protocol->ucFRAMEData[1] = ERRORSuccess;
 8006302:	68ea      	ldr	r2, [r5, #12]
    		protocol->ucFRAMESize += 2; /* add overhead size */
 8006304:	3302      	adds	r3, #2
 8006306:	812b      	strh	r3, [r5, #8]
			protocol->ucFRAMEData[1] = ERRORSuccess;
 8006308:	7050      	strb	r0, [r2, #1]
			protocol->pSnd_Enable(protocol);
 800630a:	686b      	ldr	r3, [r5, #4]
 800630c:	4628      	mov	r0, r5
    	}
    }
}
 800630e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			protocol->pSnd_Enable(protocol);
 8006312:	4718      	bx	r3
    		sendError(protocol, ERRORFormat);
 8006314:	4628      	mov	r0, r5
 8006316:	2114      	movs	r1, #20
}
 8006318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    		sendError(protocol, ERRORFormat);
 800631c:	f001 bc5c 	b.w	8007bd8 <sendError>
        sendError(protocol, ERRORBlkID);
 8006320:	4628      	mov	r0, r5
 8006322:	2141      	movs	r1, #65	@ 0x41
}
 8006324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        sendError(protocol, ERRORBlkID);
 8006328:	f001 bc56 	b.w	8007bd8 <sendError>
 800632c:	2000000c 	.word	0x2000000c

08006330 <addBlockServices>:
    tSERVICEFunction* pServiceTable = (tSERVICEFunction*) protocol->pServiceTable;
 8006330:	6903      	ldr	r3, [r0, #16]
    pServiceTable[SV_ID_GETBLOCKDATA] = getBlockData;
 8006332:	4905      	ldr	r1, [pc, #20]	@ (8006348 <addBlockServices+0x18>)
    pServiceTable[SV_ID_PUTBLOCKDATA] = putBlockData;
 8006334:	4a05      	ldr	r2, [pc, #20]	@ (800634c <addBlockServices+0x1c>)
{
 8006336:	b410      	push	{r4}
    pServiceTable[SV_ID_SVGETRAMBLOCK] = getRAMBlock;
 8006338:	4c05      	ldr	r4, [pc, #20]	@ (8006350 <addBlockServices+0x20>)
 800633a:	625c      	str	r4, [r3, #36]	@ 0x24
    pServiceTable[SV_ID_PUTBLOCKDATA] = putBlockData;
 800633c:	e9c3 1207 	strd	r1, r2, [r3, #28]
}
 8006340:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	0800629d 	.word	0x0800629d
 800634c:	0800620d 	.word	0x0800620d
 8006350:	080060ad 	.word	0x080060ad

08006354 <crc8ccitt_addValue>:
 *
 * @return New checksum
 */
uint8 crc8ccitt_addValue(uint8 crc, uint8 data)
{
	xored = (uint8)(crc ^ data);
 8006354:	4041      	eors	r1, r0
	newcrc = CRC_TABLE[xored];
 8006356:	4b03      	ldr	r3, [pc, #12]	@ (8006364 <crc8ccitt_addValue+0x10>)
	xored = (uint8)(crc ^ data);
 8006358:	4a03      	ldr	r2, [pc, #12]	@ (8006368 <crc8ccitt_addValue+0x14>)
	newcrc = CRC_TABLE[xored];
 800635a:	5c58      	ldrb	r0, [r3, r1]
 800635c:	4b03      	ldr	r3, [pc, #12]	@ (800636c <crc8ccitt_addValue+0x18>)
	xored = (uint8)(crc ^ data);
 800635e:	7011      	strb	r1, [r2, #0]
	newcrc = CRC_TABLE[xored];
 8006360:	7018      	strb	r0, [r3, #0]
	return (newcrc);
}
 8006362:	4770      	bx	lr
 8006364:	08009228 	.word	0x08009228
 8006368:	20000655 	.word	0x20000655
 800636c:	20000654 	.word	0x20000654

08006370 <crc8ccitt_init>:
 * @return Checksum initialization value
 */
uint8 crc8ccitt_init(void)
{
	return (INIT_VALUE);
}
 8006370:	20ff      	movs	r0, #255	@ 0xff
 8006372:	4770      	bx	lr

08006374 <Common_Update>:
{
	;
}

/** Pseudo Update */
void Common_Update(void* common)
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop

08006378 <Common_Load>:
}

/** Pseudo Load block data */
uint8 Common_Load(const void* common, uint8 data[], uint16* dataLength, uint16 maxSize)
{
	*dataLength = (uint16)0;
 8006378:	2000      	movs	r0, #0
 800637a:	8010      	strh	r0, [r2, #0]
    return ((uint8)0);
}
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop

08006380 <Common_Save>:
    else
    {
    	retVal = 0;
    }
    return (retVal);
}
 8006380:	1e10      	subs	r0, r2, #0
 8006382:	bf18      	it	ne
 8006384:	2001      	movne	r0, #1
 8006386:	4770      	bx	lr

08006388 <getAbsValI32>:
 * 
 * @param x 32-bit fixed point input value.
 * @return Absolute value of input.
 */
int32 getAbsValI32(int32 x){
	if (x == ((int32)0x80000000)){
 8006388:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 800638c:	d003      	beq.n	8006396 <getAbsValI32+0xe>
		x = (int32)0x7FFFFFFF;
	}else if (x < 0){
 800638e:	2800      	cmp	r0, #0
 8006390:	bfb8      	it	lt
 8006392:	4240      	neglt	r0, r0
 8006394:	4770      	bx	lr
		x = (int32)0x7FFFFFFF;
 8006396:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
		x = -(x);
	}
	return (x);
}
 800639a:	4770      	bx	lr

0800639c <getIoParamIndex>:
uint8 getIoParamIndex(const tIoParamIdEntry ioParamTbl[], uint16 paramId, uint16* index)
{
	uint16 i;
	uint8 error;

	if (ioParamTbl == 0)
 800639c:	b1e8      	cbz	r0, 80063da <getIoParamIndex+0x3e>
{
 800639e:	b410      	push	{r4}
		error = ERROR_TABLE_NOT_INIT;
	}
	else
	{
		i = 0;
		while ((paramId != ioParamTbl[i].id) && (ioParamTbl[i].id != 0))
 80063a0:	8804      	ldrh	r4, [r0, #0]
 80063a2:	42a1      	cmp	r1, r4
		i = 0;
 80063a4:	f04f 0300 	mov.w	r3, #0
		while ((paramId != ioParamTbl[i].id) && (ioParamTbl[i].id != 0))
 80063a8:	d104      	bne.n	80063b4 <getIoParamIndex+0x18>
 80063aa:	e00d      	b.n	80063c8 <getIoParamIndex+0x2c>
 80063ac:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
 80063b0:	428c      	cmp	r4, r1
 80063b2:	d009      	beq.n	80063c8 <getIoParamIndex+0x2c>
		{
			i++;
 80063b4:	3301      	adds	r3, #1
 80063b6:	b29b      	uxth	r3, r3
		while ((paramId != ioParamTbl[i].id) && (ioParamTbl[i].id != 0))
 80063b8:	2c00      	cmp	r4, #0
 80063ba:	d1f7      	bne.n	80063ac <getIoParamIndex+0x10>
 80063bc:	4623      	mov	r3, r4
		}
		if (ioParamTbl[i].id == 0)
		{
			*index = 0;
			error = ERROR_INVALID_ID;
 80063be:	2002      	movs	r0, #2
			*index = i;
			error = ERROR_SUCCESS;
		}
	}
	return (error);
}
 80063c0:	f85d 4b04 	ldr.w	r4, [sp], #4
		*index = 0;
 80063c4:	8013      	strh	r3, [r2, #0]
}
 80063c6:	4770      	bx	lr
			error = ERROR_SUCCESS;
 80063c8:	2900      	cmp	r1, #0
 80063ca:	bf06      	itte	eq
 80063cc:	2300      	moveq	r3, #0
 80063ce:	2002      	moveq	r0, #2
 80063d0:	2000      	movne	r0, #0
}
 80063d2:	f85d 4b04 	ldr.w	r4, [sp], #4
		*index = 0;
 80063d6:	8013      	strh	r3, [r2, #0]
}
 80063d8:	4770      	bx	lr
 80063da:	4603      	mov	r3, r0
		*index = 0;
 80063dc:	8013      	strh	r3, [r2, #0]
		error = ERROR_TABLE_NOT_INIT;
 80063de:	2001      	movs	r0, #1
}
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop

080063e4 <getBlockParamIndex>:
{
	uint16 i;
	uint8 error;

	/* send parameter ID error if no parameter table has been initialized */
	if (paramTable == 0)
 80063e4:	b1e8      	cbz	r0, 8006422 <getBlockParamIndex+0x3e>
{
 80063e6:	b410      	push	{r4}
		error = ERROR_TABLE_NOT_INIT;
	}
	else
	{
		i = 0;
		while((paramId != paramTable[i].uiParID) && (paramTable[i].uiParID != 0))
 80063e8:	8804      	ldrh	r4, [r0, #0]
 80063ea:	42a1      	cmp	r1, r4
		i = 0;
 80063ec:	f04f 0300 	mov.w	r3, #0
		while((paramId != paramTable[i].uiParID) && (paramTable[i].uiParID != 0))
 80063f0:	d104      	bne.n	80063fc <getBlockParamIndex+0x18>
 80063f2:	e00d      	b.n	8006410 <getBlockParamIndex+0x2c>
 80063f4:	f830 4033 	ldrh.w	r4, [r0, r3, lsl #3]
 80063f8:	428c      	cmp	r4, r1
 80063fa:	d009      	beq.n	8006410 <getBlockParamIndex+0x2c>
		{
			i++;
 80063fc:	3301      	adds	r3, #1
 80063fe:	b29b      	uxth	r3, r3
		while((paramId != paramTable[i].uiParID) && (paramTable[i].uiParID != 0))
 8006400:	2c00      	cmp	r4, #0
 8006402:	d1f7      	bne.n	80063f4 <getBlockParamIndex+0x10>
 8006404:	4623      	mov	r3, r4
		}
		/* check if parameter is located in parameter table */
		if (paramTable[i].uiParID == 0)
		{
			*index = 0;
			error = ERROR_INVALID_ID;
 8006406:	2002      	movs	r0, #2
			*index = i;
			error = ERROR_SUCCESS;
		}
	}
	return (error);
}
 8006408:	f85d 4b04 	ldr.w	r4, [sp], #4
		*index = 0;
 800640c:	8013      	strh	r3, [r2, #0]
}
 800640e:	4770      	bx	lr
			error = ERROR_SUCCESS;
 8006410:	2900      	cmp	r1, #0
 8006412:	bf06      	itte	eq
 8006414:	2300      	moveq	r3, #0
 8006416:	2002      	moveq	r0, #2
 8006418:	2000      	movne	r0, #0
}
 800641a:	f85d 4b04 	ldr.w	r4, [sp], #4
		*index = 0;
 800641e:	8013      	strh	r3, [r2, #0]
}
 8006420:	4770      	bx	lr
 8006422:	4603      	mov	r3, r0
		*index = 0;
 8006424:	8013      	strh	r3, [r2, #0]
		error = ERROR_TABLE_NOT_INIT;
 8006426:	2001      	movs	r0, #1
}
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop

0800642c <getMaskParamIndex>:
{
	uint16 i;
	uint8 error;

	/* send parameter ID error if no parameter table has been initialized */
	if (mpTable == 0)
 800642c:	b1f8      	cbz	r0, 800646e <getMaskParamIndex+0x42>
{
 800642e:	b410      	push	{r4}
		error = ERROR_TABLE_NOT_INIT;
	}
	else
	{
		i = 0;
		while((paramId != mpTable[i].id) && (mpTable[i].id != 0))
 8006430:	8804      	ldrh	r4, [r0, #0]
 8006432:	42a1      	cmp	r1, r4
		i = 0;
 8006434:	f04f 0300 	mov.w	r3, #0
		while((paramId != mpTable[i].id) && (mpTable[i].id != 0))
 8006438:	d104      	bne.n	8006444 <getMaskParamIndex+0x18>
 800643a:	e00f      	b.n	800645c <getMaskParamIndex+0x30>
 800643c:	f830 402c 	ldrh.w	r4, [r0, ip, lsl #2]
 8006440:	428c      	cmp	r4, r1
 8006442:	d00b      	beq.n	800645c <getMaskParamIndex+0x30>
		{
			i++;
 8006444:	3301      	adds	r3, #1
 8006446:	b29b      	uxth	r3, r3
		while((paramId != mpTable[i].id) && (mpTable[i].id != 0))
 8006448:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800644c:	2c00      	cmp	r4, #0
 800644e:	d1f5      	bne.n	800643c <getMaskParamIndex+0x10>
 8006450:	4623      	mov	r3, r4
		}
		/* check if parameter is located in parameter table */
		if (mpTable[i].id == 0)
		{
			*index = 0;
			error = ERROR_INVALID_ID;
 8006452:	2002      	movs	r0, #2
			*index = i;
			error = ERROR_SUCCESS;
		}
	}
	return (error);
}
 8006454:	f85d 4b04 	ldr.w	r4, [sp], #4
		*index = 0;
 8006458:	8013      	strh	r3, [r2, #0]
}
 800645a:	4770      	bx	lr
			error = ERROR_SUCCESS;
 800645c:	2900      	cmp	r1, #0
 800645e:	bf06      	itte	eq
 8006460:	2300      	moveq	r3, #0
 8006462:	2002      	moveq	r0, #2
 8006464:	2000      	movne	r0, #0
}
 8006466:	f85d 4b04 	ldr.w	r4, [sp], #4
		*index = 0;
 800646a:	8013      	strh	r3, [r2, #0]
}
 800646c:	4770      	bx	lr
 800646e:	4603      	mov	r3, r0
		*index = 0;
 8006470:	8013      	strh	r3, [r2, #0]
		error = ERROR_TABLE_NOT_INIT;
 8006472:	2001      	movs	r0, #1
}
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop

08006478 <getBlockFunctionIndex>:
uint8 getBlockFunctionIndex(const tBlockFunctions* fncTable, uint16 blockId, uint16* index)
{
	uint16 i;
	uint8 error;

	if (fncTable == 0)
 8006478:	b1f8      	cbz	r0, 80064ba <getBlockFunctionIndex+0x42>
{
 800647a:	b410      	push	{r4}
		error = ERROR_TABLE_NOT_INIT;
	}
	else
	{
		i = 0;
		while ((blockId != fncTable[i].iBlockID) && (fncTable[i].iBlockID != 0))
 800647c:	8804      	ldrh	r4, [r0, #0]
 800647e:	42a1      	cmp	r1, r4
		i = 0;
 8006480:	f04f 0300 	mov.w	r3, #0
		while ((blockId != fncTable[i].iBlockID) && (fncTable[i].iBlockID != 0))
 8006484:	d104      	bne.n	8006490 <getBlockFunctionIndex+0x18>
 8006486:	e00f      	b.n	80064a8 <getBlockFunctionIndex+0x30>
 8006488:	f830 403c 	ldrh.w	r4, [r0, ip, lsl #3]
 800648c:	428c      	cmp	r4, r1
 800648e:	d00b      	beq.n	80064a8 <getBlockFunctionIndex+0x30>
		{
			i++;
 8006490:	3301      	adds	r3, #1
 8006492:	b29b      	uxth	r3, r3
		while ((blockId != fncTable[i].iBlockID) && (fncTable[i].iBlockID != 0))
 8006494:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8006498:	2c00      	cmp	r4, #0
 800649a:	d1f5      	bne.n	8006488 <getBlockFunctionIndex+0x10>
 800649c:	4623      	mov	r3, r4
		}

		if (fncTable[i].iBlockID == 0)
		{
			*index = 0;
			error = ERROR_INVALID_ID;
 800649e:	2002      	movs	r0, #2
			*index = i;
			error = ERROR_SUCCESS;
		}
	}
	return (error);
}
 80064a0:	f85d 4b04 	ldr.w	r4, [sp], #4
		*index = 0;
 80064a4:	8013      	strh	r3, [r2, #0]
}
 80064a6:	4770      	bx	lr
			error = ERROR_SUCCESS;
 80064a8:	2900      	cmp	r1, #0
 80064aa:	bf06      	itte	eq
 80064ac:	2300      	moveq	r3, #0
 80064ae:	2002      	moveq	r0, #2
 80064b0:	2000      	movne	r0, #0
}
 80064b2:	f85d 4b04 	ldr.w	r4, [sp], #4
		*index = 0;
 80064b6:	8013      	strh	r3, [r2, #0]
}
 80064b8:	4770      	bx	lr
 80064ba:	4603      	mov	r3, r0
		*index = 0;
 80064bc:	8013      	strh	r3, [r2, #0]
		error = ERROR_TABLE_NOT_INIT;
 80064be:	2001      	movs	r0, #1
}
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop

080064c4 <enableSend>:

/* enable send procedure / disable receive procedure */
static void enableSend(tLNet* protocol)
{
	protocol->commState = SEND_ALLOWED;
	protocol->txState = LNET_STATE_SYN;
 80064c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80064c8:	8543      	strh	r3, [r0, #42]	@ 0x2a
}
 80064ca:	4770      	bx	lr

080064cc <setupRxTimeout>:
	enableReceive(protocol);
}

static void setupRxTimeout(tLNet* protocol, uint16 timeout)
{
	protocol->rxTimeout = timeout;
 80064cc:	8481      	strh	r1, [r0, #36]	@ 0x24
}
 80064ce:	4770      	bx	lr

080064d0 <resetRxTimeout>:
	}
}

static void resetRxTimeout(tLNet* protocol)
{
	protocol->rxTimeoutCnt = protocol->rxTimeout;
 80064d0:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
 80064d2:	84c3      	strh	r3, [r0, #38]	@ 0x26
}
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop

080064d8 <communicate>:
{
 80064d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while ((protocol->commState == SEND_ALLOWED) && protocol->hwInterface->isSendReady(HW_INTERFACE))
 80064dc:	f890 302b 	ldrb.w	r3, [r0, #43]	@ 0x2b
 80064e0:	2b01      	cmp	r3, #1
{
 80064e2:	4604      	mov	r4, r0
	while ((protocol->commState == SEND_ALLOWED) && protocol->hwInterface->isSendReady(HW_INTERFACE))
 80064e4:	d14a      	bne.n	800657c <communicate+0xa4>
				tmp = (uint8)(protocol->frameSize >> 8);
 80064e6:	4ea3      	ldr	r6, [pc, #652]	@ (8006774 <communicate+0x29c>)
				protocol->hwInterface->send(HW_INTERFACE, LNET_FILL);
 80064e8:	2700      	movs	r7, #0
	while ((protocol->commState == SEND_ALLOWED) && protocol->hwInterface->isSendReady(HW_INTERFACE))
 80064ea:	6960      	ldr	r0, [r4, #20]
 80064ec:	68c3      	ldr	r3, [r0, #12]
 80064ee:	4798      	blx	r3
 80064f0:	2800      	cmp	r0, #0
 80064f2:	f000 8248 	beq.w	8006986 <communicate+0x4ae>
		switch (protocol->txState)
 80064f6:	f894 502a 	ldrb.w	r5, [r4, #42]	@ 0x2a
 80064fa:	2d06      	cmp	r5, #6
 80064fc:	d813      	bhi.n	8006526 <communicate+0x4e>
 80064fe:	e8df f005 	tbb	[pc, r5]
 8006502:	b9a6      	.short	0xb9a6
 8006504:	3151758e 	.word	0x3151758e
 8006508:	04          	.byte	0x04
 8006509:	00          	.byte	0x00
				protocol->crc &= 0xFF;
 800650a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
				if ((protocol->crc == LNET_STD_SYN) || (protocol->crc == LNET_OSM_SYN))
 800650e:	2955      	cmp	r1, #85	@ 0x55
 8006510:	f000 815b 	beq.w	80067ca <communicate+0x2f2>
 8006514:	2902      	cmp	r1, #2
 8006516:	f000 8158 	beq.w	80067ca <communicate+0x2f2>
				protocol->hwInterface->send(HW_INTERFACE, protocol->crc);
 800651a:	6960      	ldr	r0, [r4, #20]
 800651c:	6803      	ldr	r3, [r0, #0]
 800651e:	4798      	blx	r3
				protocol->hwInterface->flush(HW_INTERFACE);
 8006520:	6960      	ldr	r0, [r4, #20]
 8006522:	6943      	ldr	r3, [r0, #20]
 8006524:	4798      	blx	r3
	protocol->commState = RECEIVE_ALLOWED;
 8006526:	2300      	movs	r3, #0
 8006528:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
	protocol->rxState = LNET_STATE_SYN;
 800652c:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
				tmpSize += ((uint16)msg << 8);
 8006530:	4e91      	ldr	r6, [pc, #580]	@ (8006778 <communicate+0x2a0>)
					protocol->rxState = LNET_STATE_SYN;
 8006532:	2700      	movs	r7, #0
	while ((protocol->commState == RECEIVE_ALLOWED) && protocol->hwInterface->isReceiveDataAvailable(HW_INTERFACE))
 8006534:	6960      	ldr	r0, [r4, #20]
 8006536:	6883      	ldr	r3, [r0, #8]
 8006538:	4798      	blx	r3
 800653a:	b308      	cbz	r0, 8006580 <communicate+0xa8>
		msg = protocol->hwInterface->receive(HW_INTERFACE);
 800653c:	6960      	ldr	r0, [r4, #20]
	protocol->rxTimeoutCnt = protocol->rxTimeout;
 800653e:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
		msg = protocol->hwInterface->receive(HW_INTERFACE);
 8006540:	6843      	ldr	r3, [r0, #4]
	protocol->rxTimeoutCnt = protocol->rxTimeout;
 8006542:	84e2      	strh	r2, [r4, #38]	@ 0x26
		msg = protocol->hwInterface->receive(HW_INTERFACE);
 8006544:	4798      	blx	r3
		switch (protocol->rxState)
 8006546:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
		msg = protocol->hwInterface->receive(HW_INTERFACE);
 800654a:	4605      	mov	r5, r0
		switch (protocol->rxState)
 800654c:	2b06      	cmp	r3, #6
 800654e:	f200 8238 	bhi.w	80069c2 <communicate+0x4ea>
 8006552:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006556:	0100      	.short	0x0100
 8006558:	011500f7 	.word	0x011500f7
 800655c:	00c900e7 	.word	0x00c900e7
 8006560:	00a900bc 	.word	0x00a900bc
				protocol->hwInterface->send(HW_INTERFACE, LNET_FILL);
 8006564:	6960      	ldr	r0, [r4, #20]
 8006566:	2100      	movs	r1, #0
 8006568:	6803      	ldr	r3, [r0, #0]
 800656a:	4798      	blx	r3
				protocol->txState = protocol->nextState;
 800656c:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 8006570:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
	while ((protocol->commState == SEND_ALLOWED) && protocol->hwInterface->isSendReady(HW_INTERFACE))
 8006574:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8006578:	2b01      	cmp	r3, #1
 800657a:	d0b6      	beq.n	80064ea <communicate+0x12>
	while ((protocol->commState == RECEIVE_ALLOWED) && protocol->hwInterface->isReceiveDataAvailable(HW_INTERFACE))
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0d7      	beq.n	8006530 <communicate+0x58>
	if (protocol->rxTimeoutCnt == 0)
 8006580:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8006582:	b91b      	cbnz	r3, 800658c <communicate+0xb4>
	protocol->rxTimeoutCnt = protocol->rxTimeout;
 8006584:	8ca2      	ldrh	r2, [r4, #36]	@ 0x24
		protocol->rxState = LNET_STATE_SYN;
 8006586:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
	protocol->rxTimeoutCnt = protocol->rxTimeout;
 800658a:	84e2      	strh	r2, [r4, #38]	@ 0x26
	if ((TableStruct->piScope != 0) && (TableStruct->piScope->state == SCOPE_SAMPLE_ONLINE))
 800658c:	4e7b      	ldr	r6, [pc, #492]	@ (800677c <communicate+0x2a4>)
 800658e:	6833      	ldr	r3, [r6, #0]
 8006590:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006592:	b12a      	cbz	r2, 80065a0 <communicate+0xc8>
 8006594:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006596:	f892 204d 	ldrb.w	r2, [r2, #77]	@ 0x4d
 800659a:	2a04      	cmp	r2, #4
 800659c:	f000 8169 	beq.w	8006872 <communicate+0x39a>
}
 80065a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				protocol->frameData[protocol->frameBufferPtr] &= 0xFF;
 80065a4:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80065a6:	68e2      	ldr	r2, [r4, #12]
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 80065a8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80065ac:	5cd1      	ldrb	r1, [r2, r3]
 80065ae:	f7ff fed1 	bl	8006354 <crc8ccitt_addValue>
				protocol->hwInterface->send(HW_INTERFACE, protocol->frameData[protocol->frameBufferPtr]);
 80065b2:	6963      	ldr	r3, [r4, #20]
 80065b4:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 80065b6:	68e1      	ldr	r1, [r4, #12]
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 80065b8:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
				protocol->hwInterface->send(HW_INTERFACE, protocol->frameData[protocol->frameBufferPtr]);
 80065bc:	5c89      	ldrb	r1, [r1, r2]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	4618      	mov	r0, r3
 80065c2:	4790      	blx	r2
				if ((protocol->frameBufferPtr + 1) >= protocol->frameSize)
 80065c4:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 80065c6:	8921      	ldrh	r1, [r4, #8]
 80065c8:	1c53      	adds	r3, r2, #1
 80065ca:	428b      	cmp	r3, r1
					checkFill(protocol, protocol->frameData[protocol->frameBufferPtr], \
 80065cc:	68e1      	ldr	r1, [r4, #12]
 80065ce:	5c8a      	ldrb	r2, [r1, r2]
				if ((protocol->frameBufferPtr + 1) >= protocol->frameSize)
 80065d0:	f2c0 8128 	blt.w	8006824 <communicate+0x34c>
	if ((data == LNET_STD_SYN) || (data == LNET_OSM_SYN))
 80065d4:	2a55      	cmp	r2, #85	@ 0x55
 80065d6:	f04f 0506 	mov.w	r5, #6
 80065da:	f000 8126 	beq.w	800682a <communicate+0x352>
 80065de:	2a02      	cmp	r2, #2
 80065e0:	f000 8123 	beq.w	800682a <communicate+0x352>
		*stateVar = state;
 80065e4:	f884 502a 	strb.w	r5, [r4, #42]	@ 0x2a
				protocol->frameBufferPtr++;
 80065e8:	85e3      	strh	r3, [r4, #46]	@ 0x2e
				break;
 80065ea:	e7c3      	b.n	8006574 <communicate+0x9c>
				tmp = (uint8)(protocol->frameSize >> 8);
 80065ec:	8921      	ldrh	r1, [r4, #8]
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 80065ee:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
				tmp = (uint8)(protocol->frameSize >> 8);
 80065f2:	0a09      	lsrs	r1, r1, #8
 80065f4:	7031      	strb	r1, [r6, #0]
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 80065f6:	f7ff fead 	bl	8006354 <crc8ccitt_addValue>
				protocol->hwInterface->send(HW_INTERFACE, tmp);
 80065fa:	6963      	ldr	r3, [r4, #20]
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 80065fc:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
				protocol->hwInterface->send(HW_INTERFACE, tmp);
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	7831      	ldrb	r1, [r6, #0]
 8006604:	4618      	mov	r0, r3
 8006606:	4790      	blx	r2
				checkFill(protocol, tmp, &protocol->txState, LNET_STATE_DATA);
 8006608:	7833      	ldrb	r3, [r6, #0]
	if ((data == LNET_STD_SYN) || (data == LNET_OSM_SYN))
 800660a:	2b55      	cmp	r3, #85	@ 0x55
 800660c:	f000 80d4 	beq.w	80067b8 <communicate+0x2e0>
 8006610:	2b02      	cmp	r3, #2
 8006612:	f000 80d1 	beq.w	80067b8 <communicate+0x2e0>
		*stateVar = state;
 8006616:	2304      	movs	r3, #4
 8006618:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
 800661c:	e7aa      	b.n	8006574 <communicate+0x9c>
				tmp = (uint8)(protocol->frameSize & 0xFF);
 800661e:	7a21      	ldrb	r1, [r4, #8]
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 8006620:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
				tmp = (uint8)(protocol->frameSize & 0xFF);
 8006624:	7031      	strb	r1, [r6, #0]
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 8006626:	f7ff fe95 	bl	8006354 <crc8ccitt_addValue>
				protocol->hwInterface->send(HW_INTERFACE, tmp);
 800662a:	6963      	ldr	r3, [r4, #20]
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 800662c:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
				protocol->hwInterface->send(HW_INTERFACE, tmp);
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	7831      	ldrb	r1, [r6, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	4790      	blx	r2
				checkFill(protocol, tmp, &protocol->txState, LNET_STATE_SIZE_MSB);
 8006638:	7833      	ldrb	r3, [r6, #0]
	if ((data == LNET_STD_SYN) || (data == LNET_OSM_SYN))
 800663a:	2b55      	cmp	r3, #85	@ 0x55
 800663c:	f000 80d3 	beq.w	80067e6 <communicate+0x30e>
 8006640:	2b02      	cmp	r3, #2
 8006642:	f000 80d0 	beq.w	80067e6 <communicate+0x30e>
		*stateVar = state;
 8006646:	2303      	movs	r3, #3
 8006648:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
 800664c:	e792      	b.n	8006574 <communicate+0x9c>
	protocol->crc = crc8ccitt_init();
 800664e:	f7ff fe8f 	bl	8006370 <crc8ccitt_init>
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 8006652:	2155      	movs	r1, #85	@ 0x55
	protocol->crc = crc8ccitt_init();
 8006654:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 8006658:	f7ff fe7c 	bl	8006354 <crc8ccitt_addValue>
				protocol->hwInterface->send(HW_INTERFACE, LNET_STD_SYN);
 800665c:	6963      	ldr	r3, [r4, #20]
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 800665e:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
				protocol->hwInterface->send(HW_INTERFACE, LNET_STD_SYN);
 8006662:	681a      	ldr	r2, [r3, #0]
				protocol->frameBufferPtr = 0;
 8006664:	85e7      	strh	r7, [r4, #46]	@ 0x2e
				protocol->hwInterface->send(HW_INTERFACE, LNET_STD_SYN);
 8006666:	4618      	mov	r0, r3
 8006668:	2155      	movs	r1, #85	@ 0x55
 800666a:	4790      	blx	r2
				protocol->txState = LNET_STATE_NODE;
 800666c:	2301      	movs	r3, #1
 800666e:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
				break;
 8006672:	e77f      	b.n	8006574 <communicate+0x9c>
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 8006674:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8006678:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 800667c:	f7ff fe6a 	bl	8006354 <crc8ccitt_addValue>
				protocol->hwInterface->send(HW_INTERFACE, protocol->node);
 8006680:	6963      	ldr	r3, [r4, #20]
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 8006682:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
				protocol->hwInterface->send(HW_INTERFACE, protocol->node);
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 800668c:	4618      	mov	r0, r3
 800668e:	4790      	blx	r2
				checkFill(protocol, protocol->node, &protocol->txState, LNET_STATE_SIZE_LSB);
 8006690:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
	if ((data == LNET_STD_SYN) || (data == LNET_OSM_SYN))
 8006694:	2b55      	cmp	r3, #85	@ 0x55
 8006696:	f000 809d 	beq.w	80067d4 <communicate+0x2fc>
 800669a:	2b02      	cmp	r3, #2
 800669c:	f000 809a 	beq.w	80067d4 <communicate+0x2fc>
		*stateVar = state;
 80066a0:	2302      	movs	r3, #2
 80066a2:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
 80066a6:	e765      	b.n	8006574 <communicate+0x9c>
				protocol->crc &= 0xFF;
 80066a8:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
				if ((protocol->crc == LNET_STD_SYN) || (protocol->crc == LNET_OSM_SYN))
 80066ac:	2b55      	cmp	r3, #85	@ 0x55
 80066ae:	d078      	beq.n	80067a2 <communicate+0x2ca>
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d076      	beq.n	80067a2 <communicate+0x2ca>
				if (protocol->crc == msg)
 80066b4:	429d      	cmp	r5, r3
 80066b6:	d17a      	bne.n	80067ae <communicate+0x2d6>
					if (protocol->frameData[0] <= MAX_SERVICE_ID)
 80066b8:	68e3      	ldr	r3, [r4, #12]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b1a      	cmp	r3, #26
 80066be:	f200 8168 	bhi.w	8006992 <communicate+0x4ba>
						svTable[protocol->frameData[0]]((tProtocol*)protocol);
 80066c2:	6922      	ldr	r2, [r4, #16]
 80066c4:	4620      	mov	r0, r4
 80066c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ca:	4798      	blx	r3
 80066cc:	e006      	b.n	80066dc <communicate+0x204>
				if (msg == LNET_FILL)
 80066ce:	2800      	cmp	r0, #0
 80066d0:	f040 80b4 	bne.w	800683c <communicate+0x364>
					protocol->rxState = protocol->nextState;
 80066d4:	f894 3030 	ldrb.w	r3, [r4, #48]	@ 0x30
 80066d8:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
	while ((protocol->commState == RECEIVE_ALLOWED) && protocol->hwInterface->isReceiveDataAvailable(HW_INTERFACE))
 80066dc:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f43f af27 	beq.w	8006534 <communicate+0x5c>
 80066e6:	e74b      	b.n	8006580 <communicate+0xa8>
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 80066e8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80066ec:	4629      	mov	r1, r5
 80066ee:	f7ff fe31 	bl	8006354 <crc8ccitt_addValue>
				protocol->frameData[protocol->frameBufferPtr] = msg;
 80066f2:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80066f4:	68e2      	ldr	r2, [r4, #12]
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 80066f6:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
				protocol->frameData[protocol->frameBufferPtr] = msg;
 80066fa:	54d5      	strb	r5, [r2, r3]
				protocol->frameBufferPtr++;
 80066fc:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
				if (protocol->frameBufferPtr >= protocol->frameSize)
 80066fe:	8922      	ldrh	r2, [r4, #8]
				protocol->frameBufferPtr++;
 8006700:	3301      	adds	r3, #1
 8006702:	b29b      	uxth	r3, r3
				if (protocol->frameBufferPtr >= protocol->frameSize)
 8006704:	429a      	cmp	r2, r3
				protocol->frameBufferPtr++;
 8006706:	85e3      	strh	r3, [r4, #46]	@ 0x2e
				if (protocol->frameBufferPtr >= protocol->frameSize)
 8006708:	f200 8080 	bhi.w	800680c <communicate+0x334>
	if ((data == LNET_STD_SYN) || (data == LNET_OSM_SYN))
 800670c:	2d55      	cmp	r5, #85	@ 0x55
		protocol->nextState = state;
 800670e:	f04f 0306 	mov.w	r3, #6
	if ((data == LNET_STD_SYN) || (data == LNET_OSM_SYN))
 8006712:	d141      	bne.n	8006798 <communicate+0x2c0>
		protocol->nextState = state;
 8006714:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
		*stateVar = LNET_STATE_FILL;
 8006718:	2305      	movs	r3, #5
		protocol->lastSyn = data;
 800671a:	f884 5031 	strb.w	r5, [r4, #49]	@ 0x31
		*stateVar = LNET_STATE_FILL;
 800671e:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
 8006722:	e7db      	b.n	80066dc <communicate+0x204>
				tmpSize += ((uint16)msg << 8);
 8006724:	8833      	ldrh	r3, [r6, #0]
				if (tmpSize > protocol->maxCommSize)
 8006726:	8962      	ldrh	r2, [r4, #10]
				tmpSize += ((uint16)msg << 8);
 8006728:	eb03 2300 	add.w	r3, r3, r0, lsl #8
 800672c:	b29b      	uxth	r3, r3
				if (tmpSize > protocol->maxCommSize)
 800672e:	429a      	cmp	r2, r3
				tmpSize += ((uint16)msg << 8);
 8006730:	8033      	strh	r3, [r6, #0]
				if (tmpSize > protocol->maxCommSize)
 8006732:	d261      	bcs.n	80067f8 <communicate+0x320>
	protocol->frameData[0] = serviceId;
 8006734:	68e3      	ldr	r3, [r4, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	701a      	strb	r2, [r3, #0]
	sendError((tProtocol*)protocol, errorId);
 800673a:	2115      	movs	r1, #21
 800673c:	4620      	mov	r0, r4
 800673e:	f001 fa4b 	bl	8007bd8 <sendError>
}
 8006742:	e7cb      	b.n	80066dc <communicate+0x204>
				if ((msg != 0) && (msg == protocol->node))
 8006744:	b120      	cbz	r0, 8006750 <communicate+0x278>
 8006746:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800674a:	4283      	cmp	r3, r0
 800674c:	f000 812c 	beq.w	80069a8 <communicate+0x4d0>
					protocol->rxState = LNET_STATE_SYN;
 8006750:	f884 7029 	strb.w	r7, [r4, #41]	@ 0x29
 8006754:	e7c2      	b.n	80066dc <communicate+0x204>
				if (msg == LNET_STD_SYN)
 8006756:	2855      	cmp	r0, #85	@ 0x55
 8006758:	d1c0      	bne.n	80066dc <communicate+0x204>
	protocol->crc = crc8ccitt_init();
 800675a:	f7ff fe09 	bl	8006370 <crc8ccitt_init>
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 800675e:	4629      	mov	r1, r5
	protocol->crc = crc8ccitt_init();
 8006760:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 8006764:	f7ff fdf6 	bl	8006354 <crc8ccitt_addValue>
					protocol->rxState = LNET_STATE_NODE;
 8006768:	2301      	movs	r3, #1
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 800676a:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
					protocol->rxState = LNET_STATE_NODE;
 800676e:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
 8006772:	e7b3      	b.n	80066dc <communicate+0x204>
 8006774:	2000065e 	.word	0x2000065e
 8006778:	2000065c 	.word	0x2000065c
 800677c:	2000000c 	.word	0x2000000c
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 8006780:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
				tmpSize = (uint16)msg;
 8006784:	8035      	strh	r5, [r6, #0]
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 8006786:	4629      	mov	r1, r5
 8006788:	f7ff fde4 	bl	8006354 <crc8ccitt_addValue>
	if ((data == LNET_STD_SYN) || (data == LNET_OSM_SYN))
 800678c:	2d55      	cmp	r5, #85	@ 0x55
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 800678e:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
		protocol->nextState = state;
 8006792:	f04f 0303 	mov.w	r3, #3
	if ((data == LNET_STD_SYN) || (data == LNET_OSM_SYN))
 8006796:	d0bd      	beq.n	8006714 <communicate+0x23c>
 8006798:	2d02      	cmp	r5, #2
 800679a:	d0bb      	beq.n	8006714 <communicate+0x23c>
				protocol->rxState = LNET_STATE_SYN;
 800679c:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
				break;
 80067a0:	e79c      	b.n	80066dc <communicate+0x204>
					protocol->crc = (~protocol->crc) & 0xFF;
 80067a2:	43db      	mvns	r3, r3
 80067a4:	b2db      	uxtb	r3, r3
				if (protocol->crc == msg)
 80067a6:	429d      	cmp	r5, r3
					protocol->crc = (~protocol->crc) & 0xFF;
 80067a8:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
				if (protocol->crc == msg)
 80067ac:	d084      	beq.n	80066b8 <communicate+0x1e0>
					sendError((tProtocol*)protocol, ERRORChksum);
 80067ae:	2113      	movs	r1, #19
 80067b0:	4620      	mov	r0, r4
 80067b2:	f001 fa11 	bl	8007bd8 <sendError>
 80067b6:	e791      	b.n	80066dc <communicate+0x204>
		protocol->nextState = state;
 80067b8:	2204      	movs	r2, #4
		protocol->lastSyn = data;
 80067ba:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
		*stateVar = LNET_STATE_FILL;
 80067be:	2305      	movs	r3, #5
		protocol->nextState = state;
 80067c0:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
		*stateVar = LNET_STATE_FILL;
 80067c4:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
 80067c8:	e6d4      	b.n	8006574 <communicate+0x9c>
					protocol->crc = (~protocol->crc) & 0xFF;
 80067ca:	43c9      	mvns	r1, r1
 80067cc:	b2c9      	uxtb	r1, r1
 80067ce:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 80067d2:	e6a2      	b.n	800651a <communicate+0x42>
		protocol->nextState = state;
 80067d4:	2202      	movs	r2, #2
		protocol->lastSyn = data;
 80067d6:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
		*stateVar = LNET_STATE_FILL;
 80067da:	2305      	movs	r3, #5
		protocol->nextState = state;
 80067dc:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
		*stateVar = LNET_STATE_FILL;
 80067e0:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
 80067e4:	e6c6      	b.n	8006574 <communicate+0x9c>
		protocol->nextState = state;
 80067e6:	2203      	movs	r2, #3
		protocol->lastSyn = data;
 80067e8:	f884 3031 	strb.w	r3, [r4, #49]	@ 0x31
		*stateVar = LNET_STATE_FILL;
 80067ec:	2305      	movs	r3, #5
		protocol->nextState = state;
 80067ee:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
		*stateVar = LNET_STATE_FILL;
 80067f2:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
 80067f6:	e6bd      	b.n	8006574 <communicate+0x9c>
					protocol->frameSize = tmpSize;
 80067f8:	8123      	strh	r3, [r4, #8]
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 80067fa:	4601      	mov	r1, r0
 80067fc:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8006800:	f7ff fda8 	bl	8006354 <crc8ccitt_addValue>
					protocol->frameBufferPtr = 0;
 8006804:	2300      	movs	r3, #0
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 8006806:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
					protocol->frameBufferPtr = 0;
 800680a:	85e3      	strh	r3, [r4, #46]	@ 0x2e
	if ((data == LNET_STD_SYN) || (data == LNET_OSM_SYN))
 800680c:	2d55      	cmp	r5, #85	@ 0x55
		protocol->nextState = state;
 800680e:	f04f 0304 	mov.w	r3, #4
	if ((data == LNET_STD_SYN) || (data == LNET_OSM_SYN))
 8006812:	d1c1      	bne.n	8006798 <communicate+0x2c0>
		protocol->nextState = state;
 8006814:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
		*stateVar = LNET_STATE_FILL;
 8006818:	2305      	movs	r3, #5
		protocol->lastSyn = data;
 800681a:	f884 5031 	strb.w	r5, [r4, #49]	@ 0x31
		*stateVar = LNET_STATE_FILL;
 800681e:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
 8006822:	e75b      	b.n	80066dc <communicate+0x204>
	if ((data == LNET_STD_SYN) || (data == LNET_OSM_SYN))
 8006824:	2a55      	cmp	r2, #85	@ 0x55
 8006826:	f47f aeda 	bne.w	80065de <communicate+0x106>
		protocol->nextState = state;
 800682a:	f884 5030 	strb.w	r5, [r4, #48]	@ 0x30
 800682e:	2505      	movs	r5, #5
		protocol->lastSyn = data;
 8006830:	f884 2031 	strb.w	r2, [r4, #49]	@ 0x31
		*stateVar = state;
 8006834:	f884 502a 	strb.w	r5, [r4, #42]	@ 0x2a
				protocol->frameBufferPtr++;
 8006838:	85e3      	strh	r3, [r4, #46]	@ 0x2e
				break;
 800683a:	e69b      	b.n	8006574 <communicate+0x9c>
					if ((protocol->lastSyn == LNET_STD_SYN) && (msg == protocol->node))
 800683c:	f894 8031 	ldrb.w	r8, [r4, #49]	@ 0x31
 8006840:	f1b8 0f55 	cmp.w	r8, #85	@ 0x55
 8006844:	d184      	bne.n	8006750 <communicate+0x278>
 8006846:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800684a:	4283      	cmp	r3, r0
 800684c:	d180      	bne.n	8006750 <communicate+0x278>
	protocol->crc = crc8ccitt_init();
 800684e:	f7ff fd8f 	bl	8006370 <crc8ccitt_init>
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 8006852:	4641      	mov	r1, r8
	protocol->crc = crc8ccitt_init();
 8006854:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 8006858:	f7ff fd7c 	bl	8006354 <crc8ccitt_addValue>
 800685c:	4629      	mov	r1, r5
 800685e:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
 8006862:	f7ff fd77 	bl	8006354 <crc8ccitt_addValue>
						protocol->rxState = LNET_STATE_SIZE_LSB;
 8006866:	2302      	movs	r3, #2
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 8006868:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
						protocol->rxState = LNET_STATE_SIZE_LSB;
 800686c:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
 8006870:	e734      	b.n	80066dc <communicate+0x204>
		if ((protocol->hwInterface->getTxFifoFree(HW_INTERFACE) >= (TableStruct->piScope->txFrameSize + overheadSize)) && \
 8006872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006874:	6960      	ldr	r0, [r4, #20]
 8006876:	f893 505c 	ldrb.w	r5, [r3, #92]	@ 0x5c
 800687a:	6903      	ldr	r3, [r0, #16]
 800687c:	4798      	blx	r3
 800687e:	3504      	adds	r5, #4
 8006880:	4285      	cmp	r5, r0
 8006882:	f280 808b 	bge.w	800699c <communicate+0x4c4>
		    (TableStruct->piScope->stfCnt >= TableStruct->piScope->stf))
 8006886:	6833      	ldr	r3, [r6, #0]
 8006888:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800688a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
		if ((protocol->hwInterface->getTxFifoFree(HW_INTERFACE) >= (TableStruct->piScope->txFrameSize + overheadSize)) && \
 800688c:	f8b1 1058 	ldrh.w	r1, [r1, #88]	@ 0x58
 8006890:	f8b2 2056 	ldrh.w	r2, [r2, #86]	@ 0x56
 8006894:	4291      	cmp	r1, r2
 8006896:	f0c0 8081 	bcc.w	800699c <communicate+0x4c4>
			protocol->hwInterface->send(HW_INTERFACE, LNET_OSM_SYN);
 800689a:	6960      	ldr	r0, [r4, #20]
            TableStruct->piScope->stfCnt = 0;
 800689c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689e:	2700      	movs	r7, #0
 80068a0:	f8a3 7058 	strh.w	r7, [r3, #88]	@ 0x58
			protocol->hwInterface->send(HW_INTERFACE, LNET_OSM_SYN);
 80068a4:	2102      	movs	r1, #2
 80068a6:	6803      	ldr	r3, [r0, #0]
 80068a8:	4798      	blx	r3
			protocol->hwInterface->send(HW_INTERFACE, protocol->node);
 80068aa:	6960      	ldr	r0, [r4, #20]
 80068ac:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80068b0:	6803      	ldr	r3, [r0, #0]
 80068b2:	4798      	blx	r3
			protocol->hwInterface->send(HW_INTERFACE, TableStruct->piScope->txFrameSize);
 80068b4:	6833      	ldr	r3, [r6, #0]
 80068b6:	6960      	ldr	r0, [r4, #20]
 80068b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ba:	f893 105c 	ldrb.w	r1, [r3, #92]	@ 0x5c
 80068be:	6803      	ldr	r3, [r0, #0]
 80068c0:	4798      	blx	r3
			protocol->hwInterface->send(HW_INTERFACE, 0);
 80068c2:	6960      	ldr	r0, [r4, #20]
 80068c4:	4639      	mov	r1, r7
 80068c6:	6803      	ldr	r3, [r0, #0]
 80068c8:	4798      	blx	r3
			protocol->hwInterface->send(HW_INTERFACE, X2C_GET_LOW_BYTE(TableStruct->piScope->timestamp));
 80068ca:	6833      	ldr	r3, [r6, #0]
 80068cc:	6960      	ldr	r0, [r4, #20]
 80068ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d0:	f893 105a 	ldrb.w	r1, [r3, #90]	@ 0x5a
 80068d4:	6803      	ldr	r3, [r0, #0]
 80068d6:	4798      	blx	r3
			protocol->hwInterface->send(HW_INTERFACE, X2C_GET_HIGH_BYTE(TableStruct->piScope->timestamp));
 80068d8:	6833      	ldr	r3, [r6, #0]
 80068da:	6960      	ldr	r0, [r4, #20]
 80068dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068de:	f8b3 105a 	ldrh.w	r1, [r3, #90]	@ 0x5a
 80068e2:	6803      	ldr	r3, [r0, #0]
 80068e4:	0a09      	lsrs	r1, r1, #8
 80068e6:	4798      	blx	r3
			checksum = crc8ccitt_init();
 80068e8:	f7ff fd42 	bl	8006370 <crc8ccitt_init>
			checksum = crc8ccitt_addValue(checksum, LNET_OSM_SYN);
 80068ec:	2102      	movs	r1, #2
 80068ee:	f7ff fd31 	bl	8006354 <crc8ccitt_addValue>
			checksum = crc8ccitt_addValue(checksum, protocol->node);
 80068f2:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 80068f6:	f7ff fd2d 	bl	8006354 <crc8ccitt_addValue>
			checksum = crc8ccitt_addValue(checksum, TableStruct->piScope->txFrameSize);
 80068fa:	6833      	ldr	r3, [r6, #0]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fe:	f893 105c 	ldrb.w	r1, [r3, #92]	@ 0x5c
 8006902:	f7ff fd27 	bl	8006354 <crc8ccitt_addValue>
			checksum = crc8ccitt_addValue(checksum, 0);
 8006906:	4639      	mov	r1, r7
 8006908:	f7ff fd24 	bl	8006354 <crc8ccitt_addValue>
			checksum = crc8ccitt_addValue(checksum, X2C_GET_LOW_BYTE(TableStruct->piScope->timestamp));
 800690c:	6833      	ldr	r3, [r6, #0]
 800690e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006910:	f893 105a 	ldrb.w	r1, [r3, #90]	@ 0x5a
 8006914:	f7ff fd1e 	bl	8006354 <crc8ccitt_addValue>
			checksum = crc8ccitt_addValue(checksum, X2C_GET_HIGH_BYTE(TableStruct->piScope->timestamp));
 8006918:	6833      	ldr	r3, [r6, #0]
 800691a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800691c:	f8b3 105a 	ldrh.w	r1, [r3, #90]	@ 0x5a
 8006920:	0a09      	lsrs	r1, r1, #8
 8006922:	f7ff fd17 	bl	8006354 <crc8ccitt_addValue>
                    tmp = *((uint8*) TableStruct->piScope->channelAddr[i] + j);
 8006926:	6832      	ldr	r2, [r6, #0]
			checksum = crc8ccitt_addValue(checksum, X2C_GET_HIGH_BYTE(TableStruct->piScope->timestamp));
 8006928:	4605      	mov	r5, r0
                    tmp = *((uint8*) TableStruct->piScope->channelAddr[i] + j);
 800692a:	f04f 0900 	mov.w	r9, #0
 800692e:	ea4f 0887 	mov.w	r8, r7, lsl #2
 8006932:	6a93      	ldr	r3, [r2, #40]	@ 0x28
                    protocol->hwInterface->send(HW_INTERFACE, tmp);
 8006934:	6960      	ldr	r0, [r4, #20]
                    tmp = *((uint8*) TableStruct->piScope->channelAddr[i] + j);
 8006936:	4443      	add	r3, r8
                    protocol->hwInterface->send(HW_INTERFACE, tmp);
 8006938:	6802      	ldr	r2, [r0, #0]
                    tmp = *((uint8*) TableStruct->piScope->channelAddr[i] + j);
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f813 a009 	ldrb.w	sl, [r3, r9]
                    protocol->hwInterface->send(HW_INTERFACE, tmp);
 8006940:	4651      	mov	r1, sl
 8006942:	4790      	blx	r2
                    checksum = crc8ccitt_addValue(checksum, tmp);
 8006944:	4651      	mov	r1, sl
 8006946:	4628      	mov	r0, r5
 8006948:	f7ff fd04 	bl	8006354 <crc8ccitt_addValue>
                while (j < TableStruct->piScope->dataSize[i]);
 800694c:	6832      	ldr	r2, [r6, #0]
 800694e:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8006950:	443b      	add	r3, r7
 8006952:	f109 0901 	add.w	r9, r9, #1
 8006956:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800695a:	fa1f f189 	uxth.w	r1, r9
 800695e:	428b      	cmp	r3, r1
                    checksum = crc8ccitt_addValue(checksum, tmp);
 8006960:	4605      	mov	r5, r0
                while (j < TableStruct->piScope->dataSize[i]);
 8006962:	d8e6      	bhi.n	8006932 <communicate+0x45a>
            while(i < TableStruct->piScope->noChannels);
 8006964:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8006966:	3701      	adds	r7, #1
 8006968:	f893 1055 	ldrb.w	r1, [r3, #85]	@ 0x55
 800696c:	b2bb      	uxth	r3, r7
 800696e:	4299      	cmp	r1, r3
 8006970:	d8db      	bhi.n	800692a <communicate+0x452>
			protocol->hwInterface->send(HW_INTERFACE, checksum);
 8006972:	6960      	ldr	r0, [r4, #20]
				checksum = ~checksum;
 8006974:	2d02      	cmp	r5, #2
			protocol->hwInterface->send(HW_INTERFACE, checksum);
 8006976:	bf18      	it	ne
 8006978:	4629      	movne	r1, r5
 800697a:	6803      	ldr	r3, [r0, #0]
}
 800697c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			protocol->hwInterface->send(HW_INTERFACE, checksum);
 8006980:	bf08      	it	eq
 8006982:	21fd      	moveq	r1, #253	@ 0xfd
 8006984:	4718      	bx	r3
	while ((protocol->commState == RECEIVE_ALLOWED) && protocol->hwInterface->isReceiveDataAvailable(HW_INTERFACE))
 8006986:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 800698a:	2b00      	cmp	r3, #0
 800698c:	f43f add0 	beq.w	8006530 <communicate+0x58>
 8006990:	e5f6      	b.n	8006580 <communicate+0xa8>
						sendError((tProtocol*)protocol, ERRORServiceNotAvail);
 8006992:	2121      	movs	r1, #33	@ 0x21
 8006994:	4620      	mov	r0, r4
 8006996:	f001 f91f 	bl	8007bd8 <sendError>
 800699a:	e69f      	b.n	80066dc <communicate+0x204>
			txBufFull++;
 800699c:	4a0a      	ldr	r2, [pc, #40]	@ (80069c8 <communicate+0x4f0>)
 800699e:	6813      	ldr	r3, [r2, #0]
 80069a0:	3301      	adds	r3, #1
 80069a2:	6013      	str	r3, [r2, #0]
}
 80069a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 80069a8:	4601      	mov	r1, r0
 80069aa:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80069ae:	f7ff fcd1 	bl	8006354 <crc8ccitt_addValue>
	if ((data == LNET_STD_SYN) || (data == LNET_OSM_SYN))
 80069b2:	2d55      	cmp	r5, #85	@ 0x55
	protocol->crc = crc8ccitt_addValue(protocol->crc, data);
 80069b4:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
		protocol->nextState = state;
 80069b8:	f04f 0302 	mov.w	r3, #2
	if ((data == LNET_STD_SYN) || (data == LNET_OSM_SYN))
 80069bc:	f47f aeec 	bne.w	8006798 <communicate+0x2c0>
 80069c0:	e6a8      	b.n	8006714 <communicate+0x23c>
				protocol->rxState = LNET_STATE_SYN;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e6ea      	b.n	800679c <communicate+0x2c4>
 80069c6:	bf00      	nop
 80069c8:	20000658 	.word	0x20000658

080069cc <updateRxTimeout>:
	if ((protocol->commState == RECEIVE_ALLOWED) && (protocol->rxState != LNET_STATE_SYN)) {
 80069cc:	f890 302b 	ldrb.w	r3, [r0, #43]	@ 0x2b
 80069d0:	b94b      	cbnz	r3, 80069e6 <updateRxTimeout+0x1a>
 80069d2:	f890 2029 	ldrb.w	r2, [r0, #41]	@ 0x29
 80069d6:	b132      	cbz	r2, 80069e6 <updateRxTimeout+0x1a>
		if (time > protocol->rxTimeoutCnt)
 80069d8:	8cc2      	ldrh	r2, [r0, #38]	@ 0x26
 80069da:	4291      	cmp	r1, r2
 80069dc:	d901      	bls.n	80069e2 <updateRxTimeout+0x16>
			protocol->rxTimeoutCnt = 0;
 80069de:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80069e0:	4770      	bx	lr
			protocol->rxTimeoutCnt -= time;
 80069e2:	1a52      	subs	r2, r2, r1
 80069e4:	84c2      	strh	r2, [r0, #38]	@ 0x26
}
 80069e6:	4770      	bx	lr

080069e8 <initLNet>:
{
 80069e8:	b410      	push	{r4}
	protocol->maxCommSize = dataBufferSize;
 80069ea:	8142      	strh	r2, [r0, #10]
	protocol->enableSend = (void (*)(tProtocol*))enableSend;
 80069ec:	4a0c      	ldr	r2, [pc, #48]	@ (8006a20 <initLNet+0x38>)
	protocol->communicate = (void (*)(tProtocol*))communicate;
 80069ee:	4c0d      	ldr	r4, [pc, #52]	@ (8006a24 <initLNet+0x3c>)
	protocol->frameData = dataBuffer;
 80069f0:	60c1      	str	r1, [r0, #12]
	protocol->enableSend = (void (*)(tProtocol*))enableSend;
 80069f2:	6042      	str	r2, [r0, #4]
	protocol->setupRxTimeout = setupRxTimeout;
 80069f4:	490c      	ldr	r1, [pc, #48]	@ (8006a28 <initLNet+0x40>)
	protocol->updateRxTimeout = updateRxTimeout;
 80069f6:	4a0d      	ldr	r2, [pc, #52]	@ (8006a2c <initLNet+0x44>)
	protocol->communicate = (void (*)(tProtocol*))communicate;
 80069f8:	6004      	str	r4, [r0, #0]
	protocol->commState = RECEIVE_ALLOWED;
 80069fa:	f04f 0c00 	mov.w	ip, #0
	protocol->rxTimeout = UINT16_MAX;
 80069fe:	f04f 34ff 	mov.w	r4, #4294967295
	protocol->node = node;
 8006a02:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
	protocol->resetRxTimeout = resetRxTimeout;
 8006a06:	4b0a      	ldr	r3, [pc, #40]	@ (8006a30 <initLNet+0x48>)
	protocol->rxTimeout = UINT16_MAX;
 8006a08:	6244      	str	r4, [r0, #36]	@ 0x24
	protocol->updateRxTimeout = updateRxTimeout;
 8006a0a:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 8006a0e:	f85d 4b04 	ldr.w	r4, [sp], #4
	protocol->resetRxTimeout = resetRxTimeout;
 8006a12:	6203      	str	r3, [r0, #32]
	protocol->commState = RECEIVE_ALLOWED;
 8006a14:	f880 c02b 	strb.w	ip, [r0, #43]	@ 0x2b
	protocol->rxState = LNET_STATE_SYN;
 8006a18:	f880 c029 	strb.w	ip, [r0, #41]	@ 0x29
}
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop
 8006a20:	080064c5 	.word	0x080064c5
 8006a24:	080064d9 	.word	0x080064d9
 8006a28:	080064cd 	.word	0x080064cd
 8006a2c:	080069cd 	.word	0x080069cd
 8006a30:	080064d1 	.word	0x080064d1

08006a34 <isTriggerEvent>:


/* this function will return 1, if the trigger was hit and */
/* 0, if the trigger was not hit */
static uint8 isTriggerEvent(SCOPE_MAIN *pTScope, uint64 curTrgValue)
{
 8006a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8 size = pTScope->trgDataType & (uint8)0x0F;
 8006a36:	f890 104c 	ldrb.w	r1, [r0, #76]	@ 0x4c
{
 8006a3a:	4614      	mov	r4, r2
	uint8 isFloat = pTScope->trgDataType & (uint8)0x40;
	uint8 isEvent = (uint8)0;
	if (isFloat)
 8006a3c:	064a      	lsls	r2, r1, #25
{
 8006a3e:	461d      	mov	r5, r3
 8006a40:	4684      	mov	ip, r0
	uint8 size = pTScope->trgDataType & (uint8)0x0F;
 8006a42:	f001 030f 	and.w	r3, r1, #15
	if (isFloat)
 8006a46:	d52a      	bpl.n	8006a9e <isTriggerEvent+0x6a>
	{
		switch (size)
 8006a48:	2b04      	cmp	r3, #4
 8006a4a:	d059      	beq.n	8006b00 <isTriggerEvent+0xcc>
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d124      	bne.n	8006a9a <isTriggerEvent+0x66>
				break;
			}
			case 8:
			{
				float64 trgLastValue = *(float64*)&pTScope->trgLastValue;
				float64 trgLevel = *(float64*)&pTScope->trgLevel;
 8006a50:	e9dc 670e 	ldrd	r6, r7, [ip, #56]	@ 0x38
				float64 curValue = *(float64*)&curTrgValue;
				if (pTScope->trgEdge == EDGE_RISING)
 8006a54:	f89c 3074 	ldrb.w	r3, [ip, #116]	@ 0x74
 8006a58:	2b01      	cmp	r3, #1
				float64 trgLastValue = *(float64*)&pTScope->trgLastValue;
 8006a5a:	e9d0 0110 	ldrd	r0, r1, [r0, #64]	@ 0x40
				{
					if ((trgLastValue < trgLevel) && (curValue >= trgLevel))
 8006a5e:	4632      	mov	r2, r6
 8006a60:	463b      	mov	r3, r7
				if (pTScope->trgEdge == EDGE_RISING)
 8006a62:	f000 80d9 	beq.w	8006c18 <isTriggerEvent+0x1e4>
						isEvent = (uint8)0;
					}
				}
				else
				{
					if ((trgLastValue > trgLevel) && (curValue <= trgLevel))
 8006a66:	f7f9 fcf9 	bl	800045c <__aeabi_dcmpgt>
 8006a6a:	b140      	cbz	r0, 8006a7e <isTriggerEvent+0x4a>
 8006a6c:	4622      	mov	r2, r4
 8006a6e:	462b      	mov	r3, r5
 8006a70:	4630      	mov	r0, r6
 8006a72:	4639      	mov	r1, r7
 8006a74:	f7f9 fce8 	bl	8000448 <__aeabi_dcmpge>
 8006a78:	3800      	subs	r0, #0
 8006a7a:	bf18      	it	ne
 8006a7c:	2001      	movne	r0, #1
				}
			}
		} /* isSigned */
	} /* isFloat */
	return (isEvent);
}
 8006a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if (pTScope->trgEdge == EDGE_RISING)
 8006a80:	f89c 2074 	ldrb.w	r2, [ip, #116]	@ 0x74
					int16 trgLastValue = (int16)pTScope->trgLastValue;
 8006a84:	f9bc 3040 	ldrsh.w	r3, [ip, #64]	@ 0x40
					int16 trgLevel = (int16)pTScope->trgLevel;
 8006a88:	f9bc 1038 	ldrsh.w	r1, [ip, #56]	@ 0x38
					if (pTScope->trgEdge == EDGE_RISING)
 8006a8c:	2a01      	cmp	r2, #1
					int16 curValue = (int16)curTrgValue;
 8006a8e:	b224      	sxth	r4, r4
					if (pTScope->trgEdge == EDGE_RISING)
 8006a90:	f000 809d 	beq.w	8006bce <isTriggerEvent+0x19a>
						if ((trgLastValue > trgLevel) && (curValue <= trgLevel))
 8006a94:	428b      	cmp	r3, r1
 8006a96:	f300 80da 	bgt.w	8006c4e <isTriggerEvent+0x21a>
 8006a9a:	2000      	movs	r0, #0
}
 8006a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (isSigned)
 8006a9e:	f011 0020 	ands.w	r0, r1, #32
			switch (size)
 8006aa2:	f103 33ff 	add.w	r3, r3, #4294967295
		if (isSigned)
 8006aa6:	d015      	beq.n	8006ad4 <isTriggerEvent+0xa0>
			switch (size)
 8006aa8:	2b07      	cmp	r3, #7
 8006aaa:	d8f6      	bhi.n	8006a9a <isTriggerEvent+0x66>
 8006aac:	a201      	add	r2, pc, #4	@ (adr r2, 8006ab4 <isTriggerEvent+0x80>)
 8006aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab2:	bf00      	nop
 8006ab4:	08006bbb 	.word	0x08006bbb
 8006ab8:	08006a81 	.word	0x08006a81
 8006abc:	08006a9b 	.word	0x08006a9b
 8006ac0:	08006b9b 	.word	0x08006b9b
 8006ac4:	08006a9b 	.word	0x08006a9b
 8006ac8:	08006a9b 	.word	0x08006a9b
 8006acc:	08006a9b 	.word	0x08006a9b
 8006ad0:	08006bf3 	.word	0x08006bf3
			switch (size)
 8006ad4:	2b07      	cmp	r3, #7
 8006ad6:	d8d2      	bhi.n	8006a7e <isTriggerEvent+0x4a>
 8006ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ae0 <isTriggerEvent+0xac>)
 8006ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ade:	bf00      	nop
 8006ae0:	08006bdf 	.word	0x08006bdf
 8006ae4:	08006b79 	.word	0x08006b79
 8006ae8:	08006a7f 	.word	0x08006a7f
 8006aec:	08006b5b 	.word	0x08006b5b
 8006af0:	08006a7f 	.word	0x08006a7f
 8006af4:	08006a7f 	.word	0x08006a7f
 8006af8:	08006a7f 	.word	0x08006a7f
 8006afc:	08006b31 	.word	0x08006b31
				if (pTScope->trgEdge == EDGE_RISING)
 8006b00:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
				float32 trgLastValue = *(float32*)&pTScope->trgLastValue;
 8006b04:	ed90 7a10 	vldr	s14, [r0, #64]	@ 0x40
				float32 trgLevel = *(float32*)&pTScope->trgLevel;
 8006b08:	edd0 7a0e 	vldr	s15, [r0, #56]	@ 0x38
				if (pTScope->trgEdge == EDGE_RISING)
 8006b0c:	2b01      	cmp	r3, #1
				float32 curValue = *(float32*)&curTrgValue;
 8006b0e:	ee06 4a90 	vmov	s13, r4
					if ((trgLastValue < trgLevel) && (curValue >= trgLevel))
 8006b12:	eeb4 7ae7 	vcmpe.f32	s14, s15
				if (pTScope->trgEdge == EDGE_RISING)
 8006b16:	f000 808e 	beq.w	8006c36 <isTriggerEvent+0x202>
					if ((trgLastValue > trgLevel) && (curValue <= trgLevel))
 8006b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b1e:	ddbc      	ble.n	8006a9a <isTriggerEvent+0x66>
 8006b20:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b28:	bfac      	ite	ge
 8006b2a:	2001      	movge	r0, #1
 8006b2c:	2000      	movlt	r0, #0
}
 8006b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if (pTScope->trgEdge == EDGE_RISING)
 8006b30:	f89c 7074 	ldrb.w	r7, [ip, #116]	@ 0x74
					uint64 trgLastValue = (uint64)pTScope->trgLastValue;
 8006b34:	f8dc 6040 	ldr.w	r6, [ip, #64]	@ 0x40
 8006b38:	f8dc 3044 	ldr.w	r3, [ip, #68]	@ 0x44
					if (pTScope->trgEdge == EDGE_RISING)
 8006b3c:	2f01      	cmp	r7, #1
					uint64 trgLevel = (uint64)pTScope->trgLevel;
 8006b3e:	e9dc 120e 	ldrd	r1, r2, [ip, #56]	@ 0x38
					if (pTScope->trgEdge == EDGE_RISING)
 8006b42:	f000 809c 	beq.w	8006c7e <isTriggerEvent+0x24a>
						if ((trgLastValue > trgLevel) && (curValue <= trgLevel))
 8006b46:	42b1      	cmp	r1, r6
 8006b48:	eb72 0303 	sbcs.w	r3, r2, r3
 8006b4c:	d297      	bcs.n	8006a7e <isTriggerEvent+0x4a>
 8006b4e:	42a1      	cmp	r1, r4
 8006b50:	41aa      	sbcs	r2, r5
 8006b52:	bf2c      	ite	cs
 8006b54:	2001      	movcs	r0, #1
 8006b56:	2000      	movcc	r0, #0
}
 8006b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if (pTScope->trgEdge == EDGE_RISING)
 8006b5a:	f89c 1074 	ldrb.w	r1, [ip, #116]	@ 0x74
					uint32 trgLastValue = (uint32)pTScope->trgLastValue;
 8006b5e:	f8dc 2040 	ldr.w	r2, [ip, #64]	@ 0x40
					uint32 trgLevel = (uint32)pTScope->trgLevel;
 8006b62:	f8dc 3038 	ldr.w	r3, [ip, #56]	@ 0x38
					if (pTScope->trgEdge == EDGE_RISING)
 8006b66:	2901      	cmp	r1, #1
 8006b68:	d00f      	beq.n	8006b8a <isTriggerEvent+0x156>
						if ((trgLastValue > trgLevel) && (curValue <= trgLevel))
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d987      	bls.n	8006a7e <isTriggerEvent+0x4a>
 8006b6e:	42a3      	cmp	r3, r4
 8006b70:	bf34      	ite	cc
 8006b72:	2000      	movcc	r0, #0
 8006b74:	2001      	movcs	r0, #1
}
 8006b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if (pTScope->trgEdge == EDGE_RISING)
 8006b78:	f89c 1074 	ldrb.w	r1, [ip, #116]	@ 0x74
					uint16 trgLastValue = (uint16)pTScope->trgLastValue;
 8006b7c:	f8bc 2040 	ldrh.w	r2, [ip, #64]	@ 0x40
					uint16 trgLevel = (uint16)pTScope->trgLevel;
 8006b80:	f8bc 3038 	ldrh.w	r3, [ip, #56]	@ 0x38
					if (pTScope->trgEdge == EDGE_RISING)
 8006b84:	2901      	cmp	r1, #1
					uint16 curValue = (uint16)curTrgValue;
 8006b86:	b2a4      	uxth	r4, r4
					if (pTScope->trgEdge == EDGE_RISING)
 8006b88:	d1ef      	bne.n	8006b6a <isTriggerEvent+0x136>
						if ((trgLastValue < trgLevel) && (curValue >= trgLevel))
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	f4bf af77 	bcs.w	8006a7e <isTriggerEvent+0x4a>
 8006b90:	42a3      	cmp	r3, r4
 8006b92:	bf8c      	ite	hi
 8006b94:	2000      	movhi	r0, #0
 8006b96:	2001      	movls	r0, #1
}
 8006b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if (pTScope->trgEdge == EDGE_RISING)
 8006b9a:	f89c 2074 	ldrb.w	r2, [ip, #116]	@ 0x74
					int32 trgLastValue = (int32)pTScope->trgLastValue;
 8006b9e:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
					int32 trgLevel = (int32)pTScope->trgLevel;
 8006ba2:	f8dc 0038 	ldr.w	r0, [ip, #56]	@ 0x38
					if (pTScope->trgEdge == EDGE_RISING)
 8006ba6:	2a01      	cmp	r2, #1
 8006ba8:	d061      	beq.n	8006c6e <isTriggerEvent+0x23a>
						if ((trgLastValue > trgLevel) && (curValue <= trgLevel))
 8006baa:	4283      	cmp	r3, r0
 8006bac:	f77f af75 	ble.w	8006a9a <isTriggerEvent+0x66>
 8006bb0:	42a0      	cmp	r0, r4
 8006bb2:	bfb4      	ite	lt
 8006bb4:	2000      	movlt	r0, #0
 8006bb6:	2001      	movge	r0, #1
}
 8006bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if (pTScope->trgEdge == EDGE_RISING)
 8006bba:	f89c 2074 	ldrb.w	r2, [ip, #116]	@ 0x74
					int8 trgLastValue = (int8)pTScope->trgLastValue;
 8006bbe:	f99c 3040 	ldrsb.w	r3, [ip, #64]	@ 0x40
					int8 trgLevel = (int8)pTScope->trgLevel;
 8006bc2:	f99c 1038 	ldrsb.w	r1, [ip, #56]	@ 0x38
					if (pTScope->trgEdge == EDGE_RISING)
 8006bc6:	2a01      	cmp	r2, #1
					int8 curValue = (int8)curTrgValue;
 8006bc8:	b264      	sxtb	r4, r4
					if (pTScope->trgEdge == EDGE_RISING)
 8006bca:	f47f af63 	bne.w	8006a94 <isTriggerEvent+0x60>
						if ((trgLastValue < trgLevel) && (curValue >= trgLevel))
 8006bce:	428b      	cmp	r3, r1
 8006bd0:	f6bf af63 	bge.w	8006a9a <isTriggerEvent+0x66>
 8006bd4:	42a1      	cmp	r1, r4
 8006bd6:	bfcc      	ite	gt
 8006bd8:	2000      	movgt	r0, #0
 8006bda:	2001      	movle	r0, #1
}
 8006bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if (pTScope->trgEdge == EDGE_RISING)
 8006bde:	f89c 1074 	ldrb.w	r1, [ip, #116]	@ 0x74
					uint8 trgLastValue = (uint8)pTScope->trgLastValue;
 8006be2:	f89c 2040 	ldrb.w	r2, [ip, #64]	@ 0x40
					uint8 trgLevel = (uint8)pTScope->trgLevel;
 8006be6:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
					if (pTScope->trgEdge == EDGE_RISING)
 8006bea:	2901      	cmp	r1, #1
					uint8 curValue = (uint8)curTrgValue;
 8006bec:	b2e4      	uxtb	r4, r4
					if (pTScope->trgEdge == EDGE_RISING)
 8006bee:	d1bc      	bne.n	8006b6a <isTriggerEvent+0x136>
 8006bf0:	e7cb      	b.n	8006b8a <isTriggerEvent+0x156>
					if (pTScope->trgEdge == EDGE_RISING)
 8006bf2:	f89c 6074 	ldrb.w	r6, [ip, #116]	@ 0x74
 8006bf6:	2e01      	cmp	r6, #1
					int64 trgLastValue = (int64)pTScope->trgLastValue;
 8006bf8:	e9dc 0310 	ldrd	r0, r3, [ip, #64]	@ 0x40
					int64 trgLevel = (int64)pTScope->trgLevel;
 8006bfc:	e9dc 120e 	ldrd	r1, r2, [ip, #56]	@ 0x38
					if (pTScope->trgEdge == EDGE_RISING)
 8006c00:	d02a      	beq.n	8006c58 <isTriggerEvent+0x224>
						if ((trgLastValue > trgLevel) && (curValue <= trgLevel))
 8006c02:	4281      	cmp	r1, r0
 8006c04:	eb72 0303 	sbcs.w	r3, r2, r3
 8006c08:	f6bf af47 	bge.w	8006a9a <isTriggerEvent+0x66>
 8006c0c:	42a1      	cmp	r1, r4
 8006c0e:	41aa      	sbcs	r2, r5
 8006c10:	bfac      	ite	ge
 8006c12:	2001      	movge	r0, #1
 8006c14:	2000      	movlt	r0, #0
}
 8006c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if ((trgLastValue < trgLevel) && (curValue >= trgLevel))
 8006c18:	f7f9 fc02 	bl	8000420 <__aeabi_dcmplt>
 8006c1c:	2800      	cmp	r0, #0
 8006c1e:	f43f af2e 	beq.w	8006a7e <isTriggerEvent+0x4a>
 8006c22:	4622      	mov	r2, r4
 8006c24:	462b      	mov	r3, r5
 8006c26:	4630      	mov	r0, r6
 8006c28:	4639      	mov	r1, r7
 8006c2a:	f7f9 fc03 	bl	8000434 <__aeabi_dcmple>
 8006c2e:	3800      	subs	r0, #0
 8006c30:	bf18      	it	ne
 8006c32:	2001      	movne	r0, #1
}
 8006c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if ((trgLastValue < trgLevel) && (curValue >= trgLevel))
 8006c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c3a:	f57f af2e 	bpl.w	8006a9a <isTriggerEvent+0x66>
 8006c3e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c46:	bf94      	ite	ls
 8006c48:	2001      	movls	r0, #1
 8006c4a:	2000      	movhi	r0, #0
}
 8006c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						if ((trgLastValue > trgLevel) && (curValue <= trgLevel))
 8006c4e:	42a1      	cmp	r1, r4
 8006c50:	bfb4      	ite	lt
 8006c52:	2000      	movlt	r0, #0
 8006c54:	2001      	movge	r0, #1
}
 8006c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						if ((trgLastValue < trgLevel) && (curValue >= trgLevel))
 8006c58:	4288      	cmp	r0, r1
 8006c5a:	4193      	sbcs	r3, r2
 8006c5c:	f6bf af1d 	bge.w	8006a9a <isTriggerEvent+0x66>
 8006c60:	428c      	cmp	r4, r1
 8006c62:	eb75 0202 	sbcs.w	r2, r5, r2
 8006c66:	bfac      	ite	ge
 8006c68:	2001      	movge	r0, #1
 8006c6a:	2000      	movlt	r0, #0
}
 8006c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						if ((trgLastValue < trgLevel) && (curValue >= trgLevel))
 8006c6e:	4283      	cmp	r3, r0
 8006c70:	f6bf af13 	bge.w	8006a9a <isTriggerEvent+0x66>
 8006c74:	42a0      	cmp	r0, r4
 8006c76:	bfcc      	ite	gt
 8006c78:	2000      	movgt	r0, #0
 8006c7a:	2001      	movle	r0, #1
}
 8006c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
						if ((trgLastValue < trgLevel) && (curValue >= trgLevel))
 8006c7e:	428e      	cmp	r6, r1
 8006c80:	4193      	sbcs	r3, r2
 8006c82:	f4bf aefc 	bcs.w	8006a7e <isTriggerEvent+0x4a>
 8006c86:	428c      	cmp	r4, r1
 8006c88:	eb75 0202 	sbcs.w	r2, r5, r2
 8006c8c:	bf2c      	ite	cs
 8006c8e:	2001      	movcs	r0, #1
 8006c90:	2000      	movcc	r0, #0
}
 8006c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c94 <getTriggerValue.isra.0>:
/* return current trigger value */
static uint64 getTriggerValue(SCOPE_MAIN *pTScope)
{
	uint64 trgValue;
	uint8 trgLevelSize = pTScope->trgDataType & (uint8)0x0F;
	switch (trgLevelSize)
 8006c94:	f001 010f 	and.w	r1, r1, #15
 8006c98:	3901      	subs	r1, #1
 8006c9a:	2907      	cmp	r1, #7
 8006c9c:	d805      	bhi.n	8006caa <getTriggerValue.isra.0+0x16>
 8006c9e:	e8df f001 	tbb	[pc, r1]
 8006ca2:	0d10      	.short	0x0d10
 8006ca4:	04040a04 	.word	0x04040a04
 8006ca8:	0704      	.short	0x0704
 8006caa:	2000      	movs	r0, #0
 8006cac:	4601      	mov	r1, r0
		/* unsupported size */
		trgValue = 0;
		break;
	}
	return (trgValue);
}
 8006cae:	4770      	bx	lr
		trgValue = *(uint64*)pTScope->trgAddr;
 8006cb0:	e9d0 0100 	ldrd	r0, r1, [r0]
		break;
 8006cb4:	4770      	bx	lr
		trgValue = *(uint32*)pTScope->trgAddr;
 8006cb6:	6800      	ldr	r0, [r0, #0]
 8006cb8:	2100      	movs	r1, #0
		break;
 8006cba:	4770      	bx	lr
		trgValue = *(uint16*)pTScope->trgAddr;
 8006cbc:	8800      	ldrh	r0, [r0, #0]
 8006cbe:	2100      	movs	r1, #0
		break;
 8006cc0:	4770      	bx	lr
		trgValue = *(uint8*)pTScope->trgAddr;
 8006cc2:	7800      	ldrb	r0, [r0, #0]
 8006cc4:	2100      	movs	r1, #0
		break;
 8006cc6:	4770      	bx	lr

08006cc8 <Scope_Main_Init>:
{
 8006cc8:	b538      	push	{r3, r4, r5, lr}
	pTScope->ID = SCOPE_MAIN_ID;
 8006cca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
{
 8006cce:	4604      	mov	r4, r0
		pTScope->channelAddr[i] = (void*)0;
 8006cd0:	2228      	movs	r2, #40	@ 0x28
	pTScope->ID = SCOPE_MAIN_ID;
 8006cd2:	f820 3b04 	strh.w	r3, [r0], #4
		pTScope->channelAddr[i] = (void*)0;
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	f001 fd10 	bl	80086fc <memset>
	pTScope->trgAddr = (void*)0;
 8006cdc:	2300      	movs	r3, #0
	TableStruct->piScope = pTScope;
 8006cde:	4a10      	ldr	r2, [pc, #64]	@ (8006d20 <Scope_Main_Init+0x58>)
	pTScope->trgDataType = (uint8)0;
 8006ce0:	f8a4 304c 	strh.w	r3, [r4, #76]	@ 0x4c
	pTScope->trgLevel = (int32)0;
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	2000      	movs	r0, #0
	pTScope->dataSizeTotal = (uint8)0;
 8006ce8:	e9c4 3314 	strd	r3, r3, [r4, #80]	@ 0x50
	pTScope->trgLevel = (int32)0;
 8006cec:	e9c4 010e 	strd	r0, r1, [r4, #56]	@ 0x38
	pTScope->trgLastValue = (int32)0;
 8006cf0:	e9c4 0110 	strd	r0, r1, [r4, #64]	@ 0x40
	TableStruct->piScope = pTScope;
 8006cf4:	6815      	ldr	r5, [r2, #0]
	pTScope->arrayAddr = (void*)ScopeArray;
 8006cf6:	4a0b      	ldr	r2, [pc, #44]	@ (8006d24 <Scope_Main_Init+0x5c>)
 8006cf8:	62e2      	str	r2, [r4, #44]	@ 0x2c
	pTScope->trgEdge = EDGE_RISING;
 8006cfa:	2101      	movs	r1, #1
	pTScope->maxUsedLength = SCOPE_SIZE;
 8006cfc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    pTScope->txFrameSize = (uint8)0;
 8006d00:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
	pTScope->trgCountReached = (uint8)0;
 8006d04:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
	pTScope->trgEdge = EDGE_RISING;
 8006d08:	f884 1074 	strb.w	r1, [r4, #116]	@ 0x74
	pTScope->trgEventPos = (int32)0;
 8006d0c:	e9c4 3318 	strd	r3, r3, [r4, #96]	@ 0x60
	pTScope->maxUsedLength = SCOPE_SIZE;
 8006d10:	e9c4 321b 	strd	r3, r2, [r4, #108]	@ 0x6c
	pTScope->trgAddr = (void*)0;
 8006d14:	64a3      	str	r3, [r4, #72]	@ 0x48
	pTScope->stf = (uint16)0;
 8006d16:	65a3      	str	r3, [r4, #88]	@ 0x58
	pTScope->arraySize = SCOPE_SIZE;
 8006d18:	6322      	str	r2, [r4, #48]	@ 0x30
	TableStruct->piScope = pTScope;
 8006d1a:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8006d1c:	bd38      	pop	{r3, r4, r5, pc}
 8006d1e:	bf00      	nop
 8006d20:	2000000c 	.word	0x2000000c
 8006d24:	20000660 	.word	0x20000660

08006d28 <Scope_Main_Update>:
{
 8006d28:	b570      	push	{r4, r5, r6, lr}
	switch (pTScope->state)
 8006d2a:	f890 604d 	ldrb.w	r6, [r0, #77]	@ 0x4d
 8006d2e:	1e73      	subs	r3, r6, #1
{
 8006d30:	4604      	mov	r4, r0
	switch (pTScope->state)
 8006d32:	2b07      	cmp	r3, #7
 8006d34:	d823      	bhi.n	8006d7e <Scope_Main_Update+0x56>
 8006d36:	e8df f003 	tbb	[pc, r3]
 8006d3a:	8f04      	.short	0x8f04
 8006d3c:	23239e22 	.word	0x23239e22
 8006d40:	7835      	.short	0x7835
			if (pTScope->stfCnt++ >= pTScope->stf)
 8006d42:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8006d46:	f8b0 2056 	ldrh.w	r2, [r0, #86]	@ 0x56
 8006d4a:	1c59      	adds	r1, r3, #1
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	f8a0 1058 	strh.w	r1, [r0, #88]	@ 0x58
 8006d52:	f240 809b 	bls.w	8006e8c <Scope_Main_Update+0x164>
 8006d56:	f890 104c 	ldrb.w	r1, [r0, #76]	@ 0x4c
 8006d5a:	6c80      	ldr	r0, [r0, #72]	@ 0x48
			curTrgValue = getTriggerValue(pTScope);
 8006d5c:	f7ff ff9a 	bl	8006c94 <getTriggerValue.isra.0>
 8006d60:	4606      	mov	r6, r0
			if (isTriggerEvent(pTScope, curTrgValue) && pTScope->trgCountReached)
 8006d62:	4602      	mov	r2, r0
 8006d64:	460b      	mov	r3, r1
 8006d66:	4620      	mov	r0, r4
			curTrgValue = getTriggerValue(pTScope);
 8006d68:	460d      	mov	r5, r1
			if (isTriggerEvent(pTScope, curTrgValue) && pTScope->trgCountReached)
 8006d6a:	f7ff fe63 	bl	8006a34 <isTriggerEvent>
 8006d6e:	b120      	cbz	r0, 8006d7a <Scope_Main_Update+0x52>
 8006d70:	f894 3068 	ldrb.w	r3, [r4, #104]	@ 0x68
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f040 80cf 	bne.w	8006f18 <Scope_Main_Update+0x1f0>
				pTScope->trgLastValue = curTrgValue;
 8006d7a:	e9c4 6510 	strd	r6, r5, [r4, #64]	@ 0x40
}
 8006d7e:	bd70      	pop	{r4, r5, r6, pc}
        	curTrgValue = getTriggerValue(pTScope);
 8006d80:	f890 104c 	ldrb.w	r1, [r0, #76]	@ 0x4c
 8006d84:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 8006d86:	f7ff ff85 	bl	8006c94 <getTriggerValue.isra.0>
 8006d8a:	4606      	mov	r6, r0
        	if (isTriggerEvent(pTScope, curTrgValue))
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4620      	mov	r0, r4
        	curTrgValue = getTriggerValue(pTScope);
 8006d92:	460d      	mov	r5, r1
        	if (isTriggerEvent(pTScope, curTrgValue))
 8006d94:	f7ff fe4e 	bl	8006a34 <isTriggerEvent>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d0ee      	beq.n	8006d7a <Scope_Main_Update+0x52>
        		pTScope->state = SCOPE_SAMPLE_ONLINE;
 8006d9c:	2304      	movs	r3, #4
 8006d9e:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
}
 8006da2:	bd70      	pop	{r4, r5, r6, pc}
            if (pTScope->stfCnt++ >= pTScope->stf)
 8006da4:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8006da8:	f8b0 2056 	ldrh.w	r2, [r0, #86]	@ 0x56
 8006dac:	1c59      	adds	r1, r3, #1
 8006dae:	429a      	cmp	r2, r3
 8006db0:	f8a0 1058 	strh.w	r1, [r0, #88]	@ 0x58
 8006db4:	d8e3      	bhi.n	8006d7e <Scope_Main_Update+0x56>
				if ((pTScope->offlinePtr + pTScope->dataSizeTotal) > SCOPE_SIZE)
 8006db6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006db8:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8006dbc:	441a      	add	r2, r3
                pTScope->stfCnt = (uint16)0;
 8006dbe:	2500      	movs	r5, #0
				if ((pTScope->offlinePtr + pTScope->dataSizeTotal) > SCOPE_SIZE)
 8006dc0:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
                pTScope->stfCnt = (uint16)0;
 8006dc4:	f8a0 5058 	strh.w	r5, [r0, #88]	@ 0x58
				if ((pTScope->offlinePtr + pTScope->dataSizeTotal) > SCOPE_SIZE)
 8006dc8:	bf88      	it	hi
 8006dca:	462b      	movhi	r3, r5
 8006dcc:	4686      	mov	lr, r0
 8006dce:	f100 0c23 	add.w	ip, r0, #35	@ 0x23
    {
    	j = 0;
        do
        {
        	*(ALIGNCASTPTR pTScope->arrayAddr + pTScope->offlinePtr++) = \
				*(ALIGNCASTPTR pTScope->channelAddr[i] + j);
 8006dd2:	f85e 2f04 	ldr.w	r2, [lr, #4]!
        	*(ALIGNCASTPTR pTScope->arrayAddr + pTScope->offlinePtr++) = \
 8006dd6:	1c59      	adds	r1, r3, #1
 8006dd8:	6521      	str	r1, [r4, #80]	@ 0x50
				*(ALIGNCASTPTR pTScope->channelAddr[i] + j);
 8006dda:	f992 1000 	ldrsb.w	r1, [r2]
        	*(ALIGNCASTPTR pTScope->arrayAddr + pTScope->offlinePtr++) = \
 8006dde:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006de0:	54d1      	strb	r1, [r2, r3]
            j++;
        }
        while (j < pTScope->dataSize[i]);
 8006de2:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d90e      	bls.n	8006e08 <Scope_Main_Update+0xe0>
            j++;
 8006dea:	2301      	movs	r3, #1
				if (((pTScope->trgEventPos - pTScope->offlinePtr) <= pTScope->trgDelay) || \
 8006dec:	6d22      	ldr	r2, [r4, #80]	@ 0x50
				*(ALIGNCASTPTR pTScope->channelAddr[i] + j);
 8006dee:	f8de 0000 	ldr.w	r0, [lr]
        	*(ALIGNCASTPTR pTScope->arrayAddr + pTScope->offlinePtr++) = \
 8006df2:	1c51      	adds	r1, r2, #1
 8006df4:	6521      	str	r1, [r4, #80]	@ 0x50
 8006df6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
				*(ALIGNCASTPTR pTScope->channelAddr[i] + j);
 8006df8:	56c0      	ldrsb	r0, [r0, r3]
        	*(ALIGNCASTPTR pTScope->arrayAddr + pTScope->offlinePtr++) = \
 8006dfa:	5488      	strb	r0, [r1, r2]
            j++;
 8006dfc:	3301      	adds	r3, #1
        while (j < pTScope->dataSize[i]);
 8006dfe:	f89c 2000 	ldrb.w	r2, [ip]
            j++;
 8006e02:	b2db      	uxtb	r3, r3
        while (j < pTScope->dataSize[i]);
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d8f1      	bhi.n	8006dec <Scope_Main_Update+0xc4>

        i++;
    }
    while(i < pTScope->noChannels);
 8006e08:	f894 2055 	ldrb.w	r2, [r4, #85]	@ 0x55
				if (((pTScope->trgEventPos - pTScope->offlinePtr) <= pTScope->trgDelay) || \
 8006e0c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        i++;
 8006e0e:	3501      	adds	r5, #1
 8006e10:	b2ed      	uxtb	r5, r5
    while(i < pTScope->noChannels);
 8006e12:	42aa      	cmp	r2, r5
 8006e14:	d8dd      	bhi.n	8006dd2 <Scope_Main_Update+0xaa>
				if (((pTScope->trgEventPos - pTScope->offlinePtr) <= pTScope->trgDelay) || \
 8006e16:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	428b      	cmp	r3, r1
 8006e1e:	f200 808c 	bhi.w	8006f3a <Scope_Main_Update+0x212>
					pTScope->state = SCOPE_IDLE;
 8006e22:	2300      	movs	r3, #0
 8006e24:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
}
 8006e28:	bd70      	pop	{r4, r5, r6, pc}
			if (pTScope->stfCnt++ >= pTScope->stf)
 8006e2a:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8006e2e:	f8b0 2056 	ldrh.w	r2, [r0, #86]	@ 0x56
 8006e32:	1c59      	adds	r1, r3, #1
 8006e34:	429a      	cmp	r2, r3
 8006e36:	f8a0 1058 	strh.w	r1, [r0, #88]	@ 0x58
 8006e3a:	d8a0      	bhi.n	8006d7e <Scope_Main_Update+0x56>
				pTScope->trgEventPos += pTScope->dataSizeTotal;
 8006e3c:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 8006e3e:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
				pTScope->stfCnt = (uint16)0;
 8006e42:	2200      	movs	r2, #0
				pTScope->trgEventPos += pTScope->dataSizeTotal;
 8006e44:	440b      	add	r3, r1
				if (pTScope->trgEventPos >= 0)
 8006e46:	4293      	cmp	r3, r2
				pTScope->stfCnt = (uint16)0;
 8006e48:	f8a0 2058 	strh.w	r2, [r0, #88]	@ 0x58
				pTScope->trgEventPos += pTScope->dataSizeTotal;
 8006e4c:	6643      	str	r3, [r0, #100]	@ 0x64
				if (pTScope->trgEventPos >= 0)
 8006e4e:	db96      	blt.n	8006d7e <Scope_Main_Update+0x56>
					pTScope->state = SCOPE_SAMPLE_OFFLINE;
 8006e50:	2302      	movs	r3, #2
 8006e52:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
}
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
            if (pTScope->stfCnt++ >= pTScope->stf)
 8006e58:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8006e5c:	f8b0 2056 	ldrh.w	r2, [r0, #86]	@ 0x56
 8006e60:	1c59      	adds	r1, r3, #1
 8006e62:	429a      	cmp	r2, r3
 8006e64:	f8a0 1058 	strh.w	r1, [r0, #88]	@ 0x58
 8006e68:	d96d      	bls.n	8006f46 <Scope_Main_Update+0x21e>
            pTScope->timestamp++;
 8006e6a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	@ 0x5a
 8006e6e:	3301      	adds	r3, #1
 8006e70:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
}
 8006e74:	bd70      	pop	{r4, r5, r6, pc}
			pTScope->timestamp++;
 8006e76:	f8b0 205a 	ldrh.w	r2, [r0, #90]	@ 0x5a
            pTScope->stfCnt++;
 8006e7a:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
			pTScope->timestamp++;
 8006e7e:	3201      	adds	r2, #1
            pTScope->stfCnt++;
 8006e80:	3301      	adds	r3, #1
			pTScope->timestamp++;
 8006e82:	f8a0 205a 	strh.w	r2, [r0, #90]	@ 0x5a
            pTScope->stfCnt++;
 8006e86:	f8a0 3058 	strh.w	r3, [r0, #88]	@ 0x58
}
 8006e8a:	bd70      	pop	{r4, r5, r6, pc}
				if (pTScope->offlinePtr + pTScope->dataSizeTotal > SCOPE_SIZE)
 8006e8c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006e8e:	f890 2054 	ldrb.w	r2, [r0, #84]	@ 0x54
 8006e92:	441a      	add	r2, r3
				pTScope->stfCnt = (uint16)0;
 8006e94:	2500      	movs	r5, #0
				if (pTScope->offlinePtr + pTScope->dataSizeTotal > SCOPE_SIZE)
 8006e96:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
				pTScope->stfCnt = (uint16)0;
 8006e9a:	f8a0 5058 	strh.w	r5, [r0, #88]	@ 0x58
				if (pTScope->offlinePtr + pTScope->dataSizeTotal > SCOPE_SIZE)
 8006e9e:	bf88      	it	hi
 8006ea0:	462b      	movhi	r3, r5
 8006ea2:	4686      	mov	lr, r0
 8006ea4:	f100 0c23 	add.w	ip, r0, #35	@ 0x23
							*(ALIGNCASTPTR pTScope->channelAddr[i] + j);
 8006ea8:	f85e 2f04 	ldr.w	r2, [lr, #4]!
						*(ALIGNCASTPTR pTScope->arrayAddr + pTScope->offlinePtr++) = \
 8006eac:	1c59      	adds	r1, r3, #1
 8006eae:	6521      	str	r1, [r4, #80]	@ 0x50
							*(ALIGNCASTPTR pTScope->channelAddr[i] + j);
 8006eb0:	f992 1000 	ldrsb.w	r1, [r2]
						*(ALIGNCASTPTR pTScope->arrayAddr + pTScope->offlinePtr++) = \
 8006eb4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006eb6:	54d1      	strb	r1, [r2, r3]
					while (j < pTScope->dataSize[i]);
 8006eb8:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d90e      	bls.n	8006ede <Scope_Main_Update+0x1b6>
						j++;
 8006ec0:	4633      	mov	r3, r6
				if (pTScope->offlinePtr >= pTScope->trgCount)
 8006ec2:	6d22      	ldr	r2, [r4, #80]	@ 0x50
							*(ALIGNCASTPTR pTScope->channelAddr[i] + j);
 8006ec4:	f8de 0000 	ldr.w	r0, [lr]
						*(ALIGNCASTPTR pTScope->arrayAddr + pTScope->offlinePtr++) = \
 8006ec8:	1c51      	adds	r1, r2, #1
 8006eca:	6521      	str	r1, [r4, #80]	@ 0x50
 8006ecc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
							*(ALIGNCASTPTR pTScope->channelAddr[i] + j);
 8006ece:	56c0      	ldrsb	r0, [r0, r3]
						*(ALIGNCASTPTR pTScope->arrayAddr + pTScope->offlinePtr++) = \
 8006ed0:	5488      	strb	r0, [r1, r2]
						j++;
 8006ed2:	3301      	adds	r3, #1
					while (j < pTScope->dataSize[i]);
 8006ed4:	f89c 2000 	ldrb.w	r2, [ip]
						j++;
 8006ed8:	b2db      	uxtb	r3, r3
					while (j < pTScope->dataSize[i]);
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d8f1      	bhi.n	8006ec2 <Scope_Main_Update+0x19a>
				while(i < pTScope->noChannels);
 8006ede:	f894 2055 	ldrb.w	r2, [r4, #85]	@ 0x55
				if (pTScope->offlinePtr >= pTScope->trgCount)
 8006ee2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
					i++;
 8006ee4:	3501      	adds	r5, #1
 8006ee6:	b2ed      	uxtb	r5, r5
				while(i < pTScope->noChannels);
 8006ee8:	42aa      	cmp	r2, r5
 8006eea:	d8dd      	bhi.n	8006ea8 <Scope_Main_Update+0x180>
				if (pTScope->offlinePtr >= pTScope->trgCount)
 8006eec:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8006eee:	f894 104c 	ldrb.w	r1, [r4, #76]	@ 0x4c
 8006ef2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	f63f af31 	bhi.w	8006d5c <Scope_Main_Update+0x34>
					pTScope->trgCountReached = 1;
 8006efa:	2301      	movs	r3, #1
 8006efc:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
			curTrgValue = getTriggerValue(pTScope);
 8006f00:	f7ff fec8 	bl	8006c94 <getTriggerValue.isra.0>
 8006f04:	4606      	mov	r6, r0
			if (isTriggerEvent(pTScope, curTrgValue) && pTScope->trgCountReached)
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4620      	mov	r0, r4
			curTrgValue = getTriggerValue(pTScope);
 8006f0c:	460d      	mov	r5, r1
			if (isTriggerEvent(pTScope, curTrgValue) && pTScope->trgCountReached)
 8006f0e:	f7ff fd91 	bl	8006a34 <isTriggerEvent>
 8006f12:	2800      	cmp	r0, #0
 8006f14:	f43f af31 	beq.w	8006d7a <Scope_Main_Update+0x52>
				if (pTScope->trgDelay < (int32)0)
 8006f18:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	db3e      	blt.n	8006f9c <Scope_Main_Update+0x274>
					if (pTScope->offlinePtr > 0)
 8006f1e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d042      	beq.n	8006faa <Scope_Main_Update+0x282>
						if (pTScope->stfCnt != 0)
 8006f24:	f8b4 2058 	ldrh.w	r2, [r4, #88]	@ 0x58
 8006f28:	b912      	cbnz	r2, 8006f30 <Scope_Main_Update+0x208>
							pTScope->trgEventPos = pTScope->offlinePtr - pTScope->dataSizeTotal;
 8006f2a:	f894 2054 	ldrb.w	r2, [r4, #84]	@ 0x54
 8006f2e:	1a9b      	subs	r3, r3, r2
					pTScope->state = SCOPE_TRG_SAMPLE_OFFLINE;
 8006f30:	2207      	movs	r2, #7
 8006f32:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
							pTScope->trgEventPos = pTScope->offlinePtr - pTScope->dataSizeTotal;
 8006f36:	6663      	str	r3, [r4, #100]	@ 0x64
}
 8006f38:	bd70      	pop	{r4, r5, r6, pc}
					((pTScope->trgEventPos - pTScope->offlinePtr + pTScope->maxUsedLength) <= pTScope->trgDelay))
 8006f3a:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8006f3c:	4413      	add	r3, r2
				if (((pTScope->trgEventPos - pTScope->offlinePtr) <= pTScope->trgDelay) || \
 8006f3e:	4299      	cmp	r1, r3
 8006f40:	f4ff af1d 	bcc.w	8006d7e <Scope_Main_Update+0x56>
 8006f44:	e76d      	b.n	8006e22 <Scope_Main_Update+0xfa>
                pTScope->stfCnt = (uint16)0;
 8006f46:	2500      	movs	r5, #0
 8006f48:	f8a0 5058 	strh.w	r5, [r0, #88]	@ 0x58
	i = 0;
 8006f4c:	f100 0e04 	add.w	lr, r0, #4
 8006f50:	f100 0c24 	add.w	ip, r0, #36	@ 0x24
                pTScope->stfCnt = (uint16)0;
 8006f54:	2300      	movs	r3, #0
        	*(ALIGNCASTPTR pTScope->arrayAddr + pTScope->offlinePtr++) = \
 8006f56:	6d22      	ldr	r2, [r4, #80]	@ 0x50
				*(ALIGNCASTPTR pTScope->channelAddr[i] + j);
 8006f58:	f8de 0000 	ldr.w	r0, [lr]
        	*(ALIGNCASTPTR pTScope->arrayAddr + pTScope->offlinePtr++) = \
 8006f5c:	1c51      	adds	r1, r2, #1
 8006f5e:	6521      	str	r1, [r4, #80]	@ 0x50
 8006f60:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
				*(ALIGNCASTPTR pTScope->channelAddr[i] + j);
 8006f62:	56c0      	ldrsb	r0, [r0, r3]
        	*(ALIGNCASTPTR pTScope->arrayAddr + pTScope->offlinePtr++) = \
 8006f64:	5488      	strb	r0, [r1, r2]
        while (j < pTScope->dataSize[i]);
 8006f66:	3301      	adds	r3, #1
 8006f68:	f89c 1000 	ldrb.w	r1, [ip]
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	4291      	cmp	r1, r2
 8006f70:	d8f1      	bhi.n	8006f56 <Scope_Main_Update+0x22e>
    while(i < pTScope->noChannels);
 8006f72:	f894 2055 	ldrb.w	r2, [r4, #85]	@ 0x55
 8006f76:	3501      	adds	r5, #1
 8006f78:	b2eb      	uxtb	r3, r5
 8006f7a:	429a      	cmp	r2, r3
 8006f7c:	f10e 0e04 	add.w	lr, lr, #4
 8006f80:	f10c 0c01 	add.w	ip, ip, #1
 8006f84:	d8e6      	bhi.n	8006f54 <Scope_Main_Update+0x22c>
                if ((pTScope->offlinePtr + pTScope->dataSizeTotal) > SCOPE_SIZE)
 8006f86:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8006f8a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
                    pTScope->state = SCOPE_IDLE;
 8006f92:	bf84      	itt	hi
 8006f94:	2300      	movhi	r3, #0
 8006f96:	f884 304d 	strbhi.w	r3, [r4, #77]	@ 0x4d
 8006f9a:	e766      	b.n	8006e6a <Scope_Main_Update+0x142>
					pTScope->state = SCOPE_WAIT_TRG_NEG_DELAY;
 8006f9c:	2208      	movs	r2, #8
					pTScope->offlinePtr = (uint32)0;
 8006f9e:	2100      	movs	r1, #0
					pTScope->state = SCOPE_WAIT_TRG_NEG_DELAY;
 8006fa0:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
					pTScope->trgEventPos = pTScope->trgDelay;
 8006fa4:	6663      	str	r3, [r4, #100]	@ 0x64
					pTScope->offlinePtr = (uint32)0;
 8006fa6:	6521      	str	r1, [r4, #80]	@ 0x50
}
 8006fa8:	bd70      	pop	{r4, r5, r6, pc}
						pTScope->trgEventPos = pTScope->maxUsedLength - pTScope->dataSizeTotal;
 8006faa:	f894 2054 	ldrb.w	r2, [r4, #84]	@ 0x54
 8006fae:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8006fb0:	1a9b      	subs	r3, r3, r2
 8006fb2:	e7bd      	b.n	8006f30 <Scope_Main_Update+0x208>

08006fb4 <Scope_Main_Load>:
	if ((uint16)29 > maxSize)
 8006fb4:	2b1c      	cmp	r3, #28
 8006fb6:	d954      	bls.n	8007062 <Scope_Main_Load+0xae>
		data[0] = pTScope->state;
 8006fb8:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8006fbc:	700b      	strb	r3, [r1, #0]
		data[1] = pTScope->noChannels;
 8006fbe:	f890 3055 	ldrb.w	r3, [r0, #85]	@ 0x55
 8006fc2:	704b      	strb	r3, [r1, #1]
		data[2] = (uint8)(pTScope->stf & 0xFF);
 8006fc4:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
 8006fc8:	708b      	strb	r3, [r1, #2]
		data[3] = (uint8)((pTScope->stf >> 8) & 0xFF);
 8006fca:	f8b0 3056 	ldrh.w	r3, [r0, #86]	@ 0x56
 8006fce:	0a1b      	lsrs	r3, r3, #8
 8006fd0:	70cb      	strb	r3, [r1, #3]
		data[4] = (uint8)(pTScope->offlinePtr & 0xFF);
 8006fd2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006fd4:	710b      	strb	r3, [r1, #4]
		data[5] = (uint8)((pTScope->offlinePtr >> 8) & 0xFF);
 8006fd6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006fd8:	0a1b      	lsrs	r3, r3, #8
 8006fda:	714b      	strb	r3, [r1, #5]
		data[6] = (uint8)((pTScope->offlinePtr >> 16) & 0xFF);
 8006fdc:	f8b0 3052 	ldrh.w	r3, [r0, #82]	@ 0x52
 8006fe0:	718b      	strb	r3, [r1, #6]
		data[7] = (uint8)((pTScope->offlinePtr >> 24) & 0xFF);
 8006fe2:	f890 3053 	ldrb.w	r3, [r0, #83]	@ 0x53
 8006fe6:	71cb      	strb	r3, [r1, #7]
		data[8] = (uint8)((uint32)pTScope->arrayAddr & 0xFF);
 8006fe8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8006fea:	720b      	strb	r3, [r1, #8]
		data[9] = (uint8)(((uint32)pTScope->arrayAddr >> 8) & 0xFF);
 8006fec:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8006fee:	0a1b      	lsrs	r3, r3, #8
 8006ff0:	724b      	strb	r3, [r1, #9]
		data[10] = (uint8)(((uint32)pTScope->arrayAddr >> 16) & 0xFF);
 8006ff2:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8006ff4:	728b      	strb	r3, [r1, #10]
		data[11] = (uint8)(((uint32)pTScope->arrayAddr >> 24) & 0xFF);
 8006ff6:	f890 302f 	ldrb.w	r3, [r0, #47]	@ 0x2f
 8006ffa:	72cb      	strb	r3, [r1, #11]
		data[12] = (uint8)(pTScope->trgDelay & 0xFF);
 8006ffc:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8006ffe:	730b      	strb	r3, [r1, #12]
		data[13] = (uint8)((pTScope->trgDelay >> 8) & 0xFF);
 8007000:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007002:	121b      	asrs	r3, r3, #8
 8007004:	734b      	strb	r3, [r1, #13]
		data[14] = (uint8)((pTScope->trgDelay >> 16) & 0xFF);
 8007006:	f9b0 3062 	ldrsh.w	r3, [r0, #98]	@ 0x62
 800700a:	738b      	strb	r3, [r1, #14]
		data[15] = (uint8)((pTScope->trgDelay >> 24) & 0xFF);
 800700c:	f990 3063 	ldrsb.w	r3, [r0, #99]	@ 0x63
 8007010:	73cb      	strb	r3, [r1, #15]
		data[16] = (uint8)(pTScope->trgEventPos & 0xFF);
 8007012:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8007014:	740b      	strb	r3, [r1, #16]
		data[17] = (uint8)((pTScope->trgEventPos >> 8) & 0xFF);
 8007016:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8007018:	121b      	asrs	r3, r3, #8
 800701a:	744b      	strb	r3, [r1, #17]
		data[18] = (uint8)((pTScope->trgEventPos >> 16) & 0xFF);
 800701c:	f9b0 3066 	ldrsh.w	r3, [r0, #102]	@ 0x66
 8007020:	748b      	strb	r3, [r1, #18]
		data[19] = (uint8)((pTScope->trgEventPos >> 24) & 0xFF);
 8007022:	f990 3067 	ldrsb.w	r3, [r0, #103]	@ 0x67
 8007026:	74cb      	strb	r3, [r1, #19]
		data[20] = (uint8)(pTScope->maxUsedLength & 0xFF);
 8007028:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800702a:	750b      	strb	r3, [r1, #20]
		data[21] = (uint8)((pTScope->maxUsedLength >> 8) & 0xFF);
 800702c:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 800702e:	0a1b      	lsrs	r3, r3, #8
 8007030:	754b      	strb	r3, [r1, #21]
		data[22] = (uint8)((pTScope->maxUsedLength >> 16) & 0xFF);
 8007032:	f8b0 3072 	ldrh.w	r3, [r0, #114]	@ 0x72
 8007036:	758b      	strb	r3, [r1, #22]
		data[23] = (uint8)((pTScope->maxUsedLength >> 24) & 0xFF);
 8007038:	f890 3073 	ldrb.w	r3, [r0, #115]	@ 0x73
 800703c:	75cb      	strb	r3, [r1, #23]
		data[24] = (uint8)(pTScope->arraySize & 0xFF);
 800703e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007040:	760b      	strb	r3, [r1, #24]
		data[25] = (uint8)((pTScope->arraySize >> 8) & 0xFF);
 8007042:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8007044:	0a1b      	lsrs	r3, r3, #8
 8007046:	764b      	strb	r3, [r1, #25]
		data[26] = (uint8)((pTScope->arraySize >> 16) & 0xFF);
 8007048:	8e43      	ldrh	r3, [r0, #50]	@ 0x32
 800704a:	768b      	strb	r3, [r1, #26]
		data[27] = (uint8)((pTScope->arraySize >> 24) & 0xFF);
 800704c:	f890 0033 	ldrb.w	r0, [r0, #51]	@ 0x33
 8007050:	76c8      	strb	r0, [r1, #27]
		data[28] = (uint8)0x80 + SCOPE_VERSION;
 8007052:	f04f 0c83 	mov.w	ip, #131	@ 0x83
		*dataLength = (uint16)29;
 8007056:	231d      	movs	r3, #29
		data[28] = (uint8)0x80 + SCOPE_VERSION;
 8007058:	f881 c01c 	strb.w	ip, [r1, #28]
	uint8 error = (uint8)0;
 800705c:	2000      	movs	r0, #0
		*dataLength = (uint16)29;
 800705e:	8013      	strh	r3, [r2, #0]
 8007060:	4770      	bx	lr
		error = (uint8)1;
 8007062:	2001      	movs	r0, #1
}
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop

08007068 <Scope_Main_Save>:
   if (ucFRMlen < offset)
 8007068:	2a03      	cmp	r2, #3
 800706a:	f240 8212 	bls.w	8007492 <Scope_Main_Save+0x42a>
{
 800706e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
       if (data[1] > MAX_SCOPE_CHANNELS)
 8007072:	784b      	ldrb	r3, [r1, #1]
 8007074:	3b01      	subs	r3, #1
 8007076:	2b07      	cmp	r3, #7
{
 8007078:	b085      	sub	sp, #20
 800707a:	460f      	mov	r7, r1
       if (data[1] > MAX_SCOPE_CHANNELS)
 800707c:	f200 80c1 	bhi.w	8007202 <Scope_Main_Save+0x19a>
	   pTScope->state = SCOPE_IDLE;
 8007080:	2600      	movs	r6, #0
 8007082:	f880 604d 	strb.w	r6, [r0, #77]	@ 0x4d
	   pTScope->noChannels = (uint8)0;
 8007086:	f880 6055 	strb.w	r6, [r0, #85]	@ 0x55
       pTScope->timestamp = (uint16)0;
 800708a:	f8a0 605a 	strh.w	r6, [r0, #90]	@ 0x5a
       pTScope->offlinePtr = (uint32)0;
 800708e:	6506      	str	r6, [r0, #80]	@ 0x50
       pTScope->stf = (uint16)data[2] + ((uint16)data[3] << 8);
 8007090:	4690      	mov	r8, r2
 8007092:	884a      	ldrh	r2, [r1, #2]
       pTScope->dataSizeTotal = (uint8)0;
 8007094:	f880 6054 	strb.w	r6, [r0, #84]	@ 0x54
       pTScope->stf = (uint16)data[2] + ((uint16)data[3] << 8);
 8007098:	4633      	mov	r3, r6
 800709a:	f362 030f 	bfi	r3, r2, #0, #16
 800709e:	f362 431f 	bfi	r3, r2, #16, #16
 80070a2:	f8c0 3056 	str.w	r3, [r0, #86]	@ 0x56
       pTScope->trgLastValue = (int32)0;
 80070a6:	2200      	movs	r2, #0
 80070a8:	2300      	movs	r3, #0
 80070aa:	e9c0 2310 	strd	r2, r3, [r0, #64]	@ 0x40
       pTScope->txFrameSize = (uint8)2;
 80070ae:	2302      	movs	r3, #2
	   pTScope->trgCountReached = (uint8)0;
 80070b0:	f880 6068 	strb.w	r6, [r0, #104]	@ 0x68
	   pTScope->trgEventPos = (int32)0;
 80070b4:	6646      	str	r6, [r0, #100]	@ 0x64
       pTScope->txFrameSize = (uint8)2;
 80070b6:	f880 305c 	strb.w	r3, [r0, #92]	@ 0x5c
       while (i < data[1])
 80070ba:	784b      	ldrb	r3, [r1, #1]
 80070bc:	4604      	mov	r4, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	f000 81df 	beq.w	8007482 <Scope_Main_Save+0x41a>
 80070c4:	460d      	mov	r5, r1
 80070c6:	f100 0904 	add.w	r9, r0, #4
 80070ca:	f04f 0b05 	mov.w	fp, #5
 80070ce:	f8cd 8004 	str.w	r8, [sp, #4]
    	   switch (sourceType)
 80070d2:	792b      	ldrb	r3, [r5, #4]
 80070d4:	2b03      	cmp	r3, #3
 80070d6:	f200 8094 	bhi.w	8007202 <Scope_Main_Save+0x19a>
 80070da:	e8df f003 	tbb	[pc, r3]
 80070de:	5b96      	.short	0x5b96
 80070e0:	0240      	.short	0x0240
				   uint8 error = getIoParamIndex(TableStruct->outportParamTable, paramId, &tblIndex);
 80070e2:	f8df a3b4 	ldr.w	sl, [pc, #948]	@ 8007498 <Scope_Main_Save+0x430>
				   uint16 paramId = (uint16)data[ptr + 2] + ((uint16)data[ptr + 3] << 8);
 80070e6:	7a2b      	ldrb	r3, [r5, #8]
 80070e8:	79e9      	ldrb	r1, [r5, #7]
				   uint8 error = getIoParamIndex(TableStruct->outportParamTable, paramId, &tblIndex);
 80070ea:	f8da 2000 	ldr.w	r2, [sl]
				   uint16 paramId = (uint16)data[ptr + 2] + ((uint16)data[ptr + 3] << 8);
 80070ee:	eb01 2103 	add.w	r1, r1, r3, lsl #8
				   uint8 error = getIoParamIndex(TableStruct->outportParamTable, paramId, &tblIndex);
 80070f2:	6b50      	ldr	r0, [r2, #52]	@ 0x34
 80070f4:	b289      	uxth	r1, r1
 80070f6:	f10d 020e 	add.w	r2, sp, #14
 80070fa:	f7ff f94f 	bl	800639c <getIoParamIndex>
				   if (error != ERROR_SUCCESS)
 80070fe:	2800      	cmp	r0, #0
 8007100:	d17f      	bne.n	8007202 <Scope_Main_Save+0x19a>
				   pTScope->channelAddr[i] = *(void**)TableStruct->outportParamTable[tblIndex].data;
 8007102:	f8da 3000 	ldr.w	r3, [sl]
 8007106:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800710a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800710c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f8c9 3000 	str.w	r3, [r9]
          pTScope->dataSize[i] = (uint16)data[ptr + 4];
 8007118:	19a3      	adds	r3, r4, r6
 800711a:	7a6a      	ldrb	r2, [r5, #9]
 800711c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          pTScope->dataSizeTotal += pTScope->dataSize[i];
 8007120:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
          pTScope->txFrameSize += (pTScope->dataSize[i]);
 8007124:	f894 105c 	ldrb.w	r1, [r4, #92]	@ 0x5c
          pTScope->dataSizeTotal += pTScope->dataSize[i];
 8007128:	4413      	add	r3, r2
 800712a:	b2db      	uxtb	r3, r3
          pTScope->txFrameSize += (pTScope->dataSize[i]);
 800712c:	440a      	add	r2, r1
          pTScope->dataSizeTotal += pTScope->dataSize[i];
 800712e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
          pTScope->txFrameSize += (pTScope->dataSize[i]);
 8007132:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
        		  (SCOPE_SIZE % pTScope->dataSizeTotal);
 8007136:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800713a:	fbb2 f2f3 	udiv	r2, r2, r3
          pTScope->maxUsedLength = SCOPE_SIZE - \
 800713e:	fb02 f303 	mul.w	r3, r2, r3
 8007142:	6723      	str	r3, [r4, #112]	@ 0x70
       while (i < data[1])
 8007144:	787a      	ldrb	r2, [r7, #1]
 8007146:	3601      	adds	r6, #1
 8007148:	b2f3      	uxtb	r3, r6
 800714a:	429a      	cmp	r2, r3
 800714c:	f109 0904 	add.w	r9, r9, #4
 8007150:	f105 0506 	add.w	r5, r5, #6
 8007154:	f10b 0106 	add.w	r1, fp, #6
 8007158:	d964      	bls.n	8007224 <Scope_Main_Save+0x1bc>
 800715a:	468b      	mov	fp, r1
 800715c:	e7b9      	b.n	80070d2 <Scope_Main_Save+0x6a>
				   uint8 error = getIoParamIndex(TableStruct->inportParamTable, paramId, &tblIndex);
 800715e:	f8df a338 	ldr.w	sl, [pc, #824]	@ 8007498 <Scope_Main_Save+0x430>
				   uint16 paramId = (uint16)data[ptr + 2] + ((uint16)data[ptr + 3] << 8);
 8007162:	7a2b      	ldrb	r3, [r5, #8]
 8007164:	79e9      	ldrb	r1, [r5, #7]
				   uint8 error = getIoParamIndex(TableStruct->inportParamTable, paramId, &tblIndex);
 8007166:	f8da 2000 	ldr.w	r2, [sl]
				   uint16 paramId = (uint16)data[ptr + 2] + ((uint16)data[ptr + 3] << 8);
 800716a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
				   uint8 error = getIoParamIndex(TableStruct->inportParamTable, paramId, &tblIndex);
 800716e:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8007170:	b289      	uxth	r1, r1
 8007172:	f10d 020e 	add.w	r2, sp, #14
 8007176:	f7ff f911 	bl	800639c <getIoParamIndex>
				   if (error != ERROR_SUCCESS)
 800717a:	2800      	cmp	r0, #0
 800717c:	d141      	bne.n	8007202 <Scope_Main_Save+0x19a>
				   pTScope->channelAddr[i] = TableStruct->inportParamTable[tblIndex].data;
 800717e:	f8da 3000 	ldr.w	r3, [sl]
 8007182:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8007186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007188:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f8c9 3000 	str.w	r3, [r9]
				   break;
 8007192:	e7c1      	b.n	8007118 <Scope_Main_Save+0xb0>
				   uint8 error = getBlockParamIndex(TableStruct->TParamTable, paramId, &tblIndex);
 8007194:	f8df a300 	ldr.w	sl, [pc, #768]	@ 8007498 <Scope_Main_Save+0x430>
				   uint16 paramId = (uint16)data[ptr + 2] + ((uint16)data[ptr + 3] << 8);
 8007198:	7a2b      	ldrb	r3, [r5, #8]
				   uint8 error = getBlockParamIndex(TableStruct->TParamTable, paramId, &tblIndex);
 800719a:	f8da 2000 	ldr.w	r2, [sl]
				   uint16 paramId = (uint16)data[ptr + 2] + ((uint16)data[ptr + 3] << 8);
 800719e:	79e9      	ldrb	r1, [r5, #7]
				   uint8 error = getBlockParamIndex(TableStruct->TParamTable, paramId, &tblIndex);
 80071a0:	6810      	ldr	r0, [r2, #0]
				   uint16 elementId = (uint16)data[ptr] + ((uint16)data[ptr + 1] << 8);
 80071a2:	79aa      	ldrb	r2, [r5, #6]
				   uint16 paramId = (uint16)data[ptr + 2] + ((uint16)data[ptr + 3] << 8);
 80071a4:	eb01 2103 	add.w	r1, r1, r3, lsl #8
				   uint16 elementId = (uint16)data[ptr] + ((uint16)data[ptr + 1] << 8);
 80071a8:	796b      	ldrb	r3, [r5, #5]
 80071aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80071ae:	b29b      	uxth	r3, r3
				   uint8 error = getBlockParamIndex(TableStruct->TParamTable, paramId, &tblIndex);
 80071b0:	b289      	uxth	r1, r1
 80071b2:	f10d 020e 	add.w	r2, sp, #14
				   uint16 elementId = (uint16)data[ptr] + ((uint16)data[ptr + 1] << 8);
 80071b6:	9300      	str	r3, [sp, #0]
				   uint8 error = getBlockParamIndex(TableStruct->TParamTable, paramId, &tblIndex);
 80071b8:	f7ff f914 	bl	80063e4 <getBlockParamIndex>
				   if (error != ERROR_SUCCESS)
 80071bc:	bb08      	cbnz	r0, 8007202 <Scope_Main_Save+0x19a>
				   blockAddr = TableStruct->TParamTable[tblIndex].pAdr;
 80071be:	f8da 1000 	ldr.w	r1, [sl]
 80071c2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 80071c6:	680b      	ldr	r3, [r1, #0]
 80071c8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
				   error = getBlockFunctionIndex(TableStruct->TFncTable, blockId, &tblIndex);
 80071cc:	f10d 020e 	add.w	r2, sp, #14
				   blockAddr = TableStruct->TParamTable[tblIndex].pAdr;
 80071d0:	f8d3 8004 	ldr.w	r8, [r3, #4]
				   error = getBlockFunctionIndex(TableStruct->TFncTable, blockId, &tblIndex);
 80071d4:	6848      	ldr	r0, [r1, #4]
 80071d6:	f8b8 1000 	ldrh.w	r1, [r8]
 80071da:	f7ff f94d 	bl	8006478 <getBlockFunctionIndex>
				   if (error != ERROR_SUCCESS)
 80071de:	b980      	cbnz	r0, 8007202 <Scope_Main_Save+0x19a>
				   pTScope->channelAddr[i] = TableStruct->TFncTable[tblIndex].pFGetAddress(blockAddr, elementId);
 80071e0:	f8da 2000 	ldr.w	r2, [sl]
 80071e4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80071e8:	6852      	ldr	r2, [r2, #4]
 80071ea:	9900      	ldr	r1, [sp, #0]
 80071ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80071f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071f4:	4640      	mov	r0, r8
 80071f6:	695b      	ldr	r3, [r3, #20]
 80071f8:	4798      	blx	r3
 80071fa:	f8c9 0000 	str.w	r0, [r9]
				   if (pTScope->channelAddr[i] == (void*)0)
 80071fe:	2800      	cmp	r0, #0
 8007200:	d18a      	bne.n	8007118 <Scope_Main_Save+0xb0>
       return ((uint8)1);
 8007202:	2001      	movs	r0, #1
}
 8007204:	b005      	add	sp, #20
 8007206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						   ((uint32)data[ptr + 2] << 16) + ((uint32)data[ptr + 3] << 24));
 800720a:	79eb      	ldrb	r3, [r5, #7]
				   pTScope->channelAddr[i] = (void*)((uint32)data[ptr] + ((uint32)data[ptr + 1] << 8) + \
 800720c:	79aa      	ldrb	r2, [r5, #6]
						   ((uint32)data[ptr + 2] << 16) + ((uint32)data[ptr + 3] << 24));
 800720e:	041b      	lsls	r3, r3, #16
				   pTScope->channelAddr[i] = (void*)((uint32)data[ptr] + ((uint32)data[ptr + 1] << 8) + \
 8007210:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8007214:	796a      	ldrb	r2, [r5, #5]
 8007216:	4413      	add	r3, r2
						   ((uint32)data[ptr + 2] << 16) + ((uint32)data[ptr + 3] << 24));
 8007218:	7a2a      	ldrb	r2, [r5, #8]
 800721a:	eb03 6302 	add.w	r3, r3, r2, lsl #24
				   pTScope->channelAddr[i] = (void*)((uint32)data[ptr] + ((uint32)data[ptr + 1] << 8) + \
 800721e:	f8c9 3000 	str.w	r3, [r9]
				   break;
 8007222:	e779      	b.n	8007118 <Scope_Main_Save+0xb0>
 8007224:	fa5f fc8b 	uxtb.w	ip, fp
          ptr += (uint8)5;
 8007228:	f10c 0505 	add.w	r5, ip, #5
       ptr++;
 800722c:	f10c 0206 	add.w	r2, ip, #6
          ptr += (uint8)5;
 8007230:	b2ed      	uxtb	r5, r5
       ptr++;
 8007232:	f10c 0c07 	add.w	ip, ip, #7
 8007236:	f8dd 8004 	ldr.w	r8, [sp, #4]
       sourceType = data[ptr];
 800723a:	b2d2      	uxtb	r2, r2
       ptr++;
 800723c:	fa5f f38c 	uxtb.w	r3, ip
       pTScope->trgDataType = data[ptr];
 8007240:	4629      	mov	r1, r5
 8007242:	5c79      	ldrb	r1, [r7, r1]
 8007244:	f884 104c 	strb.w	r1, [r4, #76]	@ 0x4c
       switch (sourceType)
 8007248:	5cba      	ldrb	r2, [r7, r2]
 800724a:	2a03      	cmp	r2, #3
 800724c:	d8d9      	bhi.n	8007202 <Scope_Main_Save+0x19a>
 800724e:	e8df f002 	tbb	[pc, r2]
 8007252:	5189      	.short	0x5189
 8007254:	0237      	.short	0x0237
			   uint16 paramId = (uint16)data[ptr + 2] + ((uint16)data[ptr + 3] << 8);
 8007256:	443b      	add	r3, r7
			   uint8 error = getIoParamIndex(TableStruct->outportParamTable, paramId, &tblIndex);
 8007258:	4e8f      	ldr	r6, [pc, #572]	@ (8007498 <Scope_Main_Save+0x430>)
			   uint16 paramId = (uint16)data[ptr + 2] + ((uint16)data[ptr + 3] << 8);
 800725a:	78da      	ldrb	r2, [r3, #3]
 800725c:	7899      	ldrb	r1, [r3, #2]
			   uint8 error = getIoParamIndex(TableStruct->outportParamTable, paramId, &tblIndex);
 800725e:	6833      	ldr	r3, [r6, #0]
			   uint16 paramId = (uint16)data[ptr + 2] + ((uint16)data[ptr + 3] << 8);
 8007260:	eb01 2102 	add.w	r1, r1, r2, lsl #8
			   uint8 error = getIoParamIndex(TableStruct->outportParamTable, paramId, &tblIndex);
 8007264:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8007266:	b289      	uxth	r1, r1
 8007268:	f10d 020e 	add.w	r2, sp, #14
 800726c:	f7ff f896 	bl	800639c <getIoParamIndex>
			   if (error != ERROR_SUCCESS)
 8007270:	2800      	cmp	r0, #0
 8007272:	d1c6      	bne.n	8007202 <Scope_Main_Save+0x19a>
			   pTScope->trgAddr = *(void**)TableStruct->outportParamTable[tblIndex].data;
 8007274:	6833      	ldr	r3, [r6, #0]
 8007276:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800727a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    	   uint8 trgLevelSize = pTScope->trgDataType & (uint8)0x0F;
 800727c:	f894 104c 	ldrb.w	r1, [r4, #76]	@ 0x4c
			   pTScope->trgAddr = *(void**)TableStruct->outportParamTable[tblIndex].data;
 8007280:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	64a3      	str	r3, [r4, #72]	@ 0x48
    	   uint8 trgLevelSize = pTScope->trgDataType & (uint8)0x0F;
 800728a:	f001 000f 	and.w	r0, r1, #15
       ptr += (uint8)4;
 800728e:	1dab      	adds	r3, r5, #6
    	   switch (trgLevelSize)
 8007290:	1e42      	subs	r2, r0, #1
       ptr += (uint8)4;
 8007292:	b2db      	uxtb	r3, r3
    	   switch (trgLevelSize)
 8007294:	2a07      	cmp	r2, #7
 8007296:	d8b4      	bhi.n	8007202 <Scope_Main_Save+0x19a>
 8007298:	a601      	add	r6, pc, #4	@ (adr r6, 80072a0 <Scope_Main_Save+0x238>)
 800729a:	f856 f022 	ldr.w	pc, [r6, r2, lsl #2]
 800729e:	bf00      	nop
 80072a0:	0800746d 	.word	0x0800746d
 80072a4:	0800745f 	.word	0x0800745f
 80072a8:	08007203 	.word	0x08007203
 80072ac:	08007441 	.word	0x08007441
 80072b0:	08007203 	.word	0x08007203
 80072b4:	08007203 	.word	0x08007203
 80072b8:	08007203 	.word	0x08007203
 80072bc:	0800737f 	.word	0x0800737f
			   uint16 paramId = (uint16)data[ptr + 2] + ((uint16)data[ptr + 3] << 8);
 80072c0:	443b      	add	r3, r7
			   uint8 error = getIoParamIndex(TableStruct->inportParamTable, paramId, &tblIndex);
 80072c2:	4e75      	ldr	r6, [pc, #468]	@ (8007498 <Scope_Main_Save+0x430>)
			   uint16 paramId = (uint16)data[ptr + 2] + ((uint16)data[ptr + 3] << 8);
 80072c4:	78da      	ldrb	r2, [r3, #3]
 80072c6:	7899      	ldrb	r1, [r3, #2]
			   uint8 error = getIoParamIndex(TableStruct->inportParamTable, paramId, &tblIndex);
 80072c8:	6833      	ldr	r3, [r6, #0]
			   uint16 paramId = (uint16)data[ptr + 2] + ((uint16)data[ptr + 3] << 8);
 80072ca:	eb01 2102 	add.w	r1, r1, r2, lsl #8
			   uint8 error = getIoParamIndex(TableStruct->inportParamTable, paramId, &tblIndex);
 80072ce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80072d0:	b289      	uxth	r1, r1
 80072d2:	f10d 020e 	add.w	r2, sp, #14
 80072d6:	f7ff f861 	bl	800639c <getIoParamIndex>
			   if (error != ERROR_SUCCESS)
 80072da:	2800      	cmp	r0, #0
 80072dc:	d191      	bne.n	8007202 <Scope_Main_Save+0x19a>
			   pTScope->trgAddr = TableStruct->inportParamTable[tblIndex].data;
 80072de:	6833      	ldr	r3, [r6, #0]
 80072e0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 80072e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	64a3      	str	r3, [r4, #72]	@ 0x48
    	   uint8 trgLevelSize = pTScope->trgDataType & (uint8)0x0F;
 80072ee:	f894 104c 	ldrb.w	r1, [r4, #76]	@ 0x4c
 80072f2:	e7ca      	b.n	800728a <Scope_Main_Save+0x222>
			   uint8 error = getBlockParamIndex(TableStruct->TParamTable, paramId, &tblIndex);
 80072f4:	4e68      	ldr	r6, [pc, #416]	@ (8007498 <Scope_Main_Save+0x430>)
			   uint16 elementId = (uint16)data[ptr] + ((uint16)data[ptr + 1] << 8);
 80072f6:	f817 9003 	ldrb.w	r9, [r7, r3]
 80072fa:	18fa      	adds	r2, r7, r3
			   uint8 error = getBlockParamIndex(TableStruct->TParamTable, paramId, &tblIndex);
 80072fc:	6833      	ldr	r3, [r6, #0]
			   uint16 paramId = (uint16)data[ptr + 2] + ((uint16)data[ptr + 3] << 8);
 80072fe:	7891      	ldrb	r1, [r2, #2]
			   uint8 error = getBlockParamIndex(TableStruct->TParamTable, paramId, &tblIndex);
 8007300:	6818      	ldr	r0, [r3, #0]
			   uint16 paramId = (uint16)data[ptr + 2] + ((uint16)data[ptr + 3] << 8);
 8007302:	78d3      	ldrb	r3, [r2, #3]
			   uint16 elementId = (uint16)data[ptr] + ((uint16)data[ptr + 1] << 8);
 8007304:	f892 a001 	ldrb.w	sl, [r2, #1]
			   uint16 paramId = (uint16)data[ptr + 2] + ((uint16)data[ptr + 3] << 8);
 8007308:	eb01 2103 	add.w	r1, r1, r3, lsl #8
			   uint8 error = getBlockParamIndex(TableStruct->TParamTable, paramId, &tblIndex);
 800730c:	b289      	uxth	r1, r1
 800730e:	f10d 020e 	add.w	r2, sp, #14
 8007312:	f7ff f867 	bl	80063e4 <getBlockParamIndex>
			   if (error != ERROR_SUCCESS)
 8007316:	2800      	cmp	r0, #0
 8007318:	f47f af73 	bne.w	8007202 <Scope_Main_Save+0x19a>
			   blockAddr = TableStruct->TParamTable[tblIndex].pAdr;
 800731c:	6831      	ldr	r1, [r6, #0]
 800731e:	f8bd 000e 	ldrh.w	r0, [sp, #14]
 8007322:	680b      	ldr	r3, [r1, #0]
 8007324:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
			   error = getBlockFunctionIndex(TableStruct->TFncTable, blockId, &tblIndex);
 8007328:	f10d 020e 	add.w	r2, sp, #14
			   blockAddr = TableStruct->TParamTable[tblIndex].pAdr;
 800732c:	f8d3 b004 	ldr.w	fp, [r3, #4]
			   error = getBlockFunctionIndex(TableStruct->TFncTable, blockId, &tblIndex);
 8007330:	6848      	ldr	r0, [r1, #4]
 8007332:	f8bb 1000 	ldrh.w	r1, [fp]
 8007336:	f7ff f89f 	bl	8006478 <getBlockFunctionIndex>
			   if (error != ERROR_SUCCESS)
 800733a:	2800      	cmp	r0, #0
 800733c:	f47f af61 	bne.w	8007202 <Scope_Main_Save+0x19a>
			   pTScope->trgAddr = TableStruct->TFncTable[tblIndex].pFGetAddress(blockAddr, elementId);
 8007340:	6833      	ldr	r3, [r6, #0]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8007348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800734c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
			   uint16 elementId = (uint16)data[ptr] + ((uint16)data[ptr + 1] << 8);
 8007350:	eb09 210a 	add.w	r1, r9, sl, lsl #8
			   pTScope->trgAddr = TableStruct->TFncTable[tblIndex].pFGetAddress(blockAddr, elementId);
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	b289      	uxth	r1, r1
 8007358:	4658      	mov	r0, fp
 800735a:	4798      	blx	r3
 800735c:	64a0      	str	r0, [r4, #72]	@ 0x48
			   if (pTScope->trgAddr == (void*)0)
 800735e:	2800      	cmp	r0, #0
 8007360:	d1c5      	bne.n	80072ee <Scope_Main_Save+0x286>
 8007362:	e74e      	b.n	8007202 <Scope_Main_Save+0x19a>
			   pTScope->trgAddr = (void*)((uint32)data[ptr] + ((uint32)data[ptr + 1] << 8) + \
 8007364:	18fa      	adds	r2, r7, r3
 8007366:	5cf8      	ldrb	r0, [r7, r3]
					   ((uint32)data[ptr + 2] << 16) + ((uint32)data[ptr + 3] << 24));
 8007368:	7893      	ldrb	r3, [r2, #2]
			   pTScope->trgAddr = (void*)((uint32)data[ptr] + ((uint32)data[ptr + 1] << 8) + \
 800736a:	7856      	ldrb	r6, [r2, #1]
					   ((uint32)data[ptr + 2] << 16) + ((uint32)data[ptr + 3] << 24));
 800736c:	78d2      	ldrb	r2, [r2, #3]
 800736e:	041b      	lsls	r3, r3, #16
			   pTScope->trgAddr = (void*)((uint32)data[ptr] + ((uint32)data[ptr + 1] << 8) + \
 8007370:	eb03 2306 	add.w	r3, r3, r6, lsl #8
 8007374:	4403      	add	r3, r0
					   ((uint32)data[ptr + 2] << 16) + ((uint32)data[ptr + 3] << 24));
 8007376:	eb03 6302 	add.w	r3, r3, r2, lsl #24
			   pTScope->trgAddr = (void*)((uint32)data[ptr] + ((uint32)data[ptr + 1] << 8) + \
 800737a:	64a3      	str	r3, [r4, #72]	@ 0x48
			   break;
 800737c:	e785      	b.n	800728a <Scope_Main_Save+0x222>
    		   pTScope->trgLevel = (uint64)data[ptr] + ((uint64)data[ptr + 1] << 8) + \
 800737e:	18fe      	adds	r6, r7, r3
 8007380:	f817 9003 	ldrb.w	r9, [r7, r3]
 8007384:	7872      	ldrb	r2, [r6, #1]
    		   	   ((uint64)data[ptr + 2] << 16) + ((uint64)data[ptr + 3] << 24) + \
 8007386:	f896 c002 	ldrb.w	ip, [r6, #2]
 800738a:	f896 e003 	ldrb.w	lr, [r6, #3]
 800738e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
    		   pTScope->trgLevel = (uint64)data[ptr] + ((uint64)data[ptr + 1] << 8) + \
 8007392:	0212      	lsls	r2, r2, #8
 8007394:	eb12 020c 	adds.w	r2, r2, ip
    		   	   ((uint64)data[ptr + 2] << 16) + ((uint64)data[ptr + 3] << 24) + \
 8007398:	ea4f 6e0e 	mov.w	lr, lr, lsl #24
    		   pTScope->trgLevel = (uint64)data[ptr] + ((uint64)data[ptr + 1] << 8) + \
 800739c:	bf2c      	ite	cs
 800739e:	f04f 0c01 	movcs.w	ip, #1
 80073a2:	f04f 0c00 	movcc.w	ip, #0
 80073a6:	eb12 0209 	adds.w	r2, r2, r9
 80073aa:	f14c 0c00 	adc.w	ip, ip, #0
    		       ((uint64)data[ptr + 4] << 32) + ((uint64)data[ptr + 5] << 40) + \
 80073ae:	f896 9004 	ldrb.w	r9, [r6, #4]
    		   	   ((uint64)data[ptr + 2] << 16) + ((uint64)data[ptr + 3] << 24) + \
 80073b2:	eb12 020e 	adds.w	r2, r2, lr
 80073b6:	f14c 0c00 	adc.w	ip, ip, #0
    		   pTScope->trgLevel = (uint64)data[ptr] + ((uint64)data[ptr + 1] << 8) + \
 80073ba:	f04f 0e00 	mov.w	lr, #0
    		   	   ((uint64)data[ptr + 2] << 16) + ((uint64)data[ptr + 3] << 24) + \
 80073be:	44cc      	add	ip, r9
 80073c0:	eb12 020e 	adds.w	r2, r2, lr
    		       ((uint64)data[ptr + 4] << 32) + ((uint64)data[ptr + 5] << 40) + \
 80073c4:	f896 9005 	ldrb.w	r9, [r6, #5]
 80073c8:	eb12 020e 	adds.w	r2, r2, lr
 80073cc:	eb4c 2c09 	adc.w	ip, ip, r9, lsl #8
    		       ((uint64)data[ptr + 6] << 48) + ((uint64)data[ptr + 7] << 56);
 80073d0:	f896 9006 	ldrb.w	r9, [r6, #6]
 80073d4:	79f6      	ldrb	r6, [r6, #7]
    		       ((uint64)data[ptr + 4] << 32) + ((uint64)data[ptr + 5] << 40) + \
 80073d6:	eb12 020e 	adds.w	r2, r2, lr
 80073da:	eb4c 4c09 	adc.w	ip, ip, r9, lsl #16
    		       ((uint64)data[ptr + 6] << 48) + ((uint64)data[ptr + 7] << 56);
 80073de:	eb12 020e 	adds.w	r2, r2, lr
 80073e2:	eb4c 6606 	adc.w	r6, ip, r6, lsl #24
    		   pTScope->trgLevel = (uint8)data[ptr];
 80073e6:	e9c4 260e 	strd	r2, r6, [r4, #56]	@ 0x38
    	   if (!isNewVersion)
 80073ea:	060a      	lsls	r2, r1, #24
 80073ec:	d44e      	bmi.n	800748c <Scope_Main_Save+0x424>
    		   pTScope->trgDataType |= (uint8)0x20;
 80073ee:	f041 0320 	orr.w	r3, r1, #32
    		   ptr += (uint8)4;
 80073f2:	350a      	adds	r5, #10
    		   pTScope->trgDataType |= (uint8)0x20;
 80073f4:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
    		   ptr += (uint8)4;
 80073f8:	b2ed      	uxtb	r5, r5
	   pTScope->trgDelay = ((int32)data[ptr] + ((int32)data[ptr + 1] << 8) + ((int32)data[ptr + 2] << 16) + \
 80073fa:	197b      	adds	r3, r7, r5
 80073fc:	5d78      	ldrb	r0, [r7, r5]
 80073fe:	785a      	ldrb	r2, [r3, #1]
 8007400:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8007404:	789a      	ldrb	r2, [r3, #2]
			   ((int32)data[ptr + 3] << 24));
 8007406:	78db      	ldrb	r3, [r3, #3]
	   pTScope->trgDelay = ((int32)data[ptr] + ((int32)data[ptr + 1] << 8) + ((int32)data[ptr + 2] << 16) + \
 8007408:	eb00 4002 	add.w	r0, r0, r2, lsl #16
 800740c:	eb00 6003 	add.w	r0, r0, r3, lsl #24
 8007410:	6620      	str	r0, [r4, #96]	@ 0x60
	   pTScope->trgCount = (uint32)getAbsValI32(pTScope->trgDelay);
 8007412:	f7fe ffb9 	bl	8006388 <getAbsValI32>
	   ptr += (uint8)4;
 8007416:	1d2a      	adds	r2, r5, #4
	   pTScope->trgEdge = (tTrgEdgeType)data[ptr];
 8007418:	b2d2      	uxtb	r2, r2
       ptr++;
 800741a:	1d6b      	adds	r3, r5, #5
	   pTScope->trgCount = (uint32)getAbsValI32(pTScope->trgDelay);
 800741c:	66e0      	str	r0, [r4, #108]	@ 0x6c
       ptr++;
 800741e:	b2db      	uxtb	r3, r3
	   pTScope->trgEdge = (tTrgEdgeType)data[ptr];
 8007420:	5cba      	ldrb	r2, [r7, r2]
 8007422:	f884 2074 	strb.w	r2, [r4, #116]	@ 0x74
       if (ucFRMlen > ptr)
 8007426:	4543      	cmp	r3, r8
 8007428:	d223      	bcs.n	8007472 <Scope_Main_Save+0x40a>
           if (data[ptr] == TRG_MODE_NORMAL)
 800742a:	5cfb      	ldrb	r3, [r7, r3]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d020      	beq.n	8007472 <Scope_Main_Save+0x40a>
	   pTScope->noChannels = data[1];
 8007430:	787b      	ldrb	r3, [r7, #1]
 8007432:	f884 3055 	strb.w	r3, [r4, #85]	@ 0x55
	   pTScope->state = (tScopeState)data[0];
 8007436:	783b      	ldrb	r3, [r7, #0]
 8007438:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
       return ((uint8)0);
 800743c:	2000      	movs	r0, #0
 800743e:	e6e1      	b.n	8007204 <Scope_Main_Save+0x19c>
    		   pTScope->trgLevel = (uint32)data[ptr] + ((uint32)data[ptr + 1] << 8) + \
 8007440:	18fe      	adds	r6, r7, r3
 8007442:	f817 c003 	ldrb.w	ip, [r7, r3]
    		   	   ((uint32)data[ptr + 2] << 16) + ((uint32)data[ptr + 3] << 24);
 8007446:	78b2      	ldrb	r2, [r6, #2]
    		   pTScope->trgLevel = (uint32)data[ptr] + ((uint32)data[ptr + 1] << 8) + \
 8007448:	f896 e001 	ldrb.w	lr, [r6, #1]
    		   	   ((uint32)data[ptr + 2] << 16) + ((uint32)data[ptr + 3] << 24);
 800744c:	78f6      	ldrb	r6, [r6, #3]
 800744e:	0412      	lsls	r2, r2, #16
    		   pTScope->trgLevel = (uint32)data[ptr] + ((uint32)data[ptr + 1] << 8) + \
 8007450:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8007454:	4462      	add	r2, ip
    		   	   ((uint32)data[ptr + 2] << 16) + ((uint32)data[ptr + 3] << 24);
 8007456:	eb02 6206 	add.w	r2, r2, r6, lsl #24
 800745a:	2600      	movs	r6, #0
    		   break;
 800745c:	e7c3      	b.n	80073e6 <Scope_Main_Save+0x37e>
    		   pTScope->trgLevel = (uint16)data[ptr] + ((uint16)data[ptr + 1] << 8);
 800745e:	18fa      	adds	r2, r7, r3
 8007460:	7856      	ldrb	r6, [r2, #1]
 8007462:	5cfa      	ldrb	r2, [r7, r3]
 8007464:	eb02 2206 	add.w	r2, r2, r6, lsl #8
 8007468:	2600      	movs	r6, #0
    		   break;
 800746a:	e7bc      	b.n	80073e6 <Scope_Main_Save+0x37e>
    		   pTScope->trgLevel = (uint8)data[ptr];
 800746c:	5cfa      	ldrb	r2, [r7, r3]
 800746e:	2600      	movs	r6, #0
    		   break;
 8007470:	e7b9      	b.n	80073e6 <Scope_Main_Save+0x37e>
               pTScope->trgLastValue = getTriggerValue(pTScope);
 8007472:	f894 104c 	ldrb.w	r1, [r4, #76]	@ 0x4c
 8007476:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8007478:	f7ff fc0c 	bl	8006c94 <getTriggerValue.isra.0>
 800747c:	e9c4 0110 	strd	r0, r1, [r4, #64]	@ 0x40
 8007480:	e7d6      	b.n	8007430 <Scope_Main_Save+0x3c8>
       while (i < data[1])
 8007482:	2104      	movs	r1, #4
 8007484:	2306      	movs	r3, #6
 8007486:	2205      	movs	r2, #5
   uint8 ptr = offset;
 8007488:	460d      	mov	r5, r1
 800748a:	e6da      	b.n	8007242 <Scope_Main_Save+0x1da>
    		   ptr += trgLevelSize;
 800748c:	4403      	add	r3, r0
 800748e:	b2dd      	uxtb	r5, r3
 8007490:	e7b3      	b.n	80073fa <Scope_Main_Save+0x392>
       return ((uint8)1);
 8007492:	2001      	movs	r0, #1
}
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	2000000c 	.word	0x2000000c

0800749c <Scope_Main_GetAddress>:
}
 800749c:	2000      	movs	r0, #0
 800749e:	4770      	bx	lr

080074a0 <sendSerial>:
}

static void sendSerial(tSerial* serialP, uint8 data)
{
    // do nothing
}
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop

080074a4 <receiveSerial>:

static uint8 receiveSerial(tSerial* serialP)
{
    return ((uint8)0);
}
 80074a4:	2000      	movs	r0, #0
 80074a6:	4770      	bx	lr

080074a8 <flush>:
}

static void flush(tSerial* serialP)
{
    /* do nothing because 'send' immediately sends byte */
}
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop

080074ac <isSendReady>:
static uint8 isSendReady(tSerial* serialP)
 80074ac:	2000      	movs	r0, #0
 80074ae:	4770      	bx	lr

080074b0 <getTxFifoFree>:
static uint8 getTxFifoFree(tSerial* serialP)
 80074b0:	2000      	movs	r0, #0
 80074b2:	4770      	bx	lr

080074b4 <isReceiveDataAvailable>:
static uint8 isReceiveDataAvailable(tSerial* serialP)
 80074b4:	2000      	movs	r0, #0
 80074b6:	4770      	bx	lr

080074b8 <initSerialGeneric>:
    serialP->send = (void (*)(tInterface*, uint8))sendSerial;
 80074b8:	4a07      	ldr	r2, [pc, #28]	@ (80074d8 <initSerialGeneric+0x20>)
    serialP->receive = (uint8 (*)(tInterface*))receiveSerial;
 80074ba:	4b08      	ldr	r3, [pc, #32]	@ (80074dc <initSerialGeneric+0x24>)
    serialP->isSendReady = (uint8 (*)(tInterface*))isSendReady;
 80074bc:	4908      	ldr	r1, [pc, #32]	@ (80074e0 <initSerialGeneric+0x28>)
{
 80074be:	b410      	push	{r4}
    serialP->receive = (uint8 (*)(tInterface*))receiveSerial;
 80074c0:	e9c0 2300 	strd	r2, r3, [r0]
    serialP->isReceiveDataAvailable = (uint8 (*)(tInterface*))isReceiveDataAvailable;
 80074c4:	4c07      	ldr	r4, [pc, #28]	@ (80074e4 <initSerialGeneric+0x2c>)
    serialP->getTxFifoFree = (uint8 (*)(tInterface*))getTxFifoFree;
 80074c6:	4a08      	ldr	r2, [pc, #32]	@ (80074e8 <initSerialGeneric+0x30>)
    serialP->flush = (void (*)(tInterface*))flush;
 80074c8:	4b08      	ldr	r3, [pc, #32]	@ (80074ec <initSerialGeneric+0x34>)
    serialP->isSendReady = (uint8 (*)(tInterface*))isSendReady;
 80074ca:	e9c0 4102 	strd	r4, r1, [r0, #8]
    serialP->flush = (void (*)(tInterface*))flush;
 80074ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
 80074d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	080074a1 	.word	0x080074a1
 80074dc:	080074a5 	.word	0x080074a5
 80074e0:	080074ad 	.word	0x080074ad
 80074e4:	080074b5 	.word	0x080074b5
 80074e8:	080074b1 	.word	0x080074b1
 80074ec:	080074a9 	.word	0x080074a9

080074f0 <linkSerial>:
    lnkProtocol->hwInterface = (tInterface*)serialP;
 80074f0:	6141      	str	r1, [r0, #20]
}
 80074f2:	4770      	bx	lr

080074f4 <sendSvNotAvailable>:

/* send service not available error */
void sendSvNotAvailable(tProtocol* protocol)
{
	protocol->ucFRAMESize = 2;
	protocol->ucFRAMEData[1] = ERRORServiceNotAvail;
 80074f4:	68c2      	ldr	r2, [r0, #12]
	protocol->ucFRAMESize = 2;
 80074f6:	f04f 0c02 	mov.w	ip, #2
	protocol->ucFRAMEData[1] = ERRORServiceNotAvail;
 80074fa:	2121      	movs	r1, #33	@ 0x21
	protocol->ucFRAMESize = 2;
 80074fc:	f8a0 c008 	strh.w	ip, [r0, #8]
	protocol->ucFRAMEData[1] = ERRORServiceNotAvail;
 8007500:	7051      	strb	r1, [r2, #1]
	protocol->pSnd_Enable(protocol);
 8007502:	6843      	ldr	r3, [r0, #4]
 8007504:	4718      	bx	r3
 8007506:	bf00      	nop

08007508 <setTargetState>:
 */
static void setTargetState(tProtocol* protocol)
{
	uint8 error = ERRORSuccess;

	switch (protocol->ucFRAMEData[1])
 8007508:	68c3      	ldr	r3, [r0, #12]
 800750a:	785a      	ldrb	r2, [r3, #1]
 800750c:	2a05      	cmp	r2, #5
 800750e:	d827      	bhi.n	8007560 <setTargetState+0x58>
 8007510:	e8df f002 	tbb	[pc, r2]
 8007514:	1c17120d 	.word	0x1c17120d
 8007518:	0321      	.short	0x0321
		break;
	case 4:
		TableStruct->DSPState = RUN_STATE_POWER_OFF;
		break;
	case 5:
		TableStruct->DSPState = RUN_STATE_POWER_ON;
 800751a:	4a12      	ldr	r2, [pc, #72]	@ (8007564 <setTargetState+0x5c>)
 800751c:	6812      	ldr	r2, [r2, #0]
 800751e:	2105      	movs	r1, #5
 8007520:	7311      	strb	r1, [r2, #12]
	uint8 error = ERRORSuccess;
 8007522:	2200      	movs	r2, #0
	default:
		error = SvErrorInvalidDspState;
		break;
	}

	protocol->ucFRAMEData[1] = error;
 8007524:	705a      	strb	r2, [r3, #1]
	protocol->ucFRAMESize = (uint8)2;
 8007526:	2202      	movs	r2, #2
	protocol->pSnd_Enable(protocol);
 8007528:	6843      	ldr	r3, [r0, #4]
	protocol->ucFRAMESize = (uint8)2;
 800752a:	8102      	strh	r2, [r0, #8]
	protocol->pSnd_Enable(protocol);
 800752c:	4718      	bx	r3
		TableStruct->DSPState = BOOTLOADER_STATE;
 800752e:	4a0d      	ldr	r2, [pc, #52]	@ (8007564 <setTargetState+0x5c>)
 8007530:	6812      	ldr	r2, [r2, #0]
 8007532:	2100      	movs	r1, #0
 8007534:	7311      	strb	r1, [r2, #12]
		break;
 8007536:	e7f4      	b.n	8007522 <setTargetState+0x1a>
		TableStruct->DSPState = PRG_LOADED_STATE;
 8007538:	4a0a      	ldr	r2, [pc, #40]	@ (8007564 <setTargetState+0x5c>)
 800753a:	6812      	ldr	r2, [r2, #0]
 800753c:	2101      	movs	r1, #1
 800753e:	7311      	strb	r1, [r2, #12]
		break;
 8007540:	e7ef      	b.n	8007522 <setTargetState+0x1a>
		TableStruct->DSPState = IDLE_STATE;
 8007542:	4a08      	ldr	r2, [pc, #32]	@ (8007564 <setTargetState+0x5c>)
 8007544:	6812      	ldr	r2, [r2, #0]
 8007546:	2102      	movs	r1, #2
 8007548:	7311      	strb	r1, [r2, #12]
		break;
 800754a:	e7ea      	b.n	8007522 <setTargetState+0x1a>
		TableStruct->DSPState = INIT_STATE;
 800754c:	4a05      	ldr	r2, [pc, #20]	@ (8007564 <setTargetState+0x5c>)
 800754e:	6812      	ldr	r2, [r2, #0]
 8007550:	2103      	movs	r1, #3
 8007552:	7311      	strb	r1, [r2, #12]
		break;
 8007554:	e7e5      	b.n	8007522 <setTargetState+0x1a>
		TableStruct->DSPState = RUN_STATE_POWER_OFF;
 8007556:	4a03      	ldr	r2, [pc, #12]	@ (8007564 <setTargetState+0x5c>)
 8007558:	6812      	ldr	r2, [r2, #0]
 800755a:	2104      	movs	r1, #4
 800755c:	7311      	strb	r1, [r2, #12]
		break;
 800755e:	e7e0      	b.n	8007522 <setTargetState+0x1a>
	switch (protocol->ucFRAMEData[1])
 8007560:	2222      	movs	r2, #34	@ 0x22
 8007562:	e7df      	b.n	8007524 <setTargetState+0x1c>
 8007564:	2000000c 	.word	0x2000000c

08007568 <getTargetState>:
/*
 * Returns target state.
 */
static void getTargetState(tProtocol* protocol)
{
	protocol->ucFRAMEData[1] = ERRORSuccess;
 8007568:	68c1      	ldr	r1, [r0, #12]
	protocol->ucFRAMEData[2] = (uint8)(TableStruct->DSPState & 0xFF);
 800756a:	4a06      	ldr	r2, [pc, #24]	@ (8007584 <getTargetState+0x1c>)
	protocol->ucFRAMEData[1] = ERRORSuccess;
 800756c:	f04f 0c00 	mov.w	ip, #0
 8007570:	f881 c001 	strb.w	ip, [r1, #1]
	protocol->ucFRAMEData[2] = (uint8)(TableStruct->DSPState & 0xFF);
 8007574:	6811      	ldr	r1, [r2, #0]
 8007576:	68c2      	ldr	r2, [r0, #12]
 8007578:	7b09      	ldrb	r1, [r1, #12]
 800757a:	7091      	strb	r1, [r2, #2]
	protocol->ucFRAMESize = (uint8)3;
 800757c:	2103      	movs	r1, #3
	protocol->pSnd_Enable(protocol);
 800757e:	6842      	ldr	r2, [r0, #4]
	protocol->ucFRAMESize = (uint8)3;
 8007580:	8101      	strh	r1, [r0, #8]
	protocol->pSnd_Enable(protocol);
 8007582:	4710      	bx	r2
 8007584:	2000000c 	.word	0x2000000c

08007588 <loadMaskParameter>:
{
 8007588:	b530      	push	{r4, r5, lr}
	if (protocol->ucFRAMESize != 3)
 800758a:	8902      	ldrh	r2, [r0, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 800758c:	68c3      	ldr	r3, [r0, #12]
	if (protocol->ucFRAMESize != 3)
 800758e:	2a03      	cmp	r2, #3
{
 8007590:	b083      	sub	sp, #12
 8007592:	4604      	mov	r4, r0
	if (protocol->ucFRAMESize != 3)
 8007594:	d008      	beq.n	80075a8 <loadMaskParameter+0x20>
	protocol->ucFRAMESize = 2;
 8007596:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007598:	2214      	movs	r2, #20
	protocol->ucFRAMESize = 2;
 800759a:	8101      	strh	r1, [r0, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 800759c:	705a      	strb	r2, [r3, #1]
	protocol->pSnd_Enable(protocol);
 800759e:	6843      	ldr	r3, [r0, #4]
}
 80075a0:	b003      	add	sp, #12
 80075a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	protocol->pSnd_Enable(protocol);
 80075a6:	4718      	bx	r3
	error = getMaskParamIndex(TableStruct->maskParameterTable, paramId, &tblIndex);
 80075a8:	4d21      	ldr	r5, [pc, #132]	@ (8007630 <loadMaskParameter+0xa8>)
 80075aa:	f8b3 1001 	ldrh.w	r1, [r3, #1]
 80075ae:	682b      	ldr	r3, [r5, #0]
 80075b0:	f10d 0206 	add.w	r2, sp, #6
 80075b4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80075b6:	f7fe ff39 	bl	800642c <getMaskParamIndex>
	if (error != ERROR_SUCCESS)
 80075ba:	bb30      	cbnz	r0, 800760a <loadMaskParameter+0x82>
	mpEntry = TableStruct->maskParameterTable[tblIndex];
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80075c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
	if (mpEntry.loadMaskParameter(mpEntry.maskParameter, &(protocol->ucFRAMEData[2]),
 80075c4:	8963      	ldrh	r3, [r4, #10]
	mpEntry = TableStruct->maskParameterTable[tblIndex];
 80075c6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80075ca:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	if (mpEntry.loadMaskParameter(mpEntry.maskParameter, &(protocol->ucFRAMEData[2]),
 80075ce:	68e1      	ldr	r1, [r4, #12]
 80075d0:	6915      	ldr	r5, [r2, #16]
 80075d2:	6890      	ldr	r0, [r2, #8]
 80075d4:	3b02      	subs	r3, #2
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3102      	adds	r1, #2
 80075da:	f104 0208 	add.w	r2, r4, #8
 80075de:	47a8      	blx	r5
 80075e0:	b148      	cbz	r0, 80075f6 <loadMaskParameter+0x6e>
	protocol->ucFRAMEData[1] = ucErrorNr;
 80075e2:	68e3      	ldr	r3, [r4, #12]
	protocol->ucFRAMESize = 2;
 80075e4:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 80075e6:	2249      	movs	r2, #73	@ 0x49
	protocol->ucFRAMESize = 2;
 80075e8:	8121      	strh	r1, [r4, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 80075ea:	705a      	strb	r2, [r3, #1]
	protocol->pSnd_Enable(protocol);
 80075ec:	6863      	ldr	r3, [r4, #4]
 80075ee:	4620      	mov	r0, r4
 80075f0:	4798      	blx	r3
}
 80075f2:	b003      	add	sp, #12
 80075f4:	bd30      	pop	{r4, r5, pc}
		protocol->ucFRAMESize += 2; /* add overhead size */
 80075f6:	8923      	ldrh	r3, [r4, #8]
		protocol->ucFRAMEData[1] = ERRORSuccess;
 80075f8:	68e2      	ldr	r2, [r4, #12]
		protocol->ucFRAMESize += 2; /* add overhead size */
 80075fa:	3302      	adds	r3, #2
 80075fc:	8123      	strh	r3, [r4, #8]
		protocol->ucFRAMEData[1] = ERRORSuccess;
 80075fe:	7050      	strb	r0, [r2, #1]
		protocol->pSnd_Enable(protocol);
 8007600:	6863      	ldr	r3, [r4, #4]
 8007602:	4620      	mov	r0, r4
 8007604:	4798      	blx	r3
}
 8007606:	b003      	add	sp, #12
 8007608:	bd30      	pop	{r4, r5, pc}
		switch (error)
 800760a:	2801      	cmp	r0, #1
	protocol->ucFRAMEData[1] = ucErrorNr;
 800760c:	68e3      	ldr	r3, [r4, #12]
		switch (error)
 800760e:	d00b      	beq.n	8007628 <loadMaskParameter+0xa0>
 8007610:	2802      	cmp	r0, #2
 8007612:	d002      	beq.n	800761a <loadMaskParameter+0x92>
	protocol->ucFRAMESize = 2;
 8007614:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007616:	22ff      	movs	r2, #255	@ 0xff
 8007618:	e7e6      	b.n	80075e8 <loadMaskParameter+0x60>
 800761a:	2240      	movs	r2, #64	@ 0x40
	protocol->ucFRAMESize = 2;
 800761c:	8120      	strh	r0, [r4, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 800761e:	705a      	strb	r2, [r3, #1]
	protocol->pSnd_Enable(protocol);
 8007620:	6863      	ldr	r3, [r4, #4]
 8007622:	4620      	mov	r0, r4
 8007624:	4798      	blx	r3
}
 8007626:	e7ee      	b.n	8007606 <loadMaskParameter+0x7e>
	protocol->ucFRAMESize = 2;
 8007628:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 800762a:	2247      	movs	r2, #71	@ 0x47
 800762c:	e7dc      	b.n	80075e8 <loadMaskParameter+0x60>
 800762e:	bf00      	nop
 8007630:	2000000c 	.word	0x2000000c

08007634 <saveMaskParameter>:
{
 8007634:	b530      	push	{r4, r5, lr}
	if (protocol->ucFRAMESize < 3)
 8007636:	8903      	ldrh	r3, [r0, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007638:	68c2      	ldr	r2, [r0, #12]
	if (protocol->ucFRAMESize < 3)
 800763a:	2b02      	cmp	r3, #2
{
 800763c:	b083      	sub	sp, #12
 800763e:	4604      	mov	r4, r0
	if (protocol->ucFRAMESize < 3)
 8007640:	d808      	bhi.n	8007654 <saveMaskParameter+0x20>
	protocol->ucFRAMESize = 2;
 8007642:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007644:	2314      	movs	r3, #20
	protocol->ucFRAMESize = 2;
 8007646:	8101      	strh	r1, [r0, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007648:	7053      	strb	r3, [r2, #1]
	protocol->pSnd_Enable(protocol);
 800764a:	6843      	ldr	r3, [r0, #4]
}
 800764c:	b003      	add	sp, #12
 800764e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	protocol->pSnd_Enable(protocol);
 8007652:	4718      	bx	r3
	error = getMaskParamIndex(TableStruct->maskParameterTable, paramId, &tblIndex);
 8007654:	4d1f      	ldr	r5, [pc, #124]	@ (80076d4 <saveMaskParameter+0xa0>)
 8007656:	f8b2 1001 	ldrh.w	r1, [r2, #1]
 800765a:	682b      	ldr	r3, [r5, #0]
 800765c:	f10d 0206 	add.w	r2, sp, #6
 8007660:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007662:	f7fe fee3 	bl	800642c <getMaskParamIndex>
	if (error != ERROR_SUCCESS)
 8007666:	bb18      	cbnz	r0, 80076b0 <saveMaskParameter+0x7c>
	mpEntry = TableStruct->maskParameterTable[tblIndex];
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800766e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
	if (mpEntry.saveMaskParameter(mpEntry.block, mpEntry.maskParameter, &(protocol->ucFRAMEData[3]), protocol->ucFRAMESize-3))
 8007670:	8923      	ldrh	r3, [r4, #8]
	mpEntry = TableStruct->maskParameterTable[tblIndex];
 8007672:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007676:	eb00 0082 	add.w	r0, r0, r2, lsl #2
	if (mpEntry.saveMaskParameter(mpEntry.block, mpEntry.maskParameter, &(protocol->ucFRAMEData[3]), protocol->ucFRAMESize-3))
 800767a:	68e2      	ldr	r2, [r4, #12]
 800767c:	68c5      	ldr	r5, [r0, #12]
 800767e:	3b03      	subs	r3, #3
 8007680:	b29b      	uxth	r3, r3
 8007682:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8007686:	3203      	adds	r2, #3
 8007688:	47a8      	blx	r5
	protocol->ucFRAMEData[1] = ucErrorNr;
 800768a:	68e3      	ldr	r3, [r4, #12]
	if (mpEntry.saveMaskParameter(mpEntry.block, mpEntry.maskParameter, &(protocol->ucFRAMEData[3]), protocol->ucFRAMESize-3))
 800768c:	b140      	cbz	r0, 80076a0 <saveMaskParameter+0x6c>
	protocol->ucFRAMESize = 2;
 800768e:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007690:	2248      	movs	r2, #72	@ 0x48
	protocol->ucFRAMESize = 2;
 8007692:	8121      	strh	r1, [r4, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007694:	705a      	strb	r2, [r3, #1]
	protocol->pSnd_Enable(protocol);
 8007696:	6863      	ldr	r3, [r4, #4]
 8007698:	4620      	mov	r0, r4
 800769a:	4798      	blx	r3
}
 800769c:	b003      	add	sp, #12
 800769e:	bd30      	pop	{r4, r5, pc}
		protocol->ucFRAMESize = 2;
 80076a0:	2202      	movs	r2, #2
 80076a2:	8122      	strh	r2, [r4, #8]
		protocol->ucFRAMEData[1] = ERRORSuccess;
 80076a4:	7058      	strb	r0, [r3, #1]
		protocol->pSnd_Enable(protocol);
 80076a6:	6863      	ldr	r3, [r4, #4]
 80076a8:	4620      	mov	r0, r4
 80076aa:	4798      	blx	r3
}
 80076ac:	b003      	add	sp, #12
 80076ae:	bd30      	pop	{r4, r5, pc}
		switch (error)
 80076b0:	2801      	cmp	r0, #1
	protocol->ucFRAMEData[1] = ucErrorNr;
 80076b2:	68e3      	ldr	r3, [r4, #12]
		switch (error)
 80076b4:	d004      	beq.n	80076c0 <saveMaskParameter+0x8c>
 80076b6:	2802      	cmp	r0, #2
 80076b8:	d005      	beq.n	80076c6 <saveMaskParameter+0x92>
	protocol->ucFRAMESize = 2;
 80076ba:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 80076bc:	22ff      	movs	r2, #255	@ 0xff
 80076be:	e7e8      	b.n	8007692 <saveMaskParameter+0x5e>
	protocol->ucFRAMESize = 2;
 80076c0:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 80076c2:	2247      	movs	r2, #71	@ 0x47
 80076c4:	e7e5      	b.n	8007692 <saveMaskParameter+0x5e>
 80076c6:	2240      	movs	r2, #64	@ 0x40
	protocol->ucFRAMESize = 2;
 80076c8:	8120      	strh	r0, [r4, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 80076ca:	705a      	strb	r2, [r3, #1]
	protocol->pSnd_Enable(protocol);
 80076cc:	6863      	ldr	r3, [r4, #4]
 80076ce:	4620      	mov	r0, r4
 80076d0:	4798      	blx	r3
}
 80076d2:	e7eb      	b.n	80076ac <saveMaskParameter+0x78>
 80076d4:	2000000c 	.word	0x2000000c

080076d8 <loadIoBlockData>:
{
 80076d8:	b530      	push	{r4, r5, lr}
	if (protocol->ucFRAMESize != 4)
 80076da:	8902      	ldrh	r2, [r0, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 80076dc:	68c3      	ldr	r3, [r0, #12]
	if (protocol->ucFRAMESize != 4)
 80076de:	2a04      	cmp	r2, #4
{
 80076e0:	b083      	sub	sp, #12
 80076e2:	4604      	mov	r4, r0
	if (protocol->ucFRAMESize != 4)
 80076e4:	d008      	beq.n	80076f8 <loadIoBlockData+0x20>
	protocol->ucFRAMESize = 2;
 80076e6:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 80076e8:	2214      	movs	r2, #20
	protocol->ucFRAMESize = 2;
 80076ea:	8121      	strh	r1, [r4, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 80076ec:	705a      	strb	r2, [r3, #1]
	protocol->pSnd_Enable(protocol);
 80076ee:	6863      	ldr	r3, [r4, #4]
}
 80076f0:	b003      	add	sp, #12
 80076f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	protocol->pSnd_Enable(protocol);
 80076f6:	4718      	bx	r3
		paramTbl = TableStruct->outportParamTable;
 80076f8:	4a45      	ldr	r2, [pc, #276]	@ (8007810 <loadIoBlockData+0x138>)
	if (isOutport)
 80076fa:	78dd      	ldrb	r5, [r3, #3]
	id = (uint16)((protocol->ucFRAMEData[2] << 8) + protocol->ucFRAMEData[1]);
 80076fc:	f8b3 1001 	ldrh.w	r1, [r3, #1]
		paramTbl = TableStruct->outportParamTable;
 8007700:	6812      	ldr	r2, [r2, #0]
	if (isOutport)
 8007702:	b17d      	cbz	r5, 8007724 <loadIoBlockData+0x4c>
		paramTbl = TableStruct->outportParamTable;
 8007704:	6b55      	ldr	r5, [r2, #52]	@ 0x34
		if (paramTbl == 0)
 8007706:	2d00      	cmp	r5, #0
 8007708:	d07e      	beq.n	8007808 <loadIoBlockData+0x130>
	error = getIoParamIndex(paramTbl, id, &tblIndex);
 800770a:	f10d 0206 	add.w	r2, sp, #6
 800770e:	4628      	mov	r0, r5
 8007710:	f7fe fe44 	bl	800639c <getIoParamIndex>
	if (error != ERROR_SUCCESS)
 8007714:	bb40      	cbnz	r0, 8007768 <loadIoBlockData+0x90>
		addr = *(void**)paramTbl[tblIndex].data;
 8007716:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800771a:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800771e:	686b      	ldr	r3, [r5, #4]
 8007720:	6818      	ldr	r0, [r3, #0]
 8007722:	e00d      	b.n	8007740 <loadIoBlockData+0x68>
		paramTbl = TableStruct->inportParamTable;
 8007724:	6b15      	ldr	r5, [r2, #48]	@ 0x30
		if (paramTbl == 0)
 8007726:	2d00      	cmp	r5, #0
 8007728:	d06b      	beq.n	8007802 <loadIoBlockData+0x12a>
	error = getIoParamIndex(paramTbl, id, &tblIndex);
 800772a:	f10d 0206 	add.w	r2, sp, #6
 800772e:	4628      	mov	r0, r5
 8007730:	f7fe fe34 	bl	800639c <getIoParamIndex>
	if (error != ERROR_SUCCESS)
 8007734:	b9c0      	cbnz	r0, 8007768 <loadIoBlockData+0x90>
		addr = paramTbl[tblIndex].data;
 8007736:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800773a:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800773e:	6868      	ldr	r0, [r5, #4]
	size = paramTbl[tblIndex].size;
 8007740:	78ab      	ldrb	r3, [r5, #2]
			protocol->ucFRAMEData[2] = data;
 8007742:	68e1      	ldr	r1, [r4, #12]
	switch (size)
 8007744:	1e5a      	subs	r2, r3, #1
 8007746:	2a07      	cmp	r2, #7
 8007748:	d805      	bhi.n	8007756 <loadIoBlockData+0x7e>
 800774a:	e8df f002 	tbb	[pc, r2]
 800774e:	2f35      	.short	0x2f35
 8007750:	04041a04 	.word	0x04041a04
 8007754:	3804      	.short	0x3804
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007756:	2323      	movs	r3, #35	@ 0x23
	protocol->ucFRAMESize = 2;
 8007758:	2202      	movs	r2, #2
 800775a:	8122      	strh	r2, [r4, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 800775c:	704b      	strb	r3, [r1, #1]
	protocol->pSnd_Enable(protocol);
 800775e:	6863      	ldr	r3, [r4, #4]
 8007760:	4620      	mov	r0, r4
 8007762:	4798      	blx	r3
}
 8007764:	b003      	add	sp, #12
 8007766:	bd30      	pop	{r4, r5, pc}
		switch (error)
 8007768:	2801      	cmp	r0, #1
	protocol->ucFRAMEData[1] = ucErrorNr;
 800776a:	68e3      	ldr	r3, [r4, #12]
		switch (error)
 800776c:	d046      	beq.n	80077fc <loadIoBlockData+0x124>
 800776e:	2802      	cmp	r0, #2
 8007770:	d03d      	beq.n	80077ee <loadIoBlockData+0x116>
	protocol->ucFRAMESize = 2;
 8007772:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007774:	22ff      	movs	r2, #255	@ 0xff
	protocol->ucFRAMESize = 2;
 8007776:	8121      	strh	r1, [r4, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007778:	705a      	strb	r2, [r3, #1]
	protocol->pSnd_Enable(protocol);
 800777a:	6863      	ldr	r3, [r4, #4]
 800777c:	4620      	mov	r0, r4
 800777e:	4798      	blx	r3
}
 8007780:	e7f0      	b.n	8007764 <loadIoBlockData+0x8c>
			uint32 data = *(uint32*)addr;
 8007782:	6802      	ldr	r2, [r0, #0]
			protocol->ucFRAMEData[2] = (uint8)(data & 0xFF);
 8007784:	708a      	strb	r2, [r1, #2]
			protocol->ucFRAMEData[3] = (uint8)((data >> 8) & 0xFF);
 8007786:	68e1      	ldr	r1, [r4, #12]
 8007788:	0a10      	lsrs	r0, r2, #8
 800778a:	70c8      	strb	r0, [r1, #3]
			protocol->ucFRAMEData[4] = (uint8)((data >> 16) & 0xFF);
 800778c:	68e1      	ldr	r1, [r4, #12]
 800778e:	0c10      	lsrs	r0, r2, #16
 8007790:	7108      	strb	r0, [r1, #4]
			protocol->ucFRAMEData[5] = (uint8)((data >> 24) & 0xFF);
 8007792:	68e1      	ldr	r1, [r4, #12]
 8007794:	0e12      	lsrs	r2, r2, #24
 8007796:	714a      	strb	r2, [r1, #5]
	protocol->ucFRAMEData[1] = ERRORSuccess;
 8007798:	68e2      	ldr	r2, [r4, #12]
 800779a:	2100      	movs	r1, #0
 800779c:	7051      	strb	r1, [r2, #1]
	protocol->ucFRAMESize = 2 + size;
 800779e:	3302      	adds	r3, #2
	protocol->pSnd_Enable(protocol);
 80077a0:	6862      	ldr	r2, [r4, #4]
	protocol->ucFRAMESize = 2 + size;
 80077a2:	8123      	strh	r3, [r4, #8]
	protocol->pSnd_Enable(protocol);
 80077a4:	4620      	mov	r0, r4
 80077a6:	4790      	blx	r2
}
 80077a8:	b003      	add	sp, #12
 80077aa:	bd30      	pop	{r4, r5, pc}
			uint16 data = *(uint16*)addr;
 80077ac:	8802      	ldrh	r2, [r0, #0]
			protocol->ucFRAMEData[2] = (uint8)(data & 0xFF);
 80077ae:	708a      	strb	r2, [r1, #2]
			protocol->ucFRAMEData[3] = (uint8)((data >> 8) & 0xFF);
 80077b0:	68e1      	ldr	r1, [r4, #12]
 80077b2:	0a12      	lsrs	r2, r2, #8
 80077b4:	70ca      	strb	r2, [r1, #3]
			break;
 80077b6:	e7ef      	b.n	8007798 <loadIoBlockData+0xc0>
			uint8 data = *(uint8*)addr;
 80077b8:	7802      	ldrb	r2, [r0, #0]
			protocol->ucFRAMEData[2] = data;
 80077ba:	708a      	strb	r2, [r1, #2]
			break;
 80077bc:	e7ec      	b.n	8007798 <loadIoBlockData+0xc0>
			uint64 data = *(uint64*)addr;
 80077be:	e9d0 5200 	ldrd	r5, r2, [r0]
			protocol->ucFRAMEData[2] = (uint8)(data & 0xFF);
 80077c2:	708d      	strb	r5, [r1, #2]
			protocol->ucFRAMEData[3] = (uint8)((data >> 8) & 0xFF);
 80077c4:	68e1      	ldr	r1, [r4, #12]
 80077c6:	0a28      	lsrs	r0, r5, #8
 80077c8:	70c8      	strb	r0, [r1, #3]
			protocol->ucFRAMEData[4] = (uint8)((data >> 16) & 0xFF);
 80077ca:	68e1      	ldr	r1, [r4, #12]
 80077cc:	0c28      	lsrs	r0, r5, #16
 80077ce:	7108      	strb	r0, [r1, #4]
			protocol->ucFRAMEData[5] = (uint8)((data >> 24) & 0xFF);
 80077d0:	68e1      	ldr	r1, [r4, #12]
 80077d2:	0e2d      	lsrs	r5, r5, #24
 80077d4:	714d      	strb	r5, [r1, #5]
			protocol->ucFRAMEData[6] = (uint8)((data >> 32) & 0xFF);
 80077d6:	68e1      	ldr	r1, [r4, #12]
 80077d8:	718a      	strb	r2, [r1, #6]
			protocol->ucFRAMEData[7] = (uint8)((data >> 40) & 0xFF);
 80077da:	68e1      	ldr	r1, [r4, #12]
 80077dc:	0a10      	lsrs	r0, r2, #8
 80077de:	71c8      	strb	r0, [r1, #7]
			protocol->ucFRAMEData[8] = (uint8)((data >> 48) & 0xFF);
 80077e0:	68e1      	ldr	r1, [r4, #12]
 80077e2:	0c10      	lsrs	r0, r2, #16
 80077e4:	7208      	strb	r0, [r1, #8]
			protocol->ucFRAMEData[9] = (uint8)((data >> 56) & 0xFF);
 80077e6:	68e1      	ldr	r1, [r4, #12]
 80077e8:	0e12      	lsrs	r2, r2, #24
 80077ea:	724a      	strb	r2, [r1, #9]
			break;
 80077ec:	e7d4      	b.n	8007798 <loadIoBlockData+0xc0>
	protocol->ucFRAMEData[1] = ucErrorNr;
 80077ee:	2240      	movs	r2, #64	@ 0x40
	protocol->ucFRAMESize = 2;
 80077f0:	8120      	strh	r0, [r4, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 80077f2:	705a      	strb	r2, [r3, #1]
	protocol->pSnd_Enable(protocol);
 80077f4:	6863      	ldr	r3, [r4, #4]
 80077f6:	4620      	mov	r0, r4
 80077f8:	4798      	blx	r3
}
 80077fa:	e7b3      	b.n	8007764 <loadIoBlockData+0x8c>
	protocol->ucFRAMESize = 2;
 80077fc:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 80077fe:	2243      	movs	r2, #67	@ 0x43
 8007800:	e7b9      	b.n	8007776 <loadIoBlockData+0x9e>
	protocol->ucFRAMESize = 2;
 8007802:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007804:	2245      	movs	r2, #69	@ 0x45
 8007806:	e770      	b.n	80076ea <loadIoBlockData+0x12>
	protocol->ucFRAMESize = 2;
 8007808:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 800780a:	2246      	movs	r2, #70	@ 0x46
 800780c:	e76d      	b.n	80076ea <loadIoBlockData+0x12>
 800780e:	bf00      	nop
 8007810:	2000000c 	.word	0x2000000c

08007814 <loadParameter>:
{
 8007814:	b570      	push	{r4, r5, r6, lr}
	if (protocol->ucFRAMESize != 3)
 8007816:	8902      	ldrh	r2, [r0, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007818:	68c3      	ldr	r3, [r0, #12]
	if (protocol->ucFRAMESize != 3)
 800781a:	2a03      	cmp	r2, #3
{
 800781c:	b082      	sub	sp, #8
 800781e:	4604      	mov	r4, r0
	if (protocol->ucFRAMESize != 3)
 8007820:	d008      	beq.n	8007834 <loadParameter+0x20>
	protocol->ucFRAMESize = 2;
 8007822:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007824:	2214      	movs	r2, #20
	protocol->ucFRAMESize = 2;
 8007826:	8101      	strh	r1, [r0, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007828:	705a      	strb	r2, [r3, #1]
	protocol->pSnd_Enable(protocol);
 800782a:	6843      	ldr	r3, [r0, #4]
}
 800782c:	b002      	add	sp, #8
 800782e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	protocol->pSnd_Enable(protocol);
 8007832:	4718      	bx	r3
	error = getBlockParamIndex(TableStruct->TParamTable, paramId, &tblIndex);
 8007834:	4d2d      	ldr	r5, [pc, #180]	@ (80078ec <loadParameter+0xd8>)
 8007836:	f8b3 1001 	ldrh.w	r1, [r3, #1]
 800783a:	682a      	ldr	r2, [r5, #0]
 800783c:	6810      	ldr	r0, [r2, #0]
 800783e:	f10d 0206 	add.w	r2, sp, #6
 8007842:	f7fe fdcf 	bl	80063e4 <getBlockParamIndex>
	if (error != ERROR_SUCCESS)
 8007846:	b160      	cbz	r0, 8007862 <loadParameter+0x4e>
		switch (error)
 8007848:	2801      	cmp	r0, #1
	protocol->ucFRAMEData[1] = ucErrorNr;
 800784a:	68e3      	ldr	r3, [r4, #12]
		switch (error)
 800784c:	d037      	beq.n	80078be <loadParameter+0xaa>
 800784e:	2802      	cmp	r0, #2
 8007850:	d132      	bne.n	80078b8 <loadParameter+0xa4>
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007852:	2240      	movs	r2, #64	@ 0x40
	protocol->ucFRAMESize = 2;
 8007854:	8120      	strh	r0, [r4, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007856:	705a      	strb	r2, [r3, #1]
	protocol->pSnd_Enable(protocol);
 8007858:	6863      	ldr	r3, [r4, #4]
 800785a:	4620      	mov	r0, r4
 800785c:	4798      	blx	r3
}
 800785e:	b002      	add	sp, #8
 8007860:	bd70      	pop	{r4, r5, r6, pc}
	blockAddr = TableStruct->TParamTable[tblIndex].pAdr;
 8007862:	6829      	ldr	r1, [r5, #0]
 8007864:	680b      	ldr	r3, [r1, #0]
	error = getBlockFunctionIndex(TableStruct->TFncTable, blockId, &tblIndex);
 8007866:	6848      	ldr	r0, [r1, #4]
	blockAddr = TableStruct->TParamTable[tblIndex].pAdr;
 8007868:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 800786c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
	error = getBlockFunctionIndex(TableStruct->TFncTable, blockId, &tblIndex);
 8007870:	f10d 0206 	add.w	r2, sp, #6
	blockAddr = TableStruct->TParamTable[tblIndex].pAdr;
 8007874:	685e      	ldr	r6, [r3, #4]
	error = getBlockFunctionIndex(TableStruct->TFncTable, blockId, &tblIndex);
 8007876:	8831      	ldrh	r1, [r6, #0]
 8007878:	f7fe fdfe 	bl	8006478 <getBlockFunctionIndex>
	if (error != ERROR_SUCCESS)
 800787c:	bb10      	cbnz	r0, 80078c4 <loadParameter+0xb0>
	if ((TableStruct->TFncTable)[tblIndex].pFLoad(blockAddr,
 800787e:	682a      	ldr	r2, [r5, #0]
 8007880:	8963      	ldrh	r3, [r4, #10]
 8007882:	6855      	ldr	r5, [r2, #4]
 8007884:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007888:	68e1      	ldr	r1, [r4, #12]
 800788a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800788e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 8007892:	3b02      	subs	r3, #2
 8007894:	68ed      	ldr	r5, [r5, #12]
 8007896:	b29b      	uxth	r3, r3
 8007898:	3102      	adds	r1, #2
 800789a:	4630      	mov	r0, r6
 800789c:	f104 0208 	add.w	r2, r4, #8
 80078a0:	47a8      	blx	r5
 80078a2:	b1b0      	cbz	r0, 80078d2 <loadParameter+0xbe>
	protocol->ucFRAMEData[1] = ucErrorNr;
 80078a4:	68e3      	ldr	r3, [r4, #12]
	protocol->ucFRAMESize = 2;
 80078a6:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 80078a8:	2214      	movs	r2, #20
	protocol->ucFRAMESize = 2;
 80078aa:	8121      	strh	r1, [r4, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 80078ac:	705a      	strb	r2, [r3, #1]
	protocol->pSnd_Enable(protocol);
 80078ae:	6863      	ldr	r3, [r4, #4]
 80078b0:	4620      	mov	r0, r4
 80078b2:	4798      	blx	r3
}
 80078b4:	b002      	add	sp, #8
 80078b6:	bd70      	pop	{r4, r5, r6, pc}
	protocol->ucFRAMESize = 2;
 80078b8:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 80078ba:	22ff      	movs	r2, #255	@ 0xff
 80078bc:	e7f5      	b.n	80078aa <loadParameter+0x96>
	protocol->ucFRAMESize = 2;
 80078be:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 80078c0:	2243      	movs	r2, #67	@ 0x43
 80078c2:	e7f2      	b.n	80078aa <loadParameter+0x96>
		switch (error)
 80078c4:	2801      	cmp	r0, #1
	protocol->ucFRAMEData[1] = ucErrorNr;
 80078c6:	68e3      	ldr	r3, [r4, #12]
		switch (error)
 80078c8:	d00c      	beq.n	80078e4 <loadParameter+0xd0>
 80078ca:	2802      	cmp	r0, #2
 80078cc:	d1f4      	bne.n	80078b8 <loadParameter+0xa4>
	protocol->ucFRAMEData[1] = ucErrorNr;
 80078ce:	2241      	movs	r2, #65	@ 0x41
 80078d0:	e7c0      	b.n	8007854 <loadParameter+0x40>
		protocol->ucFRAMESize += 2; /* add overhead size */
 80078d2:	8923      	ldrh	r3, [r4, #8]
		protocol->ucFRAMEData[1] = ERRORSuccess;
 80078d4:	68e2      	ldr	r2, [r4, #12]
		protocol->ucFRAMESize += 2; /* add overhead size */
 80078d6:	3302      	adds	r3, #2
 80078d8:	8123      	strh	r3, [r4, #8]
		protocol->ucFRAMEData[1] = ERRORSuccess;
 80078da:	7050      	strb	r0, [r2, #1]
		protocol->pSnd_Enable(protocol);
 80078dc:	6863      	ldr	r3, [r4, #4]
 80078de:	4620      	mov	r0, r4
 80078e0:	4798      	blx	r3
 80078e2:	e7bc      	b.n	800785e <loadParameter+0x4a>
	protocol->ucFRAMESize = 2;
 80078e4:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 80078e6:	2244      	movs	r2, #68	@ 0x44
 80078e8:	e7df      	b.n	80078aa <loadParameter+0x96>
 80078ea:	bf00      	nop
 80078ec:	2000000c 	.word	0x2000000c

080078f0 <saveParameter>:
{
 80078f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (protocol->ucFRAMESize < 3)
 80078f2:	8902      	ldrh	r2, [r0, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 80078f4:	68c3      	ldr	r3, [r0, #12]
	if (protocol->ucFRAMESize < 3)
 80078f6:	2a02      	cmp	r2, #2
{
 80078f8:	b083      	sub	sp, #12
 80078fa:	4604      	mov	r4, r0
	if (protocol->ucFRAMESize < 3)
 80078fc:	d808      	bhi.n	8007910 <saveParameter+0x20>
	protocol->ucFRAMESize = 2;
 80078fe:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007900:	2214      	movs	r2, #20
	protocol->ucFRAMESize = 2;
 8007902:	8101      	strh	r1, [r0, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007904:	705a      	strb	r2, [r3, #1]
	protocol->pSnd_Enable(protocol);
 8007906:	6843      	ldr	r3, [r0, #4]
}
 8007908:	b003      	add	sp, #12
 800790a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	protocol->pSnd_Enable(protocol);
 800790e:	4718      	bx	r3
	error = getBlockParamIndex(TableStruct->TParamTable, paramId, &tblIndex);
 8007910:	4e48      	ldr	r6, [pc, #288]	@ (8007a34 <saveParameter+0x144>)
	paramId = (uint16)((protocol->ucFRAMEData[2]<<8) + protocol->ucFRAMEData[1]);
 8007912:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	error = getBlockParamIndex(TableStruct->TParamTable, paramId, &tblIndex);
 8007916:	6833      	ldr	r3, [r6, #0]
 8007918:	f10d 0206 	add.w	r2, sp, #6
 800791c:	6818      	ldr	r0, [r3, #0]
 800791e:	4629      	mov	r1, r5
 8007920:	f7fe fd60 	bl	80063e4 <getBlockParamIndex>
	if (error != ERROR_SUCCESS)
 8007924:	4603      	mov	r3, r0
 8007926:	2800      	cmp	r0, #0
 8007928:	d15a      	bne.n	80079e0 <saveParameter+0xf0>
	blockAddr = TableStruct->TParamTable[tblIndex].pAdr;
 800792a:	6832      	ldr	r2, [r6, #0]
 800792c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8007930:	6811      	ldr	r1, [r2, #0]
 8007932:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007936:	684f      	ldr	r7, [r1, #4]
	if (TableStruct->TLimitSaveFncTable != 0)
 8007938:	6891      	ldr	r1, [r2, #8]
 800793a:	b1a9      	cbz	r1, 8007968 <saveParameter+0x78>
		while ((paramId != (TableStruct->TLimitSaveFncTable)[i].uiParID) && \
 800793c:	6891      	ldr	r1, [r2, #8]
 800793e:	8809      	ldrh	r1, [r1, #0]
 8007940:	42a9      	cmp	r1, r5
 8007942:	4618      	mov	r0, r3
 8007944:	d107      	bne.n	8007956 <saveParameter+0x66>
 8007946:	e00c      	b.n	8007962 <saveParameter+0x72>
 8007948:	6891      	ldr	r1, [r2, #8]
 800794a:	f831 1033 	ldrh.w	r1, [r1, r3, lsl #3]
 800794e:	42a9      	cmp	r1, r5
 8007950:	ea4f 00c3 	mov.w	r0, r3, lsl #3
 8007954:	d005      	beq.n	8007962 <saveParameter+0x72>
				((TableStruct->TLimitSaveFncTable)[i].uiParID != 0))
 8007956:	6891      	ldr	r1, [r2, #8]
		while ((paramId != (TableStruct->TLimitSaveFncTable)[i].uiParID) && \
 8007958:	5a09      	ldrh	r1, [r1, r0]
			i++;
 800795a:	3301      	adds	r3, #1
 800795c:	b29b      	uxth	r3, r3
		while ((paramId != (TableStruct->TLimitSaveFncTable)[i].uiParID) && \
 800795e:	2900      	cmp	r1, #0
 8007960:	d1f2      	bne.n	8007948 <saveParameter+0x58>
		if ((TableStruct->TLimitSaveFncTable)[i].uiParID != 0)
 8007962:	6893      	ldr	r3, [r2, #8]
 8007964:	5a1b      	ldrh	r3, [r3, r0]
 8007966:	bb1b      	cbnz	r3, 80079b0 <saveParameter+0xc0>
	error = getBlockFunctionIndex(TableStruct->TFncTable, blockId, &tblIndex);
 8007968:	6850      	ldr	r0, [r2, #4]
 800796a:	8839      	ldrh	r1, [r7, #0]
 800796c:	f10d 0206 	add.w	r2, sp, #6
 8007970:	f7fe fd82 	bl	8006478 <getBlockFunctionIndex>
	if (error != ERROR_SUCCESS)
 8007974:	2800      	cmp	r0, #0
 8007976:	d12b      	bne.n	80079d0 <saveParameter+0xe0>
	if ((TableStruct->TFncTable)[tblIndex].pFSave(blockAddr, &(protocol->ucFRAMEData[3]), protocol->ucFRAMESize-3))
 8007978:	6833      	ldr	r3, [r6, #0]
 800797a:	8922      	ldrh	r2, [r4, #8]
 800797c:	685d      	ldr	r5, [r3, #4]
 800797e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8007982:	68e1      	ldr	r1, [r4, #12]
 8007984:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007988:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800798c:	3a03      	subs	r2, #3
 800798e:	692b      	ldr	r3, [r5, #16]
 8007990:	b292      	uxth	r2, r2
 8007992:	3103      	adds	r1, #3
 8007994:	4638      	mov	r0, r7
 8007996:	4798      	blx	r3
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007998:	68e3      	ldr	r3, [r4, #12]
	if ((TableStruct->TFncTable)[tblIndex].pFSave(blockAddr, &(protocol->ucFRAMEData[3]), protocol->ucFRAMESize-3))
 800799a:	2800      	cmp	r0, #0
 800799c:	d02e      	beq.n	80079fc <saveParameter+0x10c>
	protocol->ucFRAMESize = 2;
 800799e:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 80079a0:	2214      	movs	r2, #20
	protocol->ucFRAMESize = 2;
 80079a2:	8121      	strh	r1, [r4, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 80079a4:	705a      	strb	r2, [r3, #1]
	protocol->pSnd_Enable(protocol);
 80079a6:	6863      	ldr	r3, [r4, #4]
 80079a8:	4620      	mov	r0, r4
 80079aa:	4798      	blx	r3
}
 80079ac:	b003      	add	sp, #12
 80079ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if ((TableStruct->TLimitSaveFncTable)[i].pFLimitSave(blockAddr, &(protocol->ucFRAMEData[3]), protocol->ucFRAMESize-3))
 80079b0:	6893      	ldr	r3, [r2, #8]
 80079b2:	8922      	ldrh	r2, [r4, #8]
 80079b4:	68e1      	ldr	r1, [r4, #12]
 80079b6:	4403      	add	r3, r0
 80079b8:	3a03      	subs	r2, #3
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	b292      	uxth	r2, r2
 80079be:	3103      	adds	r1, #3
 80079c0:	4638      	mov	r0, r7
 80079c2:	4798      	blx	r3
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d0f1      	beq.n	80079ac <saveParameter+0xbc>
	protocol->ucFRAMEData[1] = ucErrorNr;
 80079c8:	68e3      	ldr	r3, [r4, #12]
	protocol->ucFRAMESize = 2;
 80079ca:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 80079cc:	2242      	movs	r2, #66	@ 0x42
 80079ce:	e7e8      	b.n	80079a2 <saveParameter+0xb2>
		switch (error)
 80079d0:	2801      	cmp	r0, #1
	protocol->ucFRAMEData[1] = ucErrorNr;
 80079d2:	68e3      	ldr	r3, [r4, #12]
		switch (error)
 80079d4:	d02a      	beq.n	8007a2c <saveParameter+0x13c>
 80079d6:	2802      	cmp	r0, #2
 80079d8:	d021      	beq.n	8007a1e <saveParameter+0x12e>
	protocol->ucFRAMESize = 2;
 80079da:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 80079dc:	22ff      	movs	r2, #255	@ 0xff
 80079de:	e7e0      	b.n	80079a2 <saveParameter+0xb2>
		switch (error)
 80079e0:	2801      	cmp	r0, #1
	protocol->ucFRAMEData[1] = ucErrorNr;
 80079e2:	68e2      	ldr	r2, [r4, #12]
		switch (error)
 80079e4:	d018      	beq.n	8007a18 <saveParameter+0x128>
 80079e6:	2802      	cmp	r0, #2
 80079e8:	d00f      	beq.n	8007a0a <saveParameter+0x11a>
	protocol->ucFRAMESize = 2;
 80079ea:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 80079ec:	23ff      	movs	r3, #255	@ 0xff
	protocol->ucFRAMESize = 2;
 80079ee:	8121      	strh	r1, [r4, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 80079f0:	7053      	strb	r3, [r2, #1]
	protocol->pSnd_Enable(protocol);
 80079f2:	6863      	ldr	r3, [r4, #4]
 80079f4:	4620      	mov	r0, r4
 80079f6:	4798      	blx	r3
}
 80079f8:	b003      	add	sp, #12
 80079fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		protocol->ucFRAMESize = 2;
 80079fc:	2202      	movs	r2, #2
 80079fe:	8122      	strh	r2, [r4, #8]
		protocol->ucFRAMEData[1] = ERRORSuccess;
 8007a00:	7058      	strb	r0, [r3, #1]
		protocol->pSnd_Enable(protocol);
 8007a02:	6863      	ldr	r3, [r4, #4]
 8007a04:	4620      	mov	r0, r4
 8007a06:	4798      	blx	r3
 8007a08:	e7d0      	b.n	80079ac <saveParameter+0xbc>
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007a0a:	2140      	movs	r1, #64	@ 0x40
	protocol->ucFRAMESize = 2;
 8007a0c:	8120      	strh	r0, [r4, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007a0e:	7051      	strb	r1, [r2, #1]
	protocol->pSnd_Enable(protocol);
 8007a10:	6863      	ldr	r3, [r4, #4]
 8007a12:	4620      	mov	r0, r4
 8007a14:	4798      	blx	r3
}
 8007a16:	e7c9      	b.n	80079ac <saveParameter+0xbc>
	protocol->ucFRAMESize = 2;
 8007a18:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007a1a:	2343      	movs	r3, #67	@ 0x43
 8007a1c:	e7e7      	b.n	80079ee <saveParameter+0xfe>
 8007a1e:	2241      	movs	r2, #65	@ 0x41
	protocol->ucFRAMESize = 2;
 8007a20:	8120      	strh	r0, [r4, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007a22:	705a      	strb	r2, [r3, #1]
	protocol->pSnd_Enable(protocol);
 8007a24:	6863      	ldr	r3, [r4, #4]
 8007a26:	4620      	mov	r0, r4
 8007a28:	4798      	blx	r3
}
 8007a2a:	e7bf      	b.n	80079ac <saveParameter+0xbc>
	protocol->ucFRAMESize = 2;
 8007a2c:	2102      	movs	r1, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007a2e:	2244      	movs	r2, #68	@ 0x44
 8007a30:	e7b7      	b.n	80079a2 <saveParameter+0xb2>
 8007a32:	bf00      	nop
 8007a34:	2000000c 	.word	0x2000000c

08007a38 <getDeviceInfo>:
	if (protocol->ucMaxCommSize < 47)
 8007a38:	8941      	ldrh	r1, [r0, #10]
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007a3a:	68c2      	ldr	r2, [r0, #12]
	if (protocol->ucMaxCommSize < 47)
 8007a3c:	292e      	cmp	r1, #46	@ 0x2e
{
 8007a3e:	b430      	push	{r4, r5}
 8007a40:	4603      	mov	r3, r0
	if (protocol->ucMaxCommSize < 47)
 8007a42:	f240 80b6 	bls.w	8007bb2 <getDeviceInfo+0x17a>
	protocol->ucFRAMEData[1] = ERRORSuccess;
 8007a46:	2100      	movs	r1, #0
	protocol->ucFRAMESize = 47;
 8007a48:	202f      	movs	r0, #47	@ 0x2f
 8007a4a:	8118      	strh	r0, [r3, #8]
	protocol->ucFRAMEData[1] = ERRORSuccess;
 8007a4c:	7051      	strb	r1, [r2, #1]
	protocol->ucFRAMEData[2] = (uint8)(DEVINFO_BOOTLOADER_VERSION & 0x00FF);
 8007a4e:	68da      	ldr	r2, [r3, #12]
			(uint8)(TableStruct->framePrgVersion & (uint16)0x00FF);
 8007a50:	4c60      	ldr	r4, [pc, #384]	@ (8007bd4 <getDeviceInfo+0x19c>)
	protocol->ucFRAMEData[2] = (uint8)(DEVINFO_BOOTLOADER_VERSION & 0x00FF);
 8007a52:	2006      	movs	r0, #6
 8007a54:	7090      	strb	r0, [r2, #2]
	protocol->ucFRAMEData[3] = (uint8)(DEVINFO_BOOTLOADER_VERSION >> 8);
 8007a56:	68da      	ldr	r2, [r3, #12]
 8007a58:	70d1      	strb	r1, [r2, #3]
			(uint8)(TableStruct->framePrgVersion & (uint16)0x00FF);
 8007a5a:	6822      	ldr	r2, [r4, #0]
	protocol->ucFRAMEData[4] = \
 8007a5c:	68d9      	ldr	r1, [r3, #12]
			(uint8)(TableStruct->framePrgVersion & (uint16)0x00FF);
 8007a5e:	8c10      	ldrh	r0, [r2, #32]
 8007a60:	7108      	strb	r0, [r1, #4]
	protocol->ucFRAMEData[5] = (uint8)(TableStruct->framePrgVersion >> 8);
 8007a62:	8c11      	ldrh	r1, [r2, #32]
 8007a64:	68d8      	ldr	r0, [r3, #12]
 8007a66:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8007a6a:	7141      	strb	r1, [r0, #5]
	protocol->ucFRAMEData[6] = (uint8)(protocol->ucMaxCommSize & 0xFF);
 8007a6c:	68d9      	ldr	r1, [r3, #12]
 8007a6e:	8958      	ldrh	r0, [r3, #10]
 8007a70:	7188      	strb	r0, [r1, #6]
	protocol->ucFRAMEData[7] = (uint8)(protocol->ucMaxCommSize >> 8);
 8007a72:	8959      	ldrh	r1, [r3, #10]
 8007a74:	68d8      	ldr	r0, [r3, #12]
 8007a76:	0a09      	lsrs	r1, r1, #8
 8007a78:	71c1      	strb	r1, [r0, #7]
	protocol->ucFRAMEData[8] = (uint8)(DEVINFO_PROCESSOR_ID & 0x00FF);
 8007a7a:	68d9      	ldr	r1, [r3, #12]
 8007a7c:	2081      	movs	r0, #129	@ 0x81
 8007a7e:	7208      	strb	r0, [r1, #8]
	protocol->ucFRAMEData[9] = (uint8)(DEVINFO_PROCESSOR_ID >> 8);
 8007a80:	68d9      	ldr	r1, [r3, #12]
 8007a82:	2003      	movs	r0, #3
 8007a84:	7248      	strb	r0, [r1, #9]
	protocol->ucFRAMEData[10] = __DATE__[0];
 8007a86:	68d9      	ldr	r1, [r3, #12]
 8007a88:	204d      	movs	r0, #77	@ 0x4d
 8007a8a:	7288      	strb	r0, [r1, #10]
	protocol->ucFRAMEData[11] = __DATE__[1];
 8007a8c:	68d9      	ldr	r1, [r3, #12]
 8007a8e:	2061      	movs	r0, #97	@ 0x61
 8007a90:	72c8      	strb	r0, [r1, #11]
	protocol->ucFRAMEData[12] = __DATE__[2];
 8007a92:	68d9      	ldr	r1, [r3, #12]
 8007a94:	2072      	movs	r0, #114	@ 0x72
 8007a96:	7308      	strb	r0, [r1, #12]
	protocol->ucFRAMEData[13] = __DATE__[4];
 8007a98:	68d8      	ldr	r0, [r3, #12]
 8007a9a:	2132      	movs	r1, #50	@ 0x32
 8007a9c:	7341      	strb	r1, [r0, #13]
	protocol->ucFRAMEData[14] = __DATE__[5];
 8007a9e:	68d8      	ldr	r0, [r3, #12]
 8007aa0:	f04f 0c35 	mov.w	ip, #53	@ 0x35
 8007aa4:	f880 c00e 	strb.w	ip, [r0, #14]
	protocol->ucFRAMEData[15] = __DATE__[7];
 8007aa8:	68d8      	ldr	r0, [r3, #12]
 8007aaa:	73c1      	strb	r1, [r0, #15]
	protocol->ucFRAMEData[16] = __DATE__[8];
 8007aac:	68dd      	ldr	r5, [r3, #12]
 8007aae:	2030      	movs	r0, #48	@ 0x30
 8007ab0:	7428      	strb	r0, [r5, #16]
	protocol->ucFRAMEData[17] = __DATE__[9];
 8007ab2:	68dd      	ldr	r5, [r3, #12]
 8007ab4:	7469      	strb	r1, [r5, #17]
	protocol->ucFRAMEData[18] = __DATE__[10];
 8007ab6:	68d9      	ldr	r1, [r3, #12]
 8007ab8:	f881 c012 	strb.w	ip, [r1, #18]
	protocol->ucFRAMEData[19] = __TIME__[0];
 8007abc:	68d9      	ldr	r1, [r3, #12]
 8007abe:	f04f 0c31 	mov.w	ip, #49	@ 0x31
 8007ac2:	f881 c013 	strb.w	ip, [r1, #19]
	protocol->ucFRAMEData[20] = __TIME__[1];
 8007ac6:	68dd      	ldr	r5, [r3, #12]
 8007ac8:	2136      	movs	r1, #54	@ 0x36
 8007aca:	7529      	strb	r1, [r5, #20]
	protocol->ucFRAMEData[21] = __TIME__[3];
 8007acc:	68dd      	ldr	r5, [r3, #12]
 8007ace:	7568      	strb	r0, [r5, #21]
	protocol->ucFRAMEData[22] = __TIME__[4];
 8007ad0:	68d8      	ldr	r0, [r3, #12]
 8007ad2:	7581      	strb	r1, [r0, #22]
	if (TableStruct->framePrgCompDateTime == 0)
 8007ad4:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8007ad6:	2900      	cmp	r1, #0
 8007ad8:	d072      	beq.n	8007bc0 <getDeviceInfo+0x188>
		protocol->ucFRAMEData[23] = TableStruct->framePrgCompDateTime[0];
 8007ada:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8007adc:	68d9      	ldr	r1, [r3, #12]
 8007ade:	7800      	ldrb	r0, [r0, #0]
 8007ae0:	75c8      	strb	r0, [r1, #23]
		protocol->ucFRAMEData[24] = TableStruct->framePrgCompDateTime[1];
 8007ae2:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8007ae4:	68d9      	ldr	r1, [r3, #12]
 8007ae6:	7840      	ldrb	r0, [r0, #1]
 8007ae8:	7608      	strb	r0, [r1, #24]
		protocol->ucFRAMEData[25] = TableStruct->framePrgCompDateTime[2];
 8007aea:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8007aec:	68d9      	ldr	r1, [r3, #12]
 8007aee:	7880      	ldrb	r0, [r0, #2]
 8007af0:	7648      	strb	r0, [r1, #25]
		protocol->ucFRAMEData[26] = TableStruct->framePrgCompDateTime[4];
 8007af2:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8007af4:	68d9      	ldr	r1, [r3, #12]
 8007af6:	7900      	ldrb	r0, [r0, #4]
 8007af8:	7688      	strb	r0, [r1, #26]
		protocol->ucFRAMEData[27] = TableStruct->framePrgCompDateTime[5];
 8007afa:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8007afc:	68d9      	ldr	r1, [r3, #12]
 8007afe:	7940      	ldrb	r0, [r0, #5]
 8007b00:	76c8      	strb	r0, [r1, #27]
		protocol->ucFRAMEData[28] = TableStruct->framePrgCompDateTime[7];
 8007b02:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8007b04:	68d9      	ldr	r1, [r3, #12]
 8007b06:	79c0      	ldrb	r0, [r0, #7]
 8007b08:	7708      	strb	r0, [r1, #28]
		protocol->ucFRAMEData[29] = TableStruct->framePrgCompDateTime[8];
 8007b0a:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8007b0c:	68d9      	ldr	r1, [r3, #12]
 8007b0e:	7a00      	ldrb	r0, [r0, #8]
 8007b10:	7748      	strb	r0, [r1, #29]
		protocol->ucFRAMEData[30] = TableStruct->framePrgCompDateTime[9];
 8007b12:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8007b14:	68d9      	ldr	r1, [r3, #12]
 8007b16:	7a40      	ldrb	r0, [r0, #9]
 8007b18:	7788      	strb	r0, [r1, #30]
		protocol->ucFRAMEData[31] = TableStruct->framePrgCompDateTime[10];
 8007b1a:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8007b1c:	68d9      	ldr	r1, [r3, #12]
 8007b1e:	7a80      	ldrb	r0, [r0, #10]
 8007b20:	77c8      	strb	r0, [r1, #31]
		protocol->ucFRAMEData[32] = TableStruct->framePrgCompDateTime[11];
 8007b22:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8007b24:	68d9      	ldr	r1, [r3, #12]
 8007b26:	7ac0      	ldrb	r0, [r0, #11]
 8007b28:	f881 0020 	strb.w	r0, [r1, #32]
		protocol->ucFRAMEData[33] = TableStruct->framePrgCompDateTime[12];
 8007b2c:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8007b2e:	68d9      	ldr	r1, [r3, #12]
 8007b30:	7b00      	ldrb	r0, [r0, #12]
 8007b32:	f881 0021 	strb.w	r0, [r1, #33]	@ 0x21
		protocol->ucFRAMEData[34] = TableStruct->framePrgCompDateTime[14];
 8007b36:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8007b38:	68d9      	ldr	r1, [r3, #12]
 8007b3a:	7b80      	ldrb	r0, [r0, #14]
 8007b3c:	f881 0022 	strb.w	r0, [r1, #34]	@ 0x22
		protocol->ucFRAMEData[35] = TableStruct->framePrgCompDateTime[15];
 8007b40:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8007b42:	68d9      	ldr	r1, [r3, #12]
 8007b44:	7bc0      	ldrb	r0, [r0, #15]
 8007b46:	f881 0023 	strb.w	r0, [r1, #35]	@ 0x23
	protocol->ucFRAMEData[36] = (uint8)(TableStruct->DSPState & 0x00FF);
 8007b4a:	68d9      	ldr	r1, [r3, #12]
 8007b4c:	7b10      	ldrb	r0, [r2, #12]
 8007b4e:	f881 0024 	strb.w	r0, [r1, #36]	@ 0x24
	protocol->ucFRAMEData[37] = (uint8)(TableStruct->eventType & 0x00FF);
 8007b52:	68d9      	ldr	r1, [r3, #12]
 8007b54:	89d0      	ldrh	r0, [r2, #14]
 8007b56:	f881 0025 	strb.w	r0, [r1, #37]	@ 0x25
	protocol->ucFRAMEData[38] = (uint8)(TableStruct->eventType >> 8);
 8007b5a:	89d1      	ldrh	r1, [r2, #14]
 8007b5c:	68d8      	ldr	r0, [r3, #12]
 8007b5e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8007b62:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
	protocol->ucFRAMEData[39] = (uint8)(TableStruct->eventId & 0x00FF);
 8007b66:	68d9      	ldr	r1, [r3, #12]
 8007b68:	6910      	ldr	r0, [r2, #16]
 8007b6a:	f881 0027 	strb.w	r0, [r1, #39]	@ 0x27
	protocol->ucFRAMEData[40] = (uint8)(TableStruct->eventId >> 8);
 8007b6e:	6911      	ldr	r1, [r2, #16]
 8007b70:	68d8      	ldr	r0, [r3, #12]
 8007b72:	0a09      	lsrs	r1, r1, #8
 8007b74:	f880 1028 	strb.w	r1, [r0, #40]	@ 0x28
	protocol->ucFRAMEData[41] = (uint8)(TableStruct->eventId >> 16);
 8007b78:	6911      	ldr	r1, [r2, #16]
 8007b7a:	68d8      	ldr	r0, [r3, #12]
 8007b7c:	0c09      	lsrs	r1, r1, #16
 8007b7e:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
	protocol->ucFRAMEData[42] = (uint8)(TableStruct->eventId >> 24);
 8007b82:	6911      	ldr	r1, [r2, #16]
 8007b84:	68d8      	ldr	r0, [r3, #12]
 8007b86:	0e09      	lsrs	r1, r1, #24
 8007b88:	f880 102a 	strb.w	r1, [r0, #42]	@ 0x2a
	protocol->ucFRAMEData[43] = (uint8)(tableStructAddr & 0xFF);
 8007b8c:	68d9      	ldr	r1, [r3, #12]
 8007b8e:	f881 202b 	strb.w	r2, [r1, #43]	@ 0x2b
	protocol->ucFRAMEData[44] = (uint8)((tableStructAddr >> 8) & 0xFF);
 8007b92:	68d9      	ldr	r1, [r3, #12]
 8007b94:	0a14      	lsrs	r4, r2, #8
 8007b96:	f881 402c 	strb.w	r4, [r1, #44]	@ 0x2c
	protocol->ucFRAMEData[45] = (uint8)((tableStructAddr >> 16) & 0xFF);
 8007b9a:	68d9      	ldr	r1, [r3, #12]
 8007b9c:	0c10      	lsrs	r0, r2, #16
 8007b9e:	f881 002d 	strb.w	r0, [r1, #45]	@ 0x2d
	protocol->ucFRAMEData[46] = (uint8)((tableStructAddr >> 24) & 0xFF);
 8007ba2:	68d9      	ldr	r1, [r3, #12]
 8007ba4:	0e12      	lsrs	r2, r2, #24
 8007ba6:	f881 202e 	strb.w	r2, [r1, #46]	@ 0x2e
	protocol->pSnd_Enable(protocol);
 8007baa:	4618      	mov	r0, r3
 8007bac:	685b      	ldr	r3, [r3, #4]
}
 8007bae:	bc30      	pop	{r4, r5}
	protocol->pSnd_Enable(protocol);
 8007bb0:	4718      	bx	r3
	protocol->ucFRAMESize = 2;
 8007bb2:	2402      	movs	r4, #2
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007bb4:	2115      	movs	r1, #21
	protocol->ucFRAMESize = 2;
 8007bb6:	8104      	strh	r4, [r0, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007bb8:	7051      	strb	r1, [r2, #1]
}
 8007bba:	bc30      	pop	{r4, r5}
	protocol->pSnd_Enable(protocol);
 8007bbc:	6843      	ldr	r3, [r0, #4]
 8007bbe:	4718      	bx	r3
 8007bc0:	2223      	movs	r2, #35	@ 0x23
			protocol->ucFRAMEData[23+i] = '-';
 8007bc2:	202d      	movs	r0, #45	@ 0x2d
 8007bc4:	68d9      	ldr	r1, [r3, #12]
 8007bc6:	5488      	strb	r0, [r1, r2]
		} while (i-- > 0);
 8007bc8:	3a01      	subs	r2, #1
 8007bca:	2a16      	cmp	r2, #22
 8007bcc:	d1fa      	bne.n	8007bc4 <getDeviceInfo+0x18c>
	protocol->ucFRAMEData[36] = (uint8)(TableStruct->DSPState & 0x00FF);
 8007bce:	6822      	ldr	r2, [r4, #0]
 8007bd0:	e7bb      	b.n	8007b4a <getDeviceInfo+0x112>
 8007bd2:	bf00      	nop
 8007bd4:	2000000c 	.word	0x2000000c

08007bd8 <sendError>:
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007bd8:	68c2      	ldr	r2, [r0, #12]
	protocol->ucFRAMESize = 2;
 8007bda:	f04f 0c02 	mov.w	ip, #2
 8007bde:	f8a0 c008 	strh.w	ip, [r0, #8]
	protocol->ucFRAMEData[1] = ucErrorNr;
 8007be2:	7051      	strb	r1, [r2, #1]
	protocol->pSnd_Enable(protocol);
 8007be4:	6843      	ldr	r3, [r0, #4]
 8007be6:	4718      	bx	r3

08007be8 <initServiceTable>:
 */
void initServiceTable(tProtocol* protocol)
{
	uint16 i;

	for (i = 0; i <= MAX_SERVICE_ID; i++)
 8007be8:	4b05      	ldr	r3, [pc, #20]	@ (8007c00 <initServiceTable+0x18>)
 8007bea:	4906      	ldr	r1, [pc, #24]	@ (8007c04 <initServiceTable+0x1c>)
 8007bec:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
	{
		serviceTable[i] = sendSvNotAvailable;
 8007bf0:	f843 1f04 	str.w	r1, [r3, #4]!
	for (i = 0; i <= MAX_SERVICE_ID; i++)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d1fb      	bne.n	8007bf0 <initServiceTable+0x8>
	}

	/* adds service table pointer to protocol structure */
	protocol->pServiceTable = (void*)serviceTable;
 8007bf8:	4b03      	ldr	r3, [pc, #12]	@ (8007c08 <initServiceTable+0x20>)
 8007bfa:	6103      	str	r3, [r0, #16]
}
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	2000165c 	.word	0x2000165c
 8007c04:	080074f5 	.word	0x080074f5
 8007c08:	20001660 	.word	0x20001660

08007c0c <addCoreServices>:

/*
 * Adds core services to service table.
 */
void addCoreServices(tProtocol* protocol)
{
 8007c0c:	b410      	push	{r4}
	tSERVICEFunction* svTable = (tSERVICEFunction*)protocol->pServiceTable;
 8007c0e:	6903      	ldr	r3, [r0, #16]
	svTable[SV_ID_SVDEVICEINFO] = getDeviceInfo;
 8007c10:	4c09      	ldr	r4, [pc, #36]	@ (8007c38 <addCoreServices+0x2c>)
	svTable[SV_ID_GETTARGETSTATE] = getTargetState;
 8007c12:	480a      	ldr	r0, [pc, #40]	@ (8007c3c <addCoreServices+0x30>)
	svTable[SV_ID_SETTARGETSTATE] = setTargetState;
 8007c14:	490a      	ldr	r1, [pc, #40]	@ (8007c40 <addCoreServices+0x34>)
	svTable[SV_ID_SVSAVEPARAM] = saveParameter;
 8007c16:	4a0b      	ldr	r2, [pc, #44]	@ (8007c44 <addCoreServices+0x38>)
	svTable[SV_ID_SETTARGETSTATE] = setTargetState;
 8007c18:	6099      	str	r1, [r3, #8]
	svTable[SV_ID_GETTARGETSTATE] = getTargetState;
 8007c1a:	e9c3 4000 	strd	r4, r0, [r3]
	svTable[SV_ID_SVLOADPARAM] = loadParameter;
	svTable[SV_ID_LOAD_IO_PARAM] = loadIoBlockData;
	svTable[SV_ID_SAVEMASKPARAM] = saveMaskParameter;
 8007c1e:	490a      	ldr	r1, [pc, #40]	@ (8007c48 <addCoreServices+0x3c>)
	svTable[SV_ID_LOAD_IO_PARAM] = loadIoBlockData;
 8007c20:	480a      	ldr	r0, [pc, #40]	@ (8007c4c <addCoreServices+0x40>)
	svTable[SV_ID_SVLOADPARAM] = loadParameter;
 8007c22:	4c0b      	ldr	r4, [pc, #44]	@ (8007c50 <addCoreServices+0x44>)
	svTable[SV_ID_SVSAVEPARAM] = saveParameter;
 8007c24:	649a      	str	r2, [r3, #72]	@ 0x48
	svTable[SV_ID_LOADMASKPARAM] = loadMaskParameter;
 8007c26:	4a0b      	ldr	r2, [pc, #44]	@ (8007c54 <addCoreServices+0x48>)
	svTable[SV_ID_SVLOADPARAM] = loadParameter;
 8007c28:	645c      	str	r4, [r3, #68]	@ 0x44
	svTable[SV_ID_SAVEMASKPARAM] = saveMaskParameter;
 8007c2a:	e9c3 0113 	strd	r0, r1, [r3, #76]	@ 0x4c
}
 8007c2e:	f85d 4b04 	ldr.w	r4, [sp], #4
	svTable[SV_ID_LOADMASKPARAM] = loadMaskParameter;
 8007c32:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	08007a39 	.word	0x08007a39
 8007c3c:	08007569 	.word	0x08007569
 8007c40:	08007509 	.word	0x08007509
 8007c44:	080078f1 	.word	0x080078f1
 8007c48:	08007635 	.word	0x08007635
 8007c4c:	080076d9 	.word	0x080076d9
 8007c50:	08007815 	.word	0x08007815
 8007c54:	08007589 	.word	0x08007589

08007c58 <initTableStruct>:
/* init tablestruct */
void initTableStruct(void)
{
	uint8 i;

	TableStruct->TParamTable = (tParameterTable*)0;
 8007c58:	4b09      	ldr	r3, [pc, #36]	@ (8007c80 <initTableStruct+0x28>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	601a      	str	r2, [r3, #0]
	TableStruct->TFncTable = (tBlockFunctions*)0;
 8007c60:	605a      	str	r2, [r3, #4]
	TableStruct->TLimitSaveFncTable = (tLimitSaveFunctionTable*)0;
 8007c62:	609a      	str	r2, [r3, #8]

	TableStruct->DSPState = BOOTLOADER_STATE;
 8007c64:	731a      	strb	r2, [r3, #12]
	TableStruct->eventType = (uint16)0x0000;
 8007c66:	81da      	strh	r2, [r3, #14]
	TableStruct->eventId = (uint32)0x00000000;
 8007c68:	611a      	str	r2, [r3, #16]

	TableStruct->protocolCount = (uint16)0;
 8007c6a:	829a      	strh	r2, [r3, #20]
	for (i = 0; i < MAX_PROTOCOLS; i++)
	{
		TableStruct->protocols[i] = (tProtocol*)0;
 8007c6c:	619a      	str	r2, [r3, #24]
 8007c6e:	61da      	str	r2, [r3, #28]
	}

	TableStruct->framePrgVersion = (uint16)0x0000;
 8007c70:	841a      	strh	r2, [r3, #32]
	TableStruct->framePrgCompDateTime = (uint8*)0;
 8007c72:	625a      	str	r2, [r3, #36]	@ 0x24

	TableStruct->piScope = (SCOPE_MAIN*)0;
 8007c74:	629a      	str	r2, [r3, #40]	@ 0x28
	TableStruct->dynamicCodeData = (tDynamicCodeData*)0;
 8007c76:	62da      	str	r2, [r3, #44]	@ 0x2c

	TableStruct->inportParamTable = (tIoParamIdEntry*)0;
 8007c78:	631a      	str	r2, [r3, #48]	@ 0x30
	TableStruct->outportParamTable = (tIoParamIdEntry*)0;
 8007c7a:	635a      	str	r2, [r3, #52]	@ 0x34
	TableStruct->maskParameterTable = (tMaskParameterEntry*)0;
 8007c7c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007c7e:	4770      	bx	lr
 8007c80:	2000000c 	.word	0x2000000c

08007c84 <addTableStructProtocol>:


/* add tProtocol to TableStruct */
void addTableStructProtocol(tProtocol* linkProtocol)
{
	if (TableStruct->protocolCount < MAX_PROTOCOLS)
 8007c84:	4b07      	ldr	r3, [pc, #28]	@ (8007ca4 <addTableStructProtocol+0x20>)
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	8a93      	ldrh	r3, [r2, #20]
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d807      	bhi.n	8007ca0 <addTableStructProtocol+0x1c>
	{
		TableStruct->protocols[TableStruct->protocolCount++] = linkProtocol;
 8007c90:	8a93      	ldrh	r3, [r2, #20]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	1c59      	adds	r1, r3, #1
 8007c96:	3306      	adds	r3, #6
 8007c98:	b289      	uxth	r1, r1
 8007c9a:	8291      	strh	r1, [r2, #20]
 8007c9c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	}
}
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	2000000c 	.word	0x2000000c

08007ca8 <initVersionInfo>:
} compilationDate = { __DATE__, __TIME__ };

void initVersionInfo(volatile tTableStruct* tblStruct, uint16 appVersion)
{
	tblStruct->framePrgVersion = appVersion;
	tblStruct->framePrgCompDateTime = (uint8*)&compilationDate;
 8007ca8:	4b01      	ldr	r3, [pc, #4]	@ (8007cb0 <initVersionInfo+0x8>)
	tblStruct->framePrgVersion = appVersion;
 8007caa:	8401      	strh	r1, [r0, #32]
	tblStruct->framePrgCompDateTime = (uint8*)&compilationDate;
 8007cac:	6243      	str	r3, [r0, #36]	@ 0x24
}
 8007cae:	4770      	bx	lr
 8007cb0:	08009328 	.word	0x08009328

08007cb4 <X2C_Init>:

/**********************************************************************************************************************/
/**                                                  Initialization                                                  **/
/**********************************************************************************************************************/
void X2C_Init(void)
{
 8007cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    /* Block: And                                                                                                     */

    /* Block: CFiIa                                                                                                   */
    /* Gain = 0.0677                                                                                                  */
    x2cModel.blocks.bCFiIa.V = 0.0677;
 8007cb8:	4cf1      	ldr	r4, [pc, #964]	@ (8008080 <X2C_Init+0x3cc>)
 8007cba:	49f2      	ldr	r1, [pc, #968]	@ (8008084 <X2C_Init+0x3d0>)
 8007cbc:	62e1      	str	r1, [r4, #44]	@ 0x2c
    /* Gain = 0.0677                                                                                                  */
    x2cModel.blocks.bCFiOmega.V = 0.0677;

    /* Block: CoPulseGenOffset                                                                                        */
    /* Value = 1.0                                                                                                    */
    x2cModel.blocks.bCoPulseGenOffset.K = 1;
 8007cbe:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8007cc2:	64a2      	str	r2, [r4, #72]	@ 0x48
    x2cModel.blocks.bPhi2Rpm.phi_old = 0;
    x2cModel.blocks.bPhi2Rpm.n_old = 0;

    /* Block: PulseGenAmplitude                                                                                       */
    /* Gain = 1.0                                                                                                     */
    x2cModel.blocks.bPulseGenAmplitude.V = 1;
 8007cc4:	f8c4 21a8 	str.w	r2, [r4, #424]	@ 0x1a8

    /* Block: PulseGenConst1                                                                                          */
    /* Value = 1.0                                                                                                    */
    x2cModel.blocks.bPulseGenConst1.K = 1;
 8007cc8:	f8c4 21b4 	str.w	r2, [r4, #436]	@ 0x1b4
    /* Value = 0.0                                                                                                    */
    x2cModel.blocks.bPulseGenDCVal.K = 0;

    /* Block: PulseGenFreq                                                                                            */
    /* Value = 0.2                                                                                                    */
    x2cModel.blocks.bPulseGenFreq.K = 0.2;
 8007ccc:	4aee      	ldr	r2, [pc, #952]	@ (8008088 <X2C_Init+0x3d4>)
 8007cce:	f8c4 21cc 	str.w	r2, [r4, #460]	@ 0x1cc
    x2cModel.blocks.bCurrentIaFilter.b0 = 0.00313666301504589;
 8007cd2:	4aee      	ldr	r2, [pc, #952]	@ (800808c <X2C_Init+0x3d8>)
 8007cd4:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
    x2cModel.blocks.bOmegaFilter.b0 = 0.00313666301504589;
 8007cd8:	f8c4 2140 	str.w	r2, [r4, #320]	@ 0x140
    x2cModel.blocks.bCurrentIaFilter.a0 = -0.9968633369849541;
 8007cdc:	4aec      	ldr	r2, [pc, #944]	@ (8008090 <X2C_Init+0x3dc>)
 8007cde:	f8c4 20a4 	str.w	r2, [r4, #164]	@ 0xa4
    x2cModel.blocks.bOmegaFilter.a0 = -0.9968633369849541;
 8007ce2:	f8c4 2148 	str.w	r2, [r4, #328]	@ 0x148
    x2cModel.blocks.bCurrentReg.b0 = 0.04133333333333333;
 8007ce6:	4aeb      	ldr	r2, [pc, #940]	@ (8008094 <X2C_Init+0x3e0>)
 8007ce8:	f8c4 20d4 	str.w	r2, [r4, #212]	@ 0xd4
    x2cModel.blocks.bCurrentReg.b1 = 1.8186666666666667;
 8007cec:	4aea      	ldr	r2, [pc, #936]	@ (8008098 <X2C_Init+0x3e4>)
 8007cee:	f8c4 20d8 	str.w	r2, [r4, #216]	@ 0xd8
    x2cModel.blocks.bOmega.V = 0.10471975511965977;
 8007cf2:	4aea      	ldr	r2, [pc, #936]	@ (800809c <X2C_Init+0x3e8>)
 8007cf4:	f8c4 2130 	str.w	r2, [r4, #304]	@ 0x130
    x2cModel.blocks.bPhi2Rpm.b = 8792.823966176633;
 8007cf8:	4ae9      	ldr	r2, [pc, #932]	@ (80080a0 <X2C_Init+0x3ec>)
 8007cfa:	f8c4 218c 	str.w	r2, [r4, #396]	@ 0x18c
    x2cModel.blocks.bCurrentDesired.Toggle = 1;
 8007cfe:	f04f 0c01 	mov.w	ip, #1
    x2cModel.blocks.bConst0.K = 0;
 8007d02:	2300      	movs	r3, #0
    x2cModel.blocks.bCurrentReg.enable_old = 0;
 8007d04:	2500      	movs	r5, #0
    x2cModel.blocks.bPhi2Rpm.a0 = -0.9539608813725853;
 8007d06:	4ae7      	ldr	r2, [pc, #924]	@ (80080a4 <X2C_Init+0x3f0>)
    x2cModel.blocks.bCurrentDesired.Toggle = 1;
 8007d08:	f884 c08c 	strb.w	ip, [r4, #140]	@ 0x8c
    x2cModel.blocks.bCurrentLimit.K = 30;
 8007d0c:	eef3 3a0e 	vmov.f32	s7, #62	@ 0x41f00000  30.0
    x2cModel.blocks.bOutputVoltage.Toggle = 1;
 8007d10:	f884 c170 	strb.w	ip, [r4, #368]	@ 0x170
    x2cModel.blocks.bCFiOmega.V = 0.0677;
 8007d14:	63e1      	str	r1, [r4, #60]	@ 0x3c
    x2cModel.blocks.bConst0.K = 0;
 8007d16:	6563      	str	r3, [r4, #84]	@ 0x54
    x2cModel.blocks.bConst6.K = 0;
 8007d18:	6623      	str	r3, [r4, #96]	@ 0x60
    x2cModel.blocks.bConstCurrentInit.K = 0;
 8007d1a:	66e3      	str	r3, [r4, #108]	@ 0x6c
    x2cModel.blocks.bConstSpeedInit.K = 0;
 8007d1c:	67a3      	str	r3, [r4, #120]	@ 0x78
    x2cModel.blocks.bCurrentIaFilter.b1 = 0;
 8007d1e:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
    x2cModel.blocks.bCurrentIaFilter.in_old = 0;
 8007d22:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
    x2cModel.blocks.bCurrentReg.i_old = 0;
 8007d26:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
    x2cModel.blocks.bOmegaFilter.b1 = 0;
 8007d2a:	f8c4 3144 	str.w	r3, [r4, #324]	@ 0x144
    x2cModel.blocks.bOmegaFilter.in_old = 0;
 8007d2e:	f8c4 314c 	str.w	r3, [r4, #332]	@ 0x14c
    x2cModel.blocks.bPhi2Rpm.phi_old = 0;
 8007d32:	f8c4 3194 	str.w	r3, [r4, #404]	@ 0x194
    x2cModel.blocks.bPhi2Rpm.n_old = 0;
 8007d36:	f8c4 3198 	str.w	r3, [r4, #408]	@ 0x198
    x2cModel.blocks.bPulseGenDCVal.K = 0;
 8007d3a:	f8c4 31c0 	str.w	r3, [r4, #448]	@ 0x1c0
    x2cModel.blocks.bPhi2Rpm.a0 = -0.9539608813725853;
 8007d3e:	f8c4 2190 	str.w	r2, [r4, #400]	@ 0x190
    x2cModel.blocks.bCurrentReg.enable_old = 0;
 8007d42:	f884 50e0 	strb.w	r5, [r4, #224]	@ 0xe0
    x2cModel.blocks.bCurrentLimit.K = 30;
 8007d46:	edc4 3a2d 	vstr	s7, [r4, #180]	@ 0xb4
    /* fmax = 1000.0                                                                                                  */
    /* Offset = 0.0                                                                                                   */
    /* Phase = 0.0                                                                                                    */
    /* ts_fact = 1.0                                                                                                  */
    x2cModel.blocks.bPulseGenSin.delta_phi = 0.00031415926535898;
    x2cModel.blocks.bPulseGenSin.phase = 0;
 8007d4a:	f8c4 31f8 	str.w	r3, [r4, #504]	@ 0x1f8
    x2cModel.blocks.bPulseGenSin.offset = 0;
 8007d4e:	f8c4 31fc 	str.w	r3, [r4, #508]	@ 0x1fc
    x2cModel.blocks.bPulseGenSin.phi = 0;
 8007d52:	f8c4 3200 	str.w	r3, [r4, #512]	@ 0x200
    /* Kp = 0.7                                                                                                       */
    /* Ki = 5.01                                                                                                      */
    /* ts_fact = 1.0                                                                                                  */
    x2cModel.blocks.bSpeedReg.b0 = 0.0002505;
    x2cModel.blocks.bSpeedReg.b1 = 0.7;
    x2cModel.blocks.bSpeedReg.i_old = 0;
 8007d56:	f8c4 329c 	str.w	r3, [r4, #668]	@ 0x29c
    /******************************************************************************************************************/
    /**                                              Initialize Inports                                              **/
    /******************************************************************************************************************/
    x2cModel.inports.bInButton = false;
    x2cModel.inports.bInEnable = false;
    x2cModel.inports.bInIa = (float32)0;
 8007d5a:	f8c4 32d4 	str.w	r3, [r4, #724]	@ 0x2d4
    x2cModel.inports.bInIb = (float32)0;
 8007d5e:	f8c4 32d8 	str.w	r3, [r4, #728]	@ 0x2d8
    x2cModel.inports.bInIc = (float32)0;
 8007d62:	f8c4 32dc 	str.w	r3, [r4, #732]	@ 0x2dc
    x2cModel.inports.bInPositionEncoder1 = (float32)0;
 8007d66:	f8c4 32e0 	str.w	r3, [r4, #736]	@ 0x2e0
    x2cModel.inports.bInPositionEncoder2 = (float32)0;
 8007d6a:	f8c4 32e4 	str.w	r3, [r4, #740]	@ 0x2e4
    x2cModel.inports.bInPositionResolver = (float32)0;
 8007d6e:	f8c4 32e8 	str.w	r3, [r4, #744]	@ 0x2e8
    x2cModel.inports.bInPwmFault = false;
    x2cModel.inports.bInVdc = (float32)0;
 8007d72:	f8c4 32f0 	str.w	r3, [r4, #752]	@ 0x2f0
    x2cModel.blocks.bSaturation2.min = 10;
 8007d76:	4bcc      	ldr	r3, [pc, #816]	@ (80080a8 <X2C_Init+0x3f4>)
 8007d78:	f8c4 3248 	str.w	r3, [r4, #584]	@ 0x248
    /******************************************************************************************************************/
    /**                                               Link Block Inputs                                              **/
    /******************************************************************************************************************/

    /* Block Add1                                                                                                     */
    x2cModel.blocks.bAdd1.In1 =
 8007d7c:	f504 7315 	add.w	r3, r4, #596	@ 0x254
    x2cModel.blocks.bRateLimiter.RateUp = 0.0005;
 8007d80:	eddf 7aca 	vldr	s15, [pc, #808]	@ 80080ac <X2C_Init+0x3f8>
    x2cModel.blocks.bPulseGenSin.delta_phi = 0.00031415926535898;
 8007d84:	ed9f 4aca 	vldr	s8, [pc, #808]	@ 80080b0 <X2C_Init+0x3fc>
    x2cModel.blocks.bSaturation.max = 0.999999;
 8007d88:	eddf 4aca 	vldr	s9, [pc, #808]	@ 80080b4 <X2C_Init+0x400>
    x2cModel.blocks.bSaturation.min = -0.999999;
 8007d8c:	ed9f 5aca 	vldr	s10, [pc, #808]	@ 80080b8 <X2C_Init+0x404>
    x2cModel.blocks.bSaturation2.max = 60;
 8007d90:	eddf 5aca 	vldr	s11, [pc, #808]	@ 80080bc <X2C_Init+0x408>
    x2cModel.blocks.bSpeedDesiredConst.K = 50;
 8007d94:	ed9f 6aca 	vldr	s12, [pc, #808]	@ 80080c0 <X2C_Init+0x40c>
    x2cModel.blocks.bSpeedReg.b0 = 0.0002505;
 8007d98:	eddf 6aca 	vldr	s13, [pc, #808]	@ 80080c4 <X2C_Init+0x410>
    x2cModel.blocks.bSpeedReg.b1 = 0.7;
 8007d9c:	ed9f 7aca 	vldr	s14, [pc, #808]	@ 80080c8 <X2C_Init+0x414>
    x2cModel.blocks.bAdd1.In1 =
 8007da0:	6063      	str	r3, [r4, #4]
        &x2cModel.blocks.bSign.Out;
    x2cModel.blocks.bAdd1.In2 =
 8007da2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
    x2cModel.blocks.bOutputVoltasgeLimit.K = 25;
 8007da6:	eef3 3a09 	vmov.f32	s7, #57	@ 0x41c80000  25.0
        &x2cModel.blocks.bOr.Out;
    x2cModel.blocks.bAnd.In2 =
        &x2cModel.blocks.bTFlipFlop.Q;

    /* Block CFiIa                                                                                                    */
    x2cModel.blocks.bCFiIa.In =
 8007daa:	f504 7035 	add.w	r0, r4, #724	@ 0x2d4
    x2cModel.blocks.bAdd1.In2 =
 8007dae:	60a3      	str	r3, [r4, #8]
    x2cModel.blocks.bAnd.In1 =
 8007db0:	f504 73ae 	add.w	r3, r4, #348	@ 0x15c
    x2cModel.blocks.bOutputVoltasgeLimit.K = 25;
 8007db4:	edc4 3a5f 	vstr	s7, [r4, #380]	@ 0x17c
    x2cModel.blocks.bPulseGenSin.delta_phi = 0.00031415926535898;
 8007db8:	ed84 4a7d 	vstr	s8, [r4, #500]	@ 0x1f4
    x2cModel.blocks.bSaturation.max = 0.999999;
 8007dbc:	edc4 4a8c 	vstr	s9, [r4, #560]	@ 0x230
    x2cModel.blocks.bSaturation.min = -0.999999;
 8007dc0:	ed84 5a8d 	vstr	s10, [r4, #564]	@ 0x234
    x2cModel.blocks.bSaturation2.max = 60;
 8007dc4:	edc4 5a91 	vstr	s11, [r4, #580]	@ 0x244
    x2cModel.blocks.bSpeedDesired.Toggle = 1;
 8007dc8:	f884 c268 	strb.w	ip, [r4, #616]	@ 0x268
    x2cModel.blocks.bSpeedDesiredConst.K = 50;
 8007dcc:	ed84 6a9d 	vstr	s12, [r4, #628]	@ 0x274
    x2cModel.blocks.bSpeedReg.b0 = 0.0002505;
 8007dd0:	edc4 6aa5 	vstr	s13, [r4, #660]	@ 0x294
    x2cModel.blocks.bSpeedReg.b1 = 0.7;
 8007dd4:	ed84 7aa6 	vstr	s14, [r4, #664]	@ 0x298
    x2cModel.blocks.bRateLimiter.RateUp = 0.0005;
 8007dd8:	edc4 7a86 	vstr	s15, [r4, #536]	@ 0x218
    x2cModel.blocks.bRateLimiter.RateDown = 0.0005;
 8007ddc:	edc4 7a87 	vstr	s15, [r4, #540]	@ 0x21c
    x2cModel.blocks.bCFiIa.In =
 8007de0:	6260      	str	r0, [r4, #36]	@ 0x24
    x2cModel.blocks.bPulseGenOutput.Toggle = 0;
 8007de2:	f884 51e0 	strb.w	r5, [r4, #480]	@ 0x1e0
    x2cModel.blocks.bRateLimiter.enable_old = 0;
 8007de6:	f884 5220 	strb.w	r5, [r4, #544]	@ 0x220
    x2cModel.blocks.bSpeedReg.enable_old = 0;
 8007dea:	f884 52a0 	strb.w	r5, [r4, #672]	@ 0x2a0
    x2cModel.blocks.bTFlipFlop.toggle_old = 0;
 8007dee:	f884 52ce 	strb.w	r5, [r4, #718]	@ 0x2ce
    x2cModel.inports.bInButton = false;
 8007df2:	f8a4 52d0 	strh.w	r5, [r4, #720]	@ 0x2d0
    x2cModel.inports.bInPwmFault = false;
 8007df6:	f884 52ec 	strb.w	r5, [r4, #748]	@ 0x2ec
    x2cModel.blocks.bAnd.In1 =
 8007dfa:	6163      	str	r3, [r4, #20]
    x2cModel.blocks.bAnd.In2 =
 8007dfc:	f504 7333 	add.w	r3, r4, #716	@ 0x2cc
 8007e00:	61a3      	str	r3, [r4, #24]
    /* Block ConstCurrentInit                                                                                         */

    /* Block ConstSpeedInit                                                                                           */

    /* Block CurrentDesired                                                                                           */
    x2cModel.blocks.bCurrentDesired.In1 =
 8007e02:	f504 7324 	add.w	r3, r4, #656	@ 0x290
 8007e06:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        &x2cModel.inports.bInIa;

    /* Block CurrentLimit                                                                                             */

    /* Block CurrentReg                                                                                               */
    x2cModel.blocks.bCurrentReg.In =
 8007e0a:	f504 732c 	add.w	r3, r4, #688	@ 0x2b0
 8007e0e:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
        &x2cModel.blocks.bSub1.Out;
    x2cModel.blocks.bCurrentReg.Init =
 8007e12:	f104 0368 	add.w	r3, r4, #104	@ 0x68
 8007e16:	f8c4 30c0 	str.w	r3, [r4, #192]	@ 0xc0
        &x2cModel.blocks.bConstCurrentInit.Out;
    x2cModel.blocks.bCurrentReg.max =
        &x2cModel.blocks.bOutputVoltasgeLimit.Out;
    x2cModel.blocks.bCurrentReg.min =
 8007e1a:	f504 7384 	add.w	r3, r4, #264	@ 0x108
 8007e1e:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
        &x2cModel.blocks.bNegation2.Out;
    x2cModel.blocks.bCurrentReg.Enable =
        &x2cModel.blocks.bAnd.Out;

    /* Block Div2                                                                                                     */
    x2cModel.blocks.bDiv2.Num =
 8007e22:	f504 73b6 	add.w	r3, r4, #364	@ 0x16c
 8007e26:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
        &x2cModel.blocks.bOutputVoltage.Out;
    x2cModel.blocks.bDiv2.Den =
 8007e2a:	f504 7310 	add.w	r3, r4, #576	@ 0x240
 8007e2e:	f8c4 30ec 	str.w	r3, [r4, #236]	@ 0xec
    /* Block Negation3                                                                                                */
    x2cModel.blocks.bNegation3.In =
        &x2cModel.blocks.bCurrentLimit.Out;

    /* Block Not                                                                                                      */
    x2cModel.blocks.bNot.In =
 8007e32:	f504 733b 	add.w	r3, r4, #748	@ 0x2ec
 8007e36:	f8c4 311c 	str.w	r3, [r4, #284]	@ 0x11c
        &x2cModel.inports.bInPwmFault;

    /* Block Omega                                                                                                    */
    x2cModel.blocks.bOmega.In =
 8007e3a:	f504 73c4 	add.w	r3, r4, #392	@ 0x188
 8007e3e:	f8c4 3128 	str.w	r3, [r4, #296]	@ 0x128
    /* Block OmegaFilter                                                                                              */
    x2cModel.blocks.bOmegaFilter.In =
        &x2cModel.blocks.bOmega.Out;

    /* Block Or                                                                                                       */
    x2cModel.blocks.bOr.In1 =
 8007e42:	f204 23d1 	addw	r3, r4, #721	@ 0x2d1
 8007e46:	f8c4 3154 	str.w	r3, [r4, #340]	@ 0x154
        &x2cModel.inports.bInEnable;
    x2cModel.blocks.bOr.In2 =
 8007e4a:	f504 7390 	add.w	r3, r4, #288	@ 0x120
 8007e4e:	f8c4 3158 	str.w	r3, [r4, #344]	@ 0x158
        &x2cModel.blocks.bNot.Out;

    /* Block OutputVoltage                                                                                            */
    x2cModel.blocks.bOutputVoltage.In1 =
 8007e52:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
 8007e56:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
        &x2cModel.blocks.bPulseGenOutput.Out;

    /* Block OutputVoltasgeLimit                                                                                      */

    /* Block Phi2Rpm                                                                                                  */
    x2cModel.blocks.bPhi2Rpm.phi =
 8007e5a:	f504 7338 	add.w	r3, r4, #736	@ 0x2e0
 8007e5e:	f8c4 3184 	str.w	r3, [r4, #388]	@ 0x184
        &x2cModel.inports.bInPositionEncoder1;

    /* Block PulseGenAmplitude                                                                                        */
    x2cModel.blocks.bPulseGenAmplitude.In =
 8007e62:	f104 030c 	add.w	r3, r4, #12
 8007e66:	f8c4 31a0 	str.w	r3, [r4, #416]	@ 0x1a0
    /* Block PulseGenDCVal                                                                                            */

    /* Block PulseGenFreq                                                                                             */

    /* Block PulseGenOutput                                                                                           */
    x2cModel.blocks.bPulseGenOutput.In1 =
 8007e6a:	f504 73d2 	add.w	r3, r4, #420	@ 0x1a4
 8007e6e:	f8c4 31d4 	str.w	r3, [r4, #468]	@ 0x1d4
        &x2cModel.blocks.bPulseGenAmplitude.Out;
    x2cModel.blocks.bPulseGenOutput.In2 =
 8007e72:	f504 7305 	add.w	r3, r4, #532	@ 0x214
 8007e76:	f8c4 31d8 	str.w	r3, [r4, #472]	@ 0x1d8
        &x2cModel.blocks.bRateLimiter.Out;

    /* Block PulseGenSin                                                                                              */
    x2cModel.blocks.bPulseGenSin.A =
 8007e7a:	f504 73d8 	add.w	r3, r4, #432	@ 0x1b0
 8007e7e:	f8c4 31e8 	str.w	r3, [r4, #488]	@ 0x1e8
        &x2cModel.blocks.bPulseGenConst1.Out;
    x2cModel.blocks.bPulseGenSin.f =
 8007e82:	f504 73e4 	add.w	r3, r4, #456	@ 0x1c8
 8007e86:	f8c4 31ec 	str.w	r3, [r4, #492]	@ 0x1ec
        &x2cModel.blocks.bPulseGenFreq.Out;

    /* Block RateLimiter                                                                                              */
    x2cModel.blocks.bRateLimiter.In =
 8007e8a:	f504 73de 	add.w	r3, r4, #444	@ 0x1bc
 8007e8e:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
        &x2cModel.blocks.bPulseGenDCVal.Out;
    x2cModel.blocks.bRateLimiter.Init =
 8007e92:	f104 035c 	add.w	r3, r4, #92	@ 0x5c
 8007e96:	f8c4 320c 	str.w	r3, [r4, #524]	@ 0x20c
        &x2cModel.blocks.bConst6.Out;
    x2cModel.blocks.bRateLimiter.Enable =
        &x2cModel.blocks.bAnd.Out;

    /* Block Saturation                                                                                               */
    x2cModel.blocks.bSaturation.In =
 8007e9a:	f104 03f0 	add.w	r3, r4, #240	@ 0xf0
    x2cModel.blocks.bCurrentReg.Enable =
 8007e9e:	f104 021c 	add.w	r2, r4, #28
    x2cModel.blocks.bCFiOmega.In =
 8007ea2:	f504 7196 	add.w	r1, r4, #300	@ 0x12c
    x2cModel.blocks.bCurrentDesired.In2 =
 8007ea6:	f504 76ee 	add.w	r6, r4, #476	@ 0x1dc
    x2cModel.blocks.bCurrentReg.max =
 8007eaa:	f504 79bc 	add.w	r9, r4, #376	@ 0x178
    x2cModel.blocks.bNegation.In =
 8007eae:	f504 770b 	add.w	r7, r4, #556	@ 0x22c
    x2cModel.blocks.bNegation3.In =
 8007eb2:	f104 08b0 	add.w	r8, r4, #176	@ 0xb0
    x2cModel.blocks.bSaturation.In =
 8007eb6:	f8c4 3228 	str.w	r3, [r4, #552]	@ 0x228
        &x2cModel.blocks.bDiv2.Out;

    /* Block Saturation2                                                                                              */
    x2cModel.blocks.bSaturation2.In =
 8007eba:	f504 733c 	add.w	r3, r4, #752	@ 0x2f0
    x2cModel.blocks.bCFiOmega.In =
 8007ebe:	6361      	str	r1, [r4, #52]	@ 0x34
    x2cModel.blocks.bCurrentIaFilter.In =
 8007ec0:	f8c4 0094 	str.w	r0, [r4, #148]	@ 0x94
    x2cModel.blocks.bCurrentReg.Enable =
 8007ec4:	f8c4 20cc 	str.w	r2, [r4, #204]	@ 0xcc
    x2cModel.blocks.bOmegaFilter.In =
 8007ec8:	f8c4 1138 	str.w	r1, [r4, #312]	@ 0x138
    x2cModel.blocks.bRateLimiter.Enable =
 8007ecc:	f8c4 2210 	str.w	r2, [r4, #528]	@ 0x210
    x2cModel.blocks.bCurrentDesired.In2 =
 8007ed0:	f8c4 6084 	str.w	r6, [r4, #132]	@ 0x84
    x2cModel.blocks.bCurrentReg.max =
 8007ed4:	f8c4 90c4 	str.w	r9, [r4, #196]	@ 0xc4
    x2cModel.blocks.bNegation2.In =
 8007ed8:	f8c4 9104 	str.w	r9, [r4, #260]	@ 0x104
    x2cModel.blocks.bNegation.In =
 8007edc:	f8c4 70f8 	str.w	r7, [r4, #248]	@ 0xf8
    x2cModel.blocks.bNegation3.In =
 8007ee0:	f8c4 8110 	str.w	r8, [r4, #272]	@ 0x110
    x2cModel.blocks.bOutputVoltage.In2 =
 8007ee4:	f8c4 6168 	str.w	r6, [r4, #360]	@ 0x168
    x2cModel.blocks.bSaturation2.In =
 8007ee8:	f8c4 323c 	str.w	r3, [r4, #572]	@ 0x23c
        &x2cModel.inports.bInVdc;

    /* Block Sign                                                                                                     */
    x2cModel.blocks.bSign.In =
 8007eec:	f504 73f8 	add.w	r3, r4, #496	@ 0x1f0
 8007ef0:	f8c4 3250 	str.w	r3, [r4, #592]	@ 0x250
        &x2cModel.blocks.bPulseGenSin.u;

    /* Block SpeedDesired                                                                                             */
    x2cModel.blocks.bSpeedDesired.In1 =
 8007ef4:	f504 731c 	add.w	r3, r4, #624	@ 0x270
        &x2cModel.blocks.bSpeedDesiredConst.Out;
    x2cModel.blocks.bSpeedDesired.In2 =
 8007ef8:	e9c4 3697 	strd	r3, r6, [r4, #604]	@ 0x25c
        &x2cModel.inports.bInIa;

    /* Block Sub2                                                                                                     */
    x2cModel.blocks.bSub2.Plus =
        &x2cModel.blocks.bSpeedDesired.Out;
    x2cModel.blocks.bSub2.Minus =
 8007efc:	f8c4 12bc 	str.w	r1, [r4, #700]	@ 0x2bc
        &x2cModel.blocks.bAnd.Out;
    x2cModel.outports.bOutPWMa =
        &x2cModel.blocks.bSaturation.Out;
    x2cModel.outports.bOutPWMb =
        &x2cModel.blocks.bNegation.Out;
    x2cModel.outports.bOutPWMc =
 8007f00:	f104 0350 	add.w	r3, r4, #80	@ 0x50
    x2cModel.outports.bOutPWMb =
 8007f04:	f104 01fc 	add.w	r1, r4, #252	@ 0xfc
    x2cModel.outports.bOutPWMc =
 8007f08:	e9c4 13c0 	strd	r1, r3, [r4, #768]	@ 0x300
    x2cModel.outports.bOutPWMa =
 8007f0c:	e9c4 27be 	strd	r2, r7, [r4, #760]	@ 0x2f8
    x2cModel.blocks.bSpeedReg.Enable =
 8007f10:	f8c4 228c 	str.w	r2, [r4, #652]	@ 0x28c
    x2cModel.blocks.bSpeedReg.Init =
 8007f14:	f104 0374 	add.w	r3, r4, #116	@ 0x74
    x2cModel.blocks.bSpeedReg.In =
 8007f18:	f504 7230 	add.w	r2, r4, #704	@ 0x2c0
    x2cModel.blocks.bSpeedReg.Init =
 8007f1c:	e9c4 239f 	strd	r2, r3, [r4, #636]	@ 0x27c
    x2cModel.blocks.bSub1.Plus =
 8007f20:	f104 0388 	add.w	r3, r4, #136	@ 0x88
    x2cModel.blocks.bTFlipFlop.T =
 8007f24:	f504 7e34 	add.w	lr, r4, #720	@ 0x2d0
    x2cModel.blocks.bSpeedReg.min =
 8007f28:	f504 728a 	add.w	r2, r4, #276	@ 0x114
    x2cModel.blocks.bSub1.Minus =
 8007f2c:	f8c4 02ac 	str.w	r0, [r4, #684]	@ 0x2ac
    x2cModel.blocks.bSub1.Plus =
 8007f30:	f8c4 32a8 	str.w	r3, [r4, #680]	@ 0x2a8
        &x2cModel.blocks.bConst0.Out;

    /******************************************************************************************************************/
    /**                                           Run Block Init Functions                                           **/
    /******************************************************************************************************************/
    Add_Float32_Init(&x2cModel.blocks.bAdd1);
 8007f34:	4620      	mov	r0, r4
    x2cModel.blocks.bSub2.Plus =
 8007f36:	f504 7319 	add.w	r3, r4, #612	@ 0x264
    x2cModel.blocks.bTFlipFlop.T =
 8007f3a:	f8c4 e2c8 	str.w	lr, [r4, #712]	@ 0x2c8
    x2cModel.outports.bOutErrClear =
 8007f3e:	f8c4 e2f4 	str.w	lr, [r4, #756]	@ 0x2f4
    x2cModel.blocks.bSpeedReg.min =
 8007f42:	f8c4 2288 	str.w	r2, [r4, #648]	@ 0x288
    x2cModel.blocks.bSub2.Plus =
 8007f46:	f8c4 32b8 	str.w	r3, [r4, #696]	@ 0x2b8
    x2cModel.blocks.bSpeedReg.max =
 8007f4a:	f8c4 8284 	str.w	r8, [r4, #644]	@ 0x284
    Add_Float32_Init(&x2cModel.blocks.bAdd1);
 8007f4e:	f7fd fcdb 	bl	8005908 <Add_Float32_Init>
    And_Bool_Init(&x2cModel.blocks.bAnd);
 8007f52:	f104 0010 	add.w	r0, r4, #16
 8007f56:	f7fd fcf3 	bl	8005940 <And_Bool_Init>
    Gain_Float32_Init(&x2cModel.blocks.bCFiIa);
 8007f5a:	f104 0020 	add.w	r0, r4, #32
 8007f5e:	f7fd fd75 	bl	8005a4c <Gain_Float32_Init>
    Gain_Float32_Init(&x2cModel.blocks.bCFiOmega);
 8007f62:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8007f66:	f7fd fd71 	bl	8005a4c <Gain_Float32_Init>
    Constant_Float32_Init(&x2cModel.blocks.bCoPulseGenOffset);
 8007f6a:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 8007f6e:	f7fd fcfb 	bl	8005968 <Constant_Float32_Init>
    Constant_Float32_Init(&x2cModel.blocks.bConst0);
 8007f72:	f104 004c 	add.w	r0, r4, #76	@ 0x4c
 8007f76:	f7fd fcf7 	bl	8005968 <Constant_Float32_Init>
    Constant_Float32_Init(&x2cModel.blocks.bConst6);
 8007f7a:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f7e:	f7fd fcf3 	bl	8005968 <Constant_Float32_Init>
    Constant_Float32_Init(&x2cModel.blocks.bConstCurrentInit);
 8007f82:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8007f86:	f7fd fcef 	bl	8005968 <Constant_Float32_Init>
    Constant_Float32_Init(&x2cModel.blocks.bConstSpeedInit);
 8007f8a:	f104 0070 	add.w	r0, r4, #112	@ 0x70
 8007f8e:	f7fd fceb 	bl	8005968 <Constant_Float32_Init>
    ManualSwitch_Float32_Init(&x2cModel.blocks.bCurrentDesired);
 8007f92:	f104 007c 	add.w	r0, r4, #124	@ 0x7c
 8007f96:	f7fd fd8f 	bl	8005ab8 <ManualSwitch_Float32_Init>
    PT1_Float32_Init(&x2cModel.blocks.bCurrentIaFilter);
 8007f9a:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 8007f9e:	f7fd feab 	bl	8005cf8 <PT1_Float32_Init>
    Constant_Float32_Init(&x2cModel.blocks.bCurrentLimit);
 8007fa2:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8007fa6:	f7fd fcdf 	bl	8005968 <Constant_Float32_Init>
    PILimit_Float32_Init(&x2cModel.blocks.bCurrentReg);
 8007faa:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8007fae:	f7fd fe3d 	bl	8005c2c <PILimit_Float32_Init>
    Div_Float32_Init(&x2cModel.blocks.bDiv2);
 8007fb2:	f104 00e4 	add.w	r0, r4, #228	@ 0xe4
 8007fb6:	f7fd fd2b 	bl	8005a10 <Div_Float32_Init>
    Negation_Float32_Init(&x2cModel.blocks.bNegation);
 8007fba:	f104 00f4 	add.w	r0, r4, #244	@ 0xf4
 8007fbe:	f7fd fda9 	bl	8005b14 <Negation_Float32_Init>
    Negation_Float32_Init(&x2cModel.blocks.bNegation2);
 8007fc2:	f504 7080 	add.w	r0, r4, #256	@ 0x100
 8007fc6:	f7fd fda5 	bl	8005b14 <Negation_Float32_Init>
    Negation_Float32_Init(&x2cModel.blocks.bNegation3);
 8007fca:	f504 7086 	add.w	r0, r4, #268	@ 0x10c
 8007fce:	f7fd fda1 	bl	8005b14 <Negation_Float32_Init>
    Not_Bool_Init(&x2cModel.blocks.bNot);
 8007fd2:	f504 708c 	add.w	r0, r4, #280	@ 0x118
 8007fd6:	f7fd fdb3 	bl	8005b40 <Not_Bool_Init>
    Gain_Float32_Init(&x2cModel.blocks.bOmega);
 8007fda:	f504 7092 	add.w	r0, r4, #292	@ 0x124
 8007fde:	f7fd fd35 	bl	8005a4c <Gain_Float32_Init>
    PT1_Float32_Init(&x2cModel.blocks.bOmegaFilter);
 8007fe2:	f504 709a 	add.w	r0, r4, #308	@ 0x134
 8007fe6:	f7fd fe87 	bl	8005cf8 <PT1_Float32_Init>
    Or_Bool_Init(&x2cModel.blocks.bOr);
 8007fea:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 8007fee:	f7fd fdbf 	bl	8005b70 <Or_Bool_Init>
    ManualSwitch_Float32_Init(&x2cModel.blocks.bOutputVoltage);
 8007ff2:	f504 70b0 	add.w	r0, r4, #352	@ 0x160
 8007ff6:	f7fd fd5f 	bl	8005ab8 <ManualSwitch_Float32_Init>
    Constant_Float32_Init(&x2cModel.blocks.bOutputVoltasgeLimit);
 8007ffa:	f504 70ba 	add.w	r0, r4, #372	@ 0x174
 8007ffe:	f7fd fcb3 	bl	8005968 <Constant_Float32_Init>
    Phi2Speed_Float32_Init(&x2cModel.blocks.bPhi2Rpm);
 8008002:	f504 70c0 	add.w	r0, r4, #384	@ 0x180
 8008006:	f7f8 f93d 	bl	8000284 <Phi2Speed_Float32_Init>
    Gain_Float32_Init(&x2cModel.blocks.bPulseGenAmplitude);
 800800a:	f504 70ce 	add.w	r0, r4, #412	@ 0x19c
 800800e:	f7fd fd1d 	bl	8005a4c <Gain_Float32_Init>
    Constant_Float32_Init(&x2cModel.blocks.bPulseGenConst1);
 8008012:	f504 70d6 	add.w	r0, r4, #428	@ 0x1ac
 8008016:	f7fd fca7 	bl	8005968 <Constant_Float32_Init>
    Constant_Float32_Init(&x2cModel.blocks.bPulseGenDCVal);
 800801a:	f504 70dc 	add.w	r0, r4, #440	@ 0x1b8
 800801e:	f7fd fca3 	bl	8005968 <Constant_Float32_Init>
    Constant_Float32_Init(&x2cModel.blocks.bPulseGenFreq);
 8008022:	f504 70e2 	add.w	r0, r4, #452	@ 0x1c4
 8008026:	f7fd fc9f 	bl	8005968 <Constant_Float32_Init>
    ManualSwitch_Float32_Init(&x2cModel.blocks.bPulseGenOutput);
 800802a:	f504 70e8 	add.w	r0, r4, #464	@ 0x1d0
 800802e:	f7fd fd43 	bl	8005ab8 <ManualSwitch_Float32_Init>
    SinGen_Float32_Init(&x2cModel.blocks.bPulseGenSin);
 8008032:	f504 70f2 	add.w	r0, r4, #484	@ 0x1e4
 8008036:	f7fd ffcf 	bl	8005fd8 <SinGen_Float32_Init>
    RateLimiter_Float32_Init(&x2cModel.blocks.bRateLimiter);
 800803a:	f504 7001 	add.w	r0, r4, #516	@ 0x204
 800803e:	f7fd fedb 	bl	8005df8 <RateLimiter_Float32_Init>
    Saturation_Float32_Init(&x2cModel.blocks.bSaturation);
 8008042:	f504 7009 	add.w	r0, r4, #548	@ 0x224
 8008046:	f7fd ff31 	bl	8005eac <Saturation_Float32_Init>
    Saturation_Float32_Init(&x2cModel.blocks.bSaturation2);
 800804a:	f504 700e 	add.w	r0, r4, #568	@ 0x238
 800804e:	f7fd ff2d 	bl	8005eac <Saturation_Float32_Init>
    Sign_Float32_Init(&x2cModel.blocks.bSign);
 8008052:	f504 7013 	add.w	r0, r4, #588	@ 0x24c
 8008056:	f7fd ff75 	bl	8005f44 <Sign_Float32_Init>
    ManualSwitch_Float32_Init(&x2cModel.blocks.bSpeedDesired);
 800805a:	f504 7016 	add.w	r0, r4, #600	@ 0x258
 800805e:	f7fd fd2b 	bl	8005ab8 <ManualSwitch_Float32_Init>
    Constant_Float32_Init(&x2cModel.blocks.bSpeedDesiredConst);
 8008062:	f504 701b 	add.w	r0, r4, #620	@ 0x26c
 8008066:	f7fd fc7f 	bl	8005968 <Constant_Float32_Init>
    PILimit_Float32_Init(&x2cModel.blocks.bSpeedReg);
 800806a:	f504 701e 	add.w	r0, r4, #632	@ 0x278
 800806e:	f7fd fddd 	bl	8005c2c <PILimit_Float32_Init>
    Sub_Float32_Init(&x2cModel.blocks.bSub1);
 8008072:	f504 7029 	add.w	r0, r4, #676	@ 0x2a4
 8008076:	f7fe f805 	bl	8006084 <Sub_Float32_Init>
    Sub_Float32_Init(&x2cModel.blocks.bSub2);
 800807a:	f504 702d 	add.w	r0, r4, #692	@ 0x2b4
 800807e:	e025      	b.n	80080cc <X2C_Init+0x418>
 8008080:	20001748 	.word	0x20001748
 8008084:	3d8aa64c 	.word	0x3d8aa64c
 8008088:	3e4ccccd 	.word	0x3e4ccccd
 800808c:	3b4d9079 	.word	0x3b4d9079
 8008090:	bf7f3270 	.word	0xbf7f3270
 8008094:	3d294d24 	.word	0x3d294d24
 8008098:	3fe8ca12 	.word	0x3fe8ca12
 800809c:	3dd67750 	.word	0x3dd67750
 80080a0:	4609634c 	.word	0x4609634c
 80080a4:	bf7436c8 	.word	0xbf7436c8
 80080a8:	41200000 	.word	0x41200000
 80080ac:	3a03126f 	.word	0x3a03126f
 80080b0:	39a4b5be 	.word	0x39a4b5be
 80080b4:	3f7fffef 	.word	0x3f7fffef
 80080b8:	bf7fffef 	.word	0xbf7fffef
 80080bc:	42700000 	.word	0x42700000
 80080c0:	42480000 	.word	0x42480000
 80080c4:	3983558a 	.word	0x3983558a
 80080c8:	3f333333 	.word	0x3f333333
 80080cc:	f7fd ffda 	bl	8006084 <Sub_Float32_Init>
    TFlipFlop_Bool_Init(&x2cModel.blocks.bTFlipFlop);
 80080d0:	f504 7031 	add.w	r0, r4, #708	@ 0x2c4
 80080d4:	f7f8 f92e 	bl	8000334 <TFlipFlop_Bool_Init>
    Scope_Main_Init(&x2cScope);
 80080d8:	4807      	ldr	r0, [pc, #28]	@ (80080f8 <X2C_Init+0x444>)
 80080da:	f7fe fdf5 	bl	8006cc8 <Scope_Main_Init>

    /* Initialize TableStruct tables                                                                                  */
    TableStruct->TFncTable = blockFunctionTable;
 80080de:	4b07      	ldr	r3, [pc, #28]	@ (80080fc <X2C_Init+0x448>)
    TableStruct->TParamTable = parameterIdTable;
 80080e0:	4a07      	ldr	r2, [pc, #28]	@ (8008100 <X2C_Init+0x44c>)
    TableStruct->TFncTable = blockFunctionTable;
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4807      	ldr	r0, [pc, #28]	@ (8008104 <X2C_Init+0x450>)
 80080e6:	6058      	str	r0, [r3, #4]
    TableStruct->inportParamTable = inportParamIdTable;
 80080e8:	4907      	ldr	r1, [pc, #28]	@ (8008108 <X2C_Init+0x454>)
    TableStruct->TParamTable = parameterIdTable;
 80080ea:	601a      	str	r2, [r3, #0]
    TableStruct->outportParamTable = outportParamIdTable;
 80080ec:	4a07      	ldr	r2, [pc, #28]	@ (800810c <X2C_Init+0x458>)
    TableStruct->inportParamTable = inportParamIdTable;
 80080ee:	6319      	str	r1, [r3, #48]	@ 0x30
    TableStruct->outportParamTable = outportParamIdTable;
 80080f0:	635a      	str	r2, [r3, #52]	@ 0x34
    /* Conversion-on-Target feature not used                                                                          */
    TableStruct->maskParameterTable = (tMaskParameterEntry*)0;
 80080f2:	639d      	str	r5, [r3, #56]	@ 0x38
}
 80080f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080f8:	200016d0 	.word	0x200016d0
 80080fc:	2000000c 	.word	0x2000000c
 8008100:	080093c4 	.word	0x080093c4
 8008104:	08009514 	.word	0x08009514
 8008108:	0800936c 	.word	0x0800936c
 800810c:	0800933c 	.word	0x0800933c

08008110 <X2C_Update_1>:

}

/* X2C_Update for blocks with 1*Ts                                                                                    */
void X2C_Update_1(void)
{
 8008110:	b510      	push	{r4, lr}
    SinGen_Float32_Update(&x2cModel.blocks.bPulseGenSin);
 8008112:	4c3c      	ldr	r4, [pc, #240]	@ (8008204 <X2C_Update_1+0xf4>)
 8008114:	4620      	mov	r0, r4
 8008116:	f7fd ff25 	bl	8005f64 <SinGen_Float32_Update>
    Sign_Float32_Update(&x2cModel.blocks.bSign);
 800811a:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800811e:	f7fd feff 	bl	8005f20 <Sign_Float32_Update>
    Add_Float32_Update(&x2cModel.blocks.bAdd1);
 8008122:	f5a4 70f2 	sub.w	r0, r4, #484	@ 0x1e4
 8008126:	f7fd fbe3 	bl	80058f0 <Add_Float32_Update>
    Gain_Float32_Update(&x2cModel.blocks.bPulseGenAmplitude);
 800812a:	f1a4 0048 	sub.w	r0, r4, #72	@ 0x48
 800812e:	f7fd fc83 	bl	8005a38 <Gain_Float32_Update>
    Phi2Speed_Float32_Update(&x2cModel.blocks.bPhi2Rpm);
 8008132:	f1a4 0064 	sub.w	r0, r4, #100	@ 0x64
 8008136:	f7f8 f86f 	bl	8000218 <Phi2Speed_Float32_Update>
    Gain_Float32_Update(&x2cModel.blocks.bOmega);
 800813a:	f1a4 00c0 	sub.w	r0, r4, #192	@ 0xc0
 800813e:	f7fd fc7b 	bl	8005a38 <Gain_Float32_Update>
    Negation_Float32_Update(&x2cModel.blocks.bNegation3);
 8008142:	f1a4 00d8 	sub.w	r0, r4, #216	@ 0xd8
 8008146:	f7fd fcdd 	bl	8005b04 <Negation_Float32_Update>
    Negation_Float32_Update(&x2cModel.blocks.bNegation2);
 800814a:	f1a4 00e4 	sub.w	r0, r4, #228	@ 0xe4
 800814e:	f7fd fcd9 	bl	8005b04 <Negation_Float32_Update>
    Not_Bool_Update(&x2cModel.blocks.bNot);
 8008152:	f1a4 00cc 	sub.w	r0, r4, #204	@ 0xcc
 8008156:	f7fd fced 	bl	8005b34 <Not_Bool_Update>
    Saturation_Float32_Update(&x2cModel.blocks.bSaturation2);
 800815a:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800815e:	f7fd fe8f 	bl	8005e80 <Saturation_Float32_Update>
    Or_Bool_Update(&x2cModel.blocks.bOr);
 8008162:	f1a4 0094 	sub.w	r0, r4, #148	@ 0x94
 8008166:	f7fd fcfb 	bl	8005b60 <Or_Bool_Update>
    Gain_Float32_Update(&x2cModel.blocks.bCFiIa);
 800816a:	f5a4 70e2 	sub.w	r0, r4, #452	@ 0x1c4
 800816e:	f7fd fc63 	bl	8005a38 <Gain_Float32_Update>
    Gain_Float32_Update(&x2cModel.blocks.bCFiOmega);
 8008172:	f5a4 70da 	sub.w	r0, r4, #436	@ 0x1b4
 8008176:	f7fd fc5f 	bl	8005a38 <Gain_Float32_Update>
    PT1_Float32_Update(&x2cModel.blocks.bCurrentIaFilter);
 800817a:	f5a4 70aa 	sub.w	r0, r4, #340	@ 0x154
 800817e:	f7fd fda3 	bl	8005cc8 <PT1_Float32_Update>
    PT1_Float32_Update(&x2cModel.blocks.bOmegaFilter);
 8008182:	f1a4 00b0 	sub.w	r0, r4, #176	@ 0xb0
 8008186:	f7fd fd9f 	bl	8005cc8 <PT1_Float32_Update>
    TFlipFlop_Bool_Update(&x2cModel.blocks.bTFlipFlop);
 800818a:	f104 00e0 	add.w	r0, r4, #224	@ 0xe0
 800818e:	f7f8 f8c3 	bl	8000318 <TFlipFlop_Bool_Update>
    And_Bool_Update(&x2cModel.blocks.bAnd);
 8008192:	f5a4 70ea 	sub.w	r0, r4, #468	@ 0x1d4
 8008196:	f7fd fbcb 	bl	8005930 <And_Bool_Update>
    RateLimiter_Float32_Update(&x2cModel.blocks.bRateLimiter);
 800819a:	f104 0020 	add.w	r0, r4, #32
 800819e:	f7fd fdf1 	bl	8005d84 <RateLimiter_Float32_Update>
    ManualSwitch_Float32_Update(&x2cModel.blocks.bPulseGenOutput);
 80081a2:	f1a4 0014 	sub.w	r0, r4, #20
 80081a6:	f7fd fc7d 	bl	8005aa4 <ManualSwitch_Float32_Update>
    ManualSwitch_Float32_Update(&x2cModel.blocks.bSpeedDesired);
 80081aa:	f104 0074 	add.w	r0, r4, #116	@ 0x74
 80081ae:	f7fd fc79 	bl	8005aa4 <ManualSwitch_Float32_Update>
    Sub_Float32_Update(&x2cModel.blocks.bSub2);
 80081b2:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80081b6:	f7fd ff59 	bl	800606c <Sub_Float32_Update>
    PILimit_Float32_Update(&x2cModel.blocks.bSpeedReg);
 80081ba:	f104 0094 	add.w	r0, r4, #148	@ 0x94
 80081be:	f7fd fceb 	bl	8005b98 <PILimit_Float32_Update>
    ManualSwitch_Float32_Update(&x2cModel.blocks.bCurrentDesired);
 80081c2:	f5a4 70b4 	sub.w	r0, r4, #360	@ 0x168
 80081c6:	f7fd fc6d 	bl	8005aa4 <ManualSwitch_Float32_Update>
    Sub_Float32_Update(&x2cModel.blocks.bSub1);
 80081ca:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 80081ce:	f7fd ff4d 	bl	800606c <Sub_Float32_Update>
    PILimit_Float32_Update(&x2cModel.blocks.bCurrentReg);
 80081d2:	f5a4 7096 	sub.w	r0, r4, #300	@ 0x12c
 80081d6:	f7fd fcdf 	bl	8005b98 <PILimit_Float32_Update>
    ManualSwitch_Float32_Update(&x2cModel.blocks.bOutputVoltage);
 80081da:	f1a4 0084 	sub.w	r0, r4, #132	@ 0x84
 80081de:	f7fd fc61 	bl	8005aa4 <ManualSwitch_Float32_Update>
    Div_Float32_Update(&x2cModel.blocks.bDiv2);
 80081e2:	f5a4 7080 	sub.w	r0, r4, #256	@ 0x100
 80081e6:	f7fd fbe9 	bl	80059bc <Div_Float32_Update>
    Saturation_Float32_Update(&x2cModel.blocks.bSaturation);
 80081ea:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 80081ee:	f7fd fe47 	bl	8005e80 <Saturation_Float32_Update>
    Negation_Float32_Update(&x2cModel.blocks.bNegation);
 80081f2:	f1a4 00f0 	sub.w	r0, r4, #240	@ 0xf0
 80081f6:	f7fd fc85 	bl	8005b04 <Negation_Float32_Update>
    Scope_Main_Update(&x2cScope);
}
 80081fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Scope_Main_Update(&x2cScope);
 80081fe:	4802      	ldr	r0, [pc, #8]	@ (8008208 <X2C_Update_1+0xf8>)
 8008200:	f7fe bd92 	b.w	8006d28 <Scope_Main_Update>
 8008204:	2000192c 	.word	0x2000192c
 8008208:	200016d0 	.word	0x200016d0

0800820c <sendSerial>:
 * @param data Data byte to send.
 */
static void sendSerial(tSerial* serial, uint8 data)
{
  //LL_LPUART_TransmitData8(LPUART1, data);
	pX2CHUART.Instance->TDR = data;
 800820c:	4b01      	ldr	r3, [pc, #4]	@ (8008214 <sendSerial+0x8>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6299      	str	r1, [r3, #40]	@ 0x28
	//LPUART1->TDR = data;
}
 8008212:	4770      	bx	lr
 8008214:	200001f4 	.word	0x200001f4

08008218 <receiveSerial>:
 */
static uint8 receiveSerial(tSerial* serial)
{
	//uint8 data;
	//data = LL_LPUART_ReceiveData8(LPUART1);
	return (uint8_t)(pX2CHUART.Instance->RDR & 0xFFU);
 8008218:	4b02      	ldr	r3, [pc, #8]	@ (8008224 <receiveSerial+0xc>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
}
 800821e:	b2c0      	uxtb	r0, r0
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	200001f4 	.word	0x200001f4

08008228 <isReceiveDataAvailable>:
 * @param serial Serial interface object.
 * @return 1 when data is available, 0 otherwise.
 */
static uint8 isReceiveDataAvailable(tSerial* serial)
{
	return ((pX2CHUART.Instance->ISR & USART_ISR_RXNE_RXFNE) ? 1UL : 0UL);
 8008228:	4b02      	ldr	r3, [pc, #8]	@ (8008234 <isReceiveDataAvailable+0xc>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	69d8      	ldr	r0, [r3, #28]
}
 800822e:	f3c0 1040 	ubfx	r0, r0, #5, #1
 8008232:	4770      	bx	lr
 8008234:	200001f4 	.word	0x200001f4

08008238 <isSendReady>:
 * @param serial Serial interface object.
 * @return 1 when data can be send, 0 otherwise.
 */
static uint8 isSendReady(tSerial* serial)
{
	return ((pX2CHUART.Instance->ISR & USART_ISR_TXE_TXFNF) ? 1UL : 0UL);
 8008238:	4b02      	ldr	r3, [pc, #8]	@ (8008244 <isSendReady+0xc>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	69d8      	ldr	r0, [r3, #28]
}
 800823e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8008242:	4770      	bx	lr
 8008244:	200001f4 	.word	0x200001f4

08008248 <initSerial>:
	__HAL_UART_ENABLE(&pX2CHUART);
 8008248:	4b08      	ldr	r3, [pc, #32]	@ (800826c <initSerial+0x24>)
	serial->receive = (uint8 (*)(tInterface*))receiveSerial;
 800824a:	4909      	ldr	r1, [pc, #36]	@ (8008270 <initSerial+0x28>)
	__HAL_UART_ENABLE(&pX2CHUART);
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	6813      	ldr	r3, [r2, #0]
 8008250:	f043 0301 	orr.w	r3, r3, #1
{
 8008254:	b410      	push	{r4}
	__HAL_UART_ENABLE(&pX2CHUART);
 8008256:	6013      	str	r3, [r2, #0]
	serial->isReceiveDataAvailable = (uint8 (*)(tInterface*))isReceiveDataAvailable;
 8008258:	4a06      	ldr	r2, [pc, #24]	@ (8008274 <initSerial+0x2c>)
	serial->send = (void (*)(tInterface*, uint8))sendSerial;
 800825a:	4c07      	ldr	r4, [pc, #28]	@ (8008278 <initSerial+0x30>)
	serial->isSendReady = (uint8 (*)(tInterface*))isSendReady;
 800825c:	4b07      	ldr	r3, [pc, #28]	@ (800827c <initSerial+0x34>)
	serial->send = (void (*)(tInterface*, uint8))sendSerial;
 800825e:	6004      	str	r4, [r0, #0]
	serial->isReceiveDataAvailable = (uint8 (*)(tInterface*))isReceiveDataAvailable;
 8008260:	e9c0 1201 	strd	r1, r2, [r0, #4]
}
 8008264:	f85d 4b04 	ldr.w	r4, [sp], #4
	serial->isSendReady = (uint8 (*)(tInterface*))isSendReady;
 8008268:	60c3      	str	r3, [r0, #12]
}
 800826a:	4770      	bx	lr
 800826c:	200001f4 	.word	0x200001f4
 8008270:	08008219 	.word	0x08008219
 8008274:	08008229 	.word	0x08008229
 8008278:	0800820d 	.word	0x0800820d
 800827c:	08008239 	.word	0x08008239

08008280 <stand_im_init_1>:
/*
 * stand_im_init_1
 */
void stand_im_init_1(void) {

}
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop

08008284 <stand_im_init_2>:

/*
 * stand_im_init_2
 */
void stand_im_init_2(void) {
 8008284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	/* X2C */

	initTableStruct();
	initVersionInfo(TableStruct, APPLICATION_VERSION);
 8008288:	4f41      	ldr	r7, [pc, #260]	@ (8008390 <stand_im_init_2+0x10c>)

	initSerialGeneric(&interface);
 800828a:	4d42      	ldr	r5, [pc, #264]	@ (8008394 <stand_im_init_2+0x110>)
	initSerial(&interface);
	linkSerial((tProtocol*) &protocol, &interface);
 800828c:	4c42      	ldr	r4, [pc, #264]	@ (8008398 <stand_im_init_2+0x114>)
	 * Spusteni kalibrace pro single-ended rezim.
	 * Kdyby se pouzival differential, tak je to tu potreba zmenit.
	 */
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800828e:	f8df 8134 	ldr.w	r8, [pc, #308]	@ 80083c4 <stand_im_init_2+0x140>
	 * ale jedna se o pocet prenosu v jedne davce
	 */

	//HAL_ADCEx_MultiModeStart_DMA(&hadc1, (uint32_t*) &rawAdcData[0].adc12,
	//ADC12_NUM_OF_SAMPLES);
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &rawAdcData[0].adc1,
 8008292:	f8df 9134 	ldr.w	r9, [pc, #308]	@ 80083c8 <stand_im_init_2+0x144>
	initTableStruct();
 8008296:	f7ff fcdf 	bl	8007c58 <initTableStruct>
	initVersionInfo(TableStruct, APPLICATION_VERSION);
 800829a:	2101      	movs	r1, #1
 800829c:	6838      	ldr	r0, [r7, #0]
 800829e:	f7ff fd03 	bl	8007ca8 <initVersionInfo>
	initSerialGeneric(&interface);
 80082a2:	4628      	mov	r0, r5
 80082a4:	f7ff f908 	bl	80074b8 <initSerialGeneric>
	initSerial(&interface);
 80082a8:	4628      	mov	r0, r5
 80082aa:	f7ff ffcd 	bl	8008248 <initSerial>
	linkSerial((tProtocol*) &protocol, &interface);
 80082ae:	4629      	mov	r1, r5
 80082b0:	4620      	mov	r0, r4
 80082b2:	f7ff f91d 	bl	80074f0 <linkSerial>
	initLNet(&protocol, bufferLNet, LNET_BUFFERSIZE, LNET_NODEID);
 80082b6:	4939      	ldr	r1, [pc, #228]	@ (800839c <stand_im_init_2+0x118>)
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80082b8:	4d39      	ldr	r5, [pc, #228]	@ (80083a0 <stand_im_init_2+0x11c>)
	initLNet(&protocol, bufferLNet, LNET_BUFFERSIZE, LNET_NODEID);
 80082ba:	22ff      	movs	r2, #255	@ 0xff
 80082bc:	2301      	movs	r3, #1
 80082be:	4620      	mov	r0, r4
 80082c0:	f7fe fb92 	bl	80069e8 <initLNet>
	initServiceTable((tProtocol*) &protocol);
 80082c4:	4620      	mov	r0, r4
 80082c6:	f7ff fc8f 	bl	8007be8 <initServiceTable>
	addCoreServices((tProtocol*) &protocol);
 80082ca:	4620      	mov	r0, r4
 80082cc:	f7ff fc9e 	bl	8007c0c <addCoreServices>
	addBlockServices((tProtocol*) &protocol);
 80082d0:	4620      	mov	r0, r4
 80082d2:	f7fe f82d 	bl	8006330 <addBlockServices>
	addTableStructProtocol((tProtocol*) &protocol);
 80082d6:	4620      	mov	r0, r4
 80082d8:	f7ff fcd4 	bl	8007c84 <addTableStructProtocol>
	KICK_DOG
 80082dc:	4831      	ldr	r0, [pc, #196]	@ (80083a4 <stand_im_init_2+0x120>)
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80082de:	4c32      	ldr	r4, [pc, #200]	@ (80083a8 <stand_im_init_2+0x124>)
	KICK_DOG
 80082e0:	f7fb fe4e 	bl	8003f80 <HAL_IWDG_Refresh>
	TableStruct->DSPState = PRG_LOADED_STATE;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	2601      	movs	r6, #1
 80082e8:	731e      	strb	r6, [r3, #12]
	X2C_Init();
 80082ea:	f7ff fce3 	bl	8007cb4 <X2C_Init>
	HrtimEnDis.In = x2cModel.outports.bOutPWMEnable;
 80082ee:	4a2f      	ldr	r2, [pc, #188]	@ (80083ac <stand_im_init_2+0x128>)
 80082f0:	4b2f      	ldr	r3, [pc, #188]	@ (80083b0 <stand_im_init_2+0x12c>)
 80082f2:	f8d2 22f8 	ldr.w	r2, [r2, #760]	@ 0x2f8
	HAL_HRTIM_WaveformCountStart_IT(&hhrtim1,
 80082f6:	482f      	ldr	r0, [pc, #188]	@ (80083b4 <stand_im_init_2+0x130>)
	HrtimEnDis.In = x2cModel.outports.bOutPWMEnable;
 80082f8:	601a      	str	r2, [r3, #0]
	HAL_HRTIM_WaveformCountStart_IT(&hhrtim1,
 80082fa:	f44f 2170 	mov.w	r1, #983040	@ 0xf0000
 80082fe:	f7fb fd25 	bl	8003d4c <HAL_HRTIM_WaveformCountStart_IT>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8008302:	217f      	movs	r1, #127	@ 0x7f
 8008304:	4628      	mov	r0, r5
 8008306:	f7fa f90f 	bl	8002528 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800830a:	217f      	movs	r1, #127	@ 0x7f
 800830c:	4620      	mov	r0, r4
 800830e:	f7fa f90b 	bl	8002528 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8008312:	217f      	movs	r1, #127	@ 0x7f
 8008314:	4640      	mov	r0, r8
 8008316:	f7fa f907 	bl	8002528 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &rawAdcData[0].adc1,
 800831a:	4632      	mov	r2, r6
 800831c:	4649      	mov	r1, r9
 800831e:	4628      	mov	r0, r5
 8008320:	f7fa f83e 	bl	80023a0 <HAL_ADC_Start_DMA>
	ADC1_NUM_OF_SAMPLES);
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &rawAdcData[0].adc2,
 8008324:	4632      	mov	r2, r6
 8008326:	f109 0102 	add.w	r1, r9, #2
 800832a:	4620      	mov	r0, r4
 800832c:	f7fa f838 	bl	80023a0 <HAL_ADC_Start_DMA>
	ADC2_NUM_OF_SAMPLES);
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*) &rawAdcData[0].adc3,
 8008330:	4632      	mov	r2, r6
 8008332:	f109 0104 	add.w	r1, r9, #4
 8008336:	4640      	mov	r0, r8
 8008338:	f7fa f832 	bl	80023a0 <HAL_ADC_Start_DMA>
	/*
	 * Zakazeme si zbytecna preruseni od DMA.
	 * Povolene zustave pouze TC (transfer complete)
	 * po skonceni sekvence prenosu
	 */
	__HAL_DMA_DISABLE_IT(hadc1.DMA_Handle, DMA_IT_HT | DMA_IT_TE);
 800833c:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
	__HAL_DMA_DISABLE_IT(hadc2.DMA_Handle, DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
	__HAL_DMA_DISABLE_IT(hadc3.DMA_Handle, DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800833e:	f8d8 3054 	ldr.w	r3, [r8, #84]	@ 0x54
	__HAL_DMA_DISABLE_IT(hadc1.DMA_Handle, DMA_IT_HT | DMA_IT_TE);
 8008342:	6811      	ldr	r1, [r2, #0]
	__HAL_DMA_DISABLE_IT(hadc3.DMA_Handle, DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008344:	681e      	ldr	r6, [r3, #0]
	__HAL_DMA_DISABLE_IT(hadc1.DMA_Handle, DMA_IT_HT | DMA_IT_TE);
 8008346:	680b      	ldr	r3, [r1, #0]

	//__HAL_ADC_ENABLE_IT(&hadc3,(ADC_IT_EOS | ADC_IT_EOC));

	// Vynulovani Offsetu
	hadc2.Instance->OFR1 &= ~ADC_OFR1_OFFSET1;
	hadc1.Instance->OFR1 &= ~ADC_OFR1_OFFSET1;
 8008348:	682a      	ldr	r2, [r5, #0]
	hadc2.Instance->OFR1 &= ~ADC_OFR1_OFFSET1;
 800834a:	6820      	ldr	r0, [r4, #0]
	__HAL_DMA_DISABLE_IT(hadc1.DMA_Handle, DMA_IT_HT | DMA_IT_TE);
 800834c:	f023 030c 	bic.w	r3, r3, #12
 8008350:	600b      	str	r3, [r1, #0]
	__HAL_DMA_DISABLE_IT(hadc2.DMA_Handle, DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008352:	6d63      	ldr	r3, [r4, #84]	@ 0x54
	hadc2.Instance->OFR1 &= ~ADC_OFR1_OFFSET1;
 8008354:	4918      	ldr	r1, [pc, #96]	@ (80083b8 <stand_im_init_2+0x134>)
	__HAL_DMA_DISABLE_IT(hadc2.DMA_Handle, DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008356:	681c      	ldr	r4, [r3, #0]
 8008358:	6823      	ldr	r3, [r4, #0]
 800835a:	f023 030e 	bic.w	r3, r3, #14
 800835e:	6023      	str	r3, [r4, #0]
	__HAL_DMA_DISABLE_IT(hadc3.DMA_Handle, DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8008360:	6833      	ldr	r3, [r6, #0]
 8008362:	f023 030e 	bic.w	r3, r3, #14
 8008366:	6033      	str	r3, [r6, #0]
	hadc2.Instance->OFR1 &= ~ADC_OFR1_OFFSET1;
 8008368:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800836a:	400b      	ands	r3, r1
 800836c:	6603      	str	r3, [r0, #96]	@ 0x60
	hadc1.Instance->OFR1 &= ~ADC_OFR1_OFFSET1;
 800836e:	6e13      	ldr	r3, [r2, #96]	@ 0x60

	/*
	 * TIM2: Simulovany enkoder z AD2S1200
	 */
	HAL_TIM_Base_Start(&htim2);
 8008370:	4812      	ldr	r0, [pc, #72]	@ (80083bc <stand_im_init_2+0x138>)
	hadc1.Instance->OFR1 &= ~ADC_OFR1_OFFSET1;
 8008372:	400b      	ands	r3, r1
 8008374:	6613      	str	r3, [r2, #96]	@ 0x60
	HAL_TIM_Base_Start(&htim2);
 8008376:	f7fc fbb5 	bl	8004ae4 <HAL_TIM_Base_Start>

	TableStruct->DSPState = INIT_STATE;
 800837a:	683b      	ldr	r3, [r7, #0]
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_RXNE(SPI_TypeDef *SPIx)
{
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 800837c:	4a10      	ldr	r2, [pc, #64]	@ (80083c0 <stand_im_init_2+0x13c>)
 800837e:	2103      	movs	r1, #3
 8008380:	7319      	strb	r1, [r3, #12]
 8008382:	6853      	ldr	r3, [r2, #4]
 8008384:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008388:	6053      	str	r3, [r2, #4]
	//TableStruct->DSPState = RUN_STATE_POWER_ON;

	// Init SPI for AD2S1200:
	AD2S1200_SPIInit();
}
 800838a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800838e:	bf00      	nop
 8008390:	2000000c 	.word	0x2000000c
 8008394:	20001be4 	.word	0x20001be4
 8008398:	20001bb0 	.word	0x20001bb0
 800839c:	20001ab0 	.word	0x20001ab0
 80083a0:	200005e0 	.word	0x200005e0
 80083a4:	20000288 	.word	0x20000288
 80083a8:	20000574 	.word	0x20000574
 80083ac:	20001748 	.word	0x20001748
 80083b0:	20001aa0 	.word	0x20001aa0
 80083b4:	200002ec 	.word	0x200002ec
 80083b8:	fffff000 	.word	0xfffff000
 80083bc:	20000080 	.word	0x20000080
 80083c0:	40013000 	.word	0x40013000
 80083c4:	20000508 	.word	0x20000508
 80083c8:	20001aa8 	.word	0x20001aa8

080083cc <stand_im_loop>:

/*
 *
 */
void stand_im_loop(void) {
 80083cc:	b508      	push	{r3, lr}
	TableStruct->protocols[0]->pCommunicate(
 80083ce:	4b05      	ldr	r3, [pc, #20]	@ (80083e4 <stand_im_loop+0x18>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	699a      	ldr	r2, [r3, #24]
			(tProtocol*) TableStruct->protocols[0]);
 80083d4:	6998      	ldr	r0, [r3, #24]
	TableStruct->protocols[0]->pCommunicate(
 80083d6:	6813      	ldr	r3, [r2, #0]
 80083d8:	4798      	blx	r3
	KICK_DOG
	;
}
 80083da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	KICK_DOG
 80083de:	4802      	ldr	r0, [pc, #8]	@ (80083e8 <stand_im_loop+0x1c>)
 80083e0:	f7fb bdce 	b.w	8003f80 <HAL_IWDG_Refresh>
 80083e4:	2000000c 	.word	0x2000000c
 80083e8:	20000288 	.word	0x20000288

080083ec <stand_im_periodic_isr>:
 *
 */
void stand_im_periodic_isr(void) {

	//GPIOA->BSRR = GPIO_PIN_6;
	__HAL_DMA_CLEAR_FLAG(hadc1.DMA_Handle, DMA_FLAG_TC1);
 80083ec:	48aa      	ldr	r0, [pc, #680]	@ (8008698 <stand_im_periodic_isr+0x2ac>)
 80083ee:	4bab      	ldr	r3, [pc, #684]	@ (800869c <stand_im_periodic_isr+0x2b0>)
 80083f0:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80083f2:	6812      	ldr	r2, [r2, #0]
 80083f4:	429a      	cmp	r2, r3
void stand_im_periodic_isr(void) {
 80083f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__HAL_DMA_CLEAR_FLAG(hadc1.DMA_Handle, DMA_FLAG_TC1);
 80083fa:	f240 8101 	bls.w	8008600 <stand_im_periodic_isr+0x214>
 80083fe:	2202      	movs	r2, #2
 8008400:	f8c3 2370 	str.w	r2, [r3, #880]	@ 0x370
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8008404:	4ba6      	ldr	r3, [pc, #664]	@ (80086a0 <stand_im_periodic_isr+0x2b4>)
 *
 * 	Call it at least 753 ns after AD2S1200_SampleStart.
 */
static inline void AD2S1200_SampleStop(void){
	LL_SPI_Enable(AD2S1200_SPI);
	AD2S1200_NSAMPLE_PORT->BSRR = AD2S1200_NSAMPLE_PIN;
 8008406:	49a7      	ldr	r1, [pc, #668]	@ (80086a4 <stand_im_periodic_isr+0x2b8>)
 8008408:	681a      	ldr	r2, [r3, #0]
	PositionEncoder1 = sTimCntTmp;
	x2cModel.inports.bInPositionEncoder1 =  sTimCntTmp * (float)(M_PI / (1<<15));

	x2cModel.inports.bInButton = readBtn();
	x2cModel.inports.bInEnable = readEnable();
	x2cModel.inports.bInPwmFault = readHrtimPWM_Fault();
 800840a:	4ea7      	ldr	r6, [pc, #668]	@ (80086a8 <stand_im_periodic_isr+0x2bc>)
	x2cModel.inports.bInPositionEncoder1 =  sTimCntTmp * (float)(M_PI / (1<<15));
 800840c:	eddf 5aa7 	vldr	s11, [pc, #668]	@ 80086ac <stand_im_periodic_isr+0x2c0>

	x2cModel.inports.bInIc = -((float) (rawAdcData[0].adc1.samples.Ic)
			* ADC_CURRENT_GAIN);
 8008410:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 80086b0 <stand_im_periodic_isr+0x2c4>
	x2cModel.inports.bInIa = -((float) (rawAdcData[0].adc2.samples.Ia)
			* ADC_CURRENT_GAIN);
	x2cModel.inports.bInVdc = ((float) (rawAdcData[0].adc3.samples.Vdc)
			* ADC_VOLTAGE_GAIN);
 8008414:	ed9f 5aa7 	vldr	s10, [pc, #668]	@ 80086b4 <stand_im_periodic_isr+0x2c8>
 8008418:	2420      	movs	r4, #32
 800841a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800841e:	601a      	str	r2, [r3, #0]
 8008420:	618c      	str	r4, [r1, #24]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8008422:	681a      	ldr	r2, [r3, #0]
	sTimCntTmp = (int16_t)(TIM2->CNT << (16-PositionEncoder1BitRes));
 8008424:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8008428:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
	x2cModel.inports.bInButton = readBtn();
 8008430:	4aa1      	ldr	r2, [pc, #644]	@ (80086b8 <stand_im_periodic_isr+0x2cc>)
	PositionEncoder1 = sTimCntTmp;
 8008432:	4ca2      	ldr	r4, [pc, #648]	@ (80086bc <stand_im_periodic_isr+0x2d0>)
	x2cModel.inports.bInButton = readBtn();
 8008434:	6915      	ldr	r5, [r2, #16]
	x2cModel.inports.bInEnable = readEnable();
 8008436:	6909      	ldr	r1, [r1, #16]
	x2cModel.inports.bInIc = -((float) (rawAdcData[0].adc1.samples.Ic)
 8008438:	4aa1      	ldr	r2, [pc, #644]	@ (80086c0 <stand_im_periodic_isr+0x2d4>)
	sTimCntTmp = (int16_t)(TIM2->CNT << (16-PositionEncoder1BitRes));
 800843a:	015b      	lsls	r3, r3, #5
 800843c:	b21b      	sxth	r3, r3
	PositionEncoder1 = sTimCntTmp;
 800843e:	8023      	strh	r3, [r4, #0]
	x2cModel.inports.bInPositionEncoder1 =  sTimCntTmp * (float)(M_PI / (1<<15));
 8008440:	4ca0      	ldr	r4, [pc, #640]	@ (80086c4 <stand_im_periodic_isr+0x2d8>)
 8008442:	ee07 3a90 	vmov	s15, r3
	x2cModel.inports.bInButton = readBtn();
 8008446:	f3c5 3340 	ubfx	r3, r5, #13, #1
 800844a:	f884 32d0 	strb.w	r3, [r4, #720]	@ 0x2d0
	x2cModel.inports.bInEnable = readEnable();
 800844e:	f3c1 23c0 	ubfx	r3, r1, #11, #1
 8008452:	f884 32d1 	strb.w	r3, [r4, #721]	@ 0x2d1
	x2cModel.inports.bInPwmFault = readHrtimPWM_Fault();
 8008456:	f8d6 339c 	ldr.w	r3, [r6, #924]	@ 0x39c
 800845a:	f8d6 1394 	ldr.w	r1, [r6, #916]	@ 0x394
	x2cModel.inports.bInIc = -((float) (rawAdcData[0].adc1.samples.Ic)
 800845e:	f9b2 6000 	ldrsh.w	r6, [r2]
	x2cModel.inports.bInIa = -((float) (rawAdcData[0].adc2.samples.Ia)
 8008462:	f9b2 5002 	ldrsh.w	r5, [r2, #2]
	x2cModel.inports.bInPwmFault = readHrtimPWM_Fault();
 8008466:	ea23 0301 	bic.w	r3, r3, r1
 800846a:	f013 030f 	ands.w	r3, r3, #15
	x2cModel.inports.bInPositionEncoder1 =  sTimCntTmp * (float)(M_PI / (1<<15));
 800846e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	x2cModel.inports.bInPwmFault = readHrtimPWM_Fault();
 8008472:	bf18      	it	ne
 8008474:	2301      	movne	r3, #1
	x2cModel.inports.bInPositionEncoder1 =  sTimCntTmp * (float)(M_PI / (1<<15));
 8008476:	ee67 7aa5 	vmul.f32	s15, s15, s11
	x2cModel.inports.bInPwmFault = readHrtimPWM_Fault();
 800847a:	f884 32ec 	strb.w	r3, [r4, #748]	@ 0x2ec
	x2cModel.inports.bInVdc = ((float) (rawAdcData[0].adc3.samples.Vdc)
 800847e:	8893      	ldrh	r3, [r2, #4]
	x2cModel.inports.bInPositionEncoder1 =  sTimCntTmp * (float)(M_PI / (1<<15));
 8008480:	edc4 7ab8 	vstr	s15, [r4, #736]	@ 0x2e0
	x2cModel.inports.bInVdc = ((float) (rawAdcData[0].adc3.samples.Vdc)
 8008484:	ee07 3a10 	vmov	s14, r3
	x2cModel.inports.bInIc = -((float) (rawAdcData[0].adc1.samples.Ic)
 8008488:	ee07 6a90 	vmov	s15, r6

	x2cModel.inports.bInPositionResolver = AD2S1200_Data.Position * (float)(M_PI / (1<<15));
 800848c:	4b8e      	ldr	r3, [pc, #568]	@ (80086c8 <stand_im_periodic_isr+0x2dc>)
	x2cModel.inports.bInIc = -((float) (rawAdcData[0].adc1.samples.Ic)
 800848e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
	x2cModel.inports.bInPositionResolver = AD2S1200_Data.Position * (float)(M_PI / (1<<15));
 8008492:	f9b3 3000 	ldrsh.w	r3, [r3]
	x2cModel.inports.bInIa = -((float) (rawAdcData[0].adc2.samples.Ia)
 8008496:	ee07 5a90 	vmov	s15, r5
 800849a:	eef8 4ae7 	vcvt.f32.s32	s9, s15
	x2cModel.inports.bInPositionResolver = AD2S1200_Data.Position * (float)(M_PI / (1<<15));
 800849e:	ee07 3a90 	vmov	s15, r3
	x2cModel.inports.bInVdc = ((float) (rawAdcData[0].adc3.samples.Vdc)
 80084a2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	x2cModel.inports.bInPositionResolver = AD2S1200_Data.Position * (float)(M_PI / (1<<15));
 80084a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15

	switch (TableStruct->DSPState) {
 80084aa:	4b88      	ldr	r3, [pc, #544]	@ (80086cc <stand_im_periodic_isr+0x2e0>)
	x2cModel.inports.bInIc = -((float) (rawAdcData[0].adc1.samples.Ic)
 80084ac:	ee26 6ac6 	vnmul.f32	s12, s13, s12
			* ADC_VOLTAGE_GAIN);
 80084b0:	ee27 7a05 	vmul.f32	s14, s14, s10
	x2cModel.inports.bInIa = -((float) (rawAdcData[0].adc2.samples.Ia)
 80084b4:	ee66 6ae4 	vnmul.f32	s13, s13, s9
	x2cModel.inports.bInPositionResolver = AD2S1200_Data.Position * (float)(M_PI / (1<<15));
 80084b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
	switch (TableStruct->DSPState) {
 80084bc:	681f      	ldr	r7, [r3, #0]
	x2cModel.inports.bInIc = -((float) (rawAdcData[0].adc1.samples.Ic)
 80084be:	ed84 6ab7 	vstr	s12, [r4, #732]	@ 0x2dc
	x2cModel.inports.bInIa = -((float) (rawAdcData[0].adc2.samples.Ia)
 80084c2:	edc4 6ab5 	vstr	s13, [r4, #724]	@ 0x2d4
	x2cModel.inports.bInVdc = ((float) (rawAdcData[0].adc3.samples.Vdc)
 80084c6:	ed84 7abc 	vstr	s14, [r4, #752]	@ 0x2f0
	x2cModel.inports.bInPositionResolver = AD2S1200_Data.Position * (float)(M_PI / (1<<15));
 80084ca:	edc4 7aba 	vstr	s15, [r4, #744]	@ 0x2e8
	switch (TableStruct->DSPState) {
 80084ce:	7b3b      	ldrb	r3, [r7, #12]
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	f000 8098 	beq.w	8008608 <stand_im_periodic_isr+0x21c>
 80084d8:	3a04      	subs	r2, #4
 80084da:	2a01      	cmp	r2, #1
 80084dc:	f200 8082 	bhi.w	80085e4 <stand_im_periodic_isr+0x1f8>
			TableStruct->DSPState = RUN_STATE_POWER_OFF;
		}
		break;
	case RUN_STATE_POWER_OFF:
	case RUN_STATE_POWER_ON:
		X2C_Update_1();
 80084e0:	f7ff fe16 	bl	8008110 <X2C_Update_1>
	bool lastState;
} controlHrtimPWM_EnDis_typedef;

static inline void controlHrtimPWM_EnDis(controlHrtimPWM_EnDis_typedef *S) {
	// zapinani nabeznou hranou
	if (*S->In) {
 80084e4:	497a      	ldr	r1, [pc, #488]	@ (80086d0 <stand_im_periodic_isr+0x2e4>)
 80084e6:	680b      	ldr	r3, [r1, #0]
 80084e8:	7818      	ldrb	r0, [r3, #0]
	case PRG_LOADED_STATE:
	default:
		break;
	}

	hhrtim1.Instance->sTimerxRegs[0].CMP1xR = modToCmp(
 80084ea:	f8d4 22fc 	ldr.w	r2, [r4, #764]	@ 0x2fc

/* Fuinkce slouzi pro prepocet relativniho napeti
*  na CMP1 (set register) PWM modulatoru
*/
static inline uint32_t modToCmp(float x){
	if(x >=  0.999f) return (HRTIM_PERIOD)-32;
 80084ee:	eddf 7a79 	vldr	s15, [pc, #484]	@ 80086d4 <stand_im_periodic_isr+0x2e8>
 80084f2:	ed92 7a00 	vldr	s14, [r2]
 80084f6:	4b78      	ldr	r3, [pc, #480]	@ (80086d8 <stand_im_periodic_isr+0x2ec>)
 80084f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80084fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	f280 809b 	bge.w	800863c <stand_im_periodic_isr+0x250>
	if(x <= -0.999f) return 32;
 8008506:	eddf 7a75 	vldr	s15, [pc, #468]	@ 80086dc <stand_im_periodic_isr+0x2f0>
 800850a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800850e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008512:	f240 80bf 	bls.w	8008694 <stand_im_periodic_isr+0x2a8>
	return (uint32_t)(HRTIM_PERIOD) * (0.5f + 0.5f * x);
 8008516:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800851a:	eee7 7a27 	vfma.f32	s15, s14, s15
 800851e:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 80086e0 <stand_im_periodic_isr+0x2f4>
 8008522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800852a:	ee17 3a90 	vmov	r3, s15
 800852e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
			*x2cModel.outports.bOutPWMa);
	hhrtim1.Instance->sTimerxRegs[1].CMP1xR = modToCmp(
 8008532:	f8d4 3300 	ldr.w	r3, [r4, #768]	@ 0x300
	if(x >=  0.999f) return (HRTIM_PERIOD)-32;
 8008536:	eddf 7a67 	vldr	s15, [pc, #412]	@ 80086d4 <stand_im_periodic_isr+0x2e8>
 800853a:	ed93 7a00 	vldr	s14, [r3]
 800853e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008546:	da7f      	bge.n	8008648 <stand_im_periodic_isr+0x25c>
	if(x <= -0.999f) return 32;
 8008548:	eddf 7a64 	vldr	s15, [pc, #400]	@ 80086dc <stand_im_periodic_isr+0x2f0>
 800854c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008554:	f240 809c 	bls.w	8008690 <stand_im_periodic_isr+0x2a4>
	return (uint32_t)(HRTIM_PERIOD) * (0.5f + 0.5f * x);
 8008558:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800855c:	eee7 7a27 	vfma.f32	s15, s14, s15
 8008560:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 80086e0 <stand_im_periodic_isr+0x2f4>
 8008564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800856c:	ee17 3a90 	vmov	r3, s15
 8008570:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
			*x2cModel.outports.bOutPWMb);
	hhrtim1.Instance->sTimerxRegs[2].CMP1xR = modToCmp(
 8008574:	f8d4 3304 	ldr.w	r3, [r4, #772]	@ 0x304
	if(x >=  0.999f) return (HRTIM_PERIOD)-32;
 8008578:	eddf 7a56 	vldr	s15, [pc, #344]	@ 80086d4 <stand_im_periodic_isr+0x2e8>
 800857c:	ed93 7a00 	vldr	s14, [r3]
 8008580:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008588:	da5b      	bge.n	8008642 <stand_im_periodic_isr+0x256>
	if(x <= -0.999f) return 32;
 800858a:	eddf 7a54 	vldr	s15, [pc, #336]	@ 80086dc <stand_im_periodic_isr+0x2f0>
 800858e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008596:	d979      	bls.n	800868c <stand_im_periodic_isr+0x2a0>
	return (uint32_t)(HRTIM_PERIOD) * (0.5f + 0.5f * x);
 8008598:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800859c:	eee7 7a27 	vfma.f32	s15, s14, s15
 80085a0:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80086e0 <stand_im_periodic_isr+0x2f4>
 80085a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80085a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ac:	ee17 3a90 	vmov	r3, s15
			*x2cModel.outports.bOutPWMc);

	writeErrClear(*x2cModel.outports.bOutErrClear);
 80085b0:	f8d4 42f4 	ldr.w	r4, [r4, #756]	@ 0x2f4
	hhrtim1.Instance->sTimerxRegs[2].CMP1xR = modToCmp(
 80085b4:	f8c2 319c 	str.w	r3, [r2, #412]	@ 0x19c
	writeErrClear(*x2cModel.outports.bOutErrClear);
 80085b8:	7822      	ldrb	r2, [r4, #0]
 80085ba:	4b3f      	ldr	r3, [pc, #252]	@ (80086b8 <stand_im_periodic_isr+0x2cc>)
 80085bc:	2a00      	cmp	r2, #0
 80085be:	bf0c      	ite	eq
 80085c0:	f04f 5280 	moveq.w	r2, #268435456	@ 0x10000000
 80085c4:	f44f 5280 	movne.w	r2, #4096	@ 0x1000
 80085c8:	619a      	str	r2, [r3, #24]
	if (*S->In) {
 80085ca:	b178      	cbz	r0, 80085ec <stand_im_periodic_isr+0x200>
		if (S->lastState == 0)
 80085cc:	790b      	ldrb	r3, [r1, #4]
 80085ce:	b933      	cbnz	r3, 80085de <stand_im_periodic_isr+0x1f2>
			HRTIM1->sCommonRegs.OENR |= HRTIM_PhAll_OENR;
 80085d0:	4a35      	ldr	r2, [pc, #212]	@ (80086a8 <stand_im_periodic_isr+0x2bc>)
 80085d2:	f8d2 3394 	ldr.w	r3, [r2, #916]	@ 0x394
 80085d6:	f043 030f 	orr.w	r3, r3, #15
 80085da:	f8c2 3394 	str.w	r3, [r2, #916]	@ 0x394
	S->lastState = *S->In;
 80085de:	7108      	strb	r0, [r1, #4]
	controlHrtimPWM_EnDis(&HrtimEnDis);
	//GPIOA->BRR = GPIO_PIN_6;

}
 80085e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*S->In) {
 80085e4:	493a      	ldr	r1, [pc, #232]	@ (80086d0 <stand_im_periodic_isr+0x2e4>)
 80085e6:	680b      	ldr	r3, [r1, #0]
 80085e8:	7818      	ldrb	r0, [r3, #0]
 80085ea:	e77e      	b.n	80084ea <stand_im_periodic_isr+0xfe>
		HRTIM1->sCommonRegs.ODISR |= HRTIM_PhAll_ODISR;
 80085ec:	4a2e      	ldr	r2, [pc, #184]	@ (80086a8 <stand_im_periodic_isr+0x2bc>)
 80085ee:	f8d2 3398 	ldr.w	r3, [r2, #920]	@ 0x398
 80085f2:	f043 030f 	orr.w	r3, r3, #15
 80085f6:	f8c2 3398 	str.w	r3, [r2, #920]	@ 0x398
	S->lastState = *S->In;
 80085fa:	7108      	strb	r0, [r1, #4]
 80085fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__HAL_DMA_CLEAR_FLAG(hadc1.DMA_Handle, DMA_FLAG_TC1);
 8008600:	4b38      	ldr	r3, [pc, #224]	@ (80086e4 <stand_im_periodic_isr+0x2f8>)
 8008602:	2202      	movs	r2, #2
 8008604:	605a      	str	r2, [r3, #4]
 8008606:	e6fd      	b.n	8008404 <stand_im_periodic_isr+0x18>
		if (ADCOffsetCntr--) {
 8008608:	4b37      	ldr	r3, [pc, #220]	@ (80086e8 <stand_im_periodic_isr+0x2fc>)
		HrtimEnDis.In = (_Bool*) &GlobalEnable;
 800860a:	4a38      	ldr	r2, [pc, #224]	@ (80086ec <stand_im_periodic_isr+0x300>)
		if (ADCOffsetCntr--) {
 800860c:	f8d3 e000 	ldr.w	lr, [r3]
		HrtimEnDis.In = (_Bool*) &GlobalEnable;
 8008610:	492f      	ldr	r1, [pc, #188]	@ (80086d0 <stand_im_periodic_isr+0x2e4>)
			ADCOffsetAccum[0] += rawAdcData[0].adc1.samples.Ic;
 8008612:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 80086f8 <stand_im_periodic_isr+0x30c>
		HrtimEnDis.In = (_Bool*) &GlobalEnable;
 8008616:	600a      	str	r2, [r1, #0]
		GlobalEnable = 0;
 8008618:	f04f 0800 	mov.w	r8, #0
 800861c:	f882 8000 	strb.w	r8, [r2]
		if (ADCOffsetCntr--) {
 8008620:	f10e 32ff 	add.w	r2, lr, #4294967295
 8008624:	601a      	str	r2, [r3, #0]
			ADCOffsetAccum[1] += rawAdcData[0].adc2.samples.Ia;
 8008626:	e9dc 3200 	ldrd	r3, r2, [ip]
		if (ADCOffsetCntr--) {
 800862a:	f1be 0f00 	cmp.w	lr, #0
 800862e:	d00e      	beq.n	800864e <stand_im_periodic_isr+0x262>
			ADCOffsetAccum[0] += rawAdcData[0].adc1.samples.Ic;
 8008630:	441e      	add	r6, r3
			ADCOffsetAccum[1] += rawAdcData[0].adc2.samples.Ia;
 8008632:	4415      	add	r5, r2
 8008634:	e9cc 6500 	strd	r6, r5, [ip]
 8008638:	4640      	mov	r0, r8
 800863a:	e756      	b.n	80084ea <stand_im_periodic_isr+0xfe>
	if(x >=  0.999f) return (HRTIM_PERIOD)-32;
 800863c:	f244 2348 	movw	r3, #16968	@ 0x4248
 8008640:	e775      	b.n	800852e <stand_im_periodic_isr+0x142>
 8008642:	f244 2348 	movw	r3, #16968	@ 0x4248
 8008646:	e7b3      	b.n	80085b0 <stand_im_periodic_isr+0x1c4>
 8008648:	f244 2348 	movw	r3, #16968	@ 0x4248
 800864c:	e790      	b.n	8008570 <stand_im_periodic_isr+0x184>
			hadc1.Instance->OFR1 &= ~ADC_OFR1_OFFSET1;
 800864e:	6800      	ldr	r0, [r0, #0]
 8008650:	4e27      	ldr	r6, [pc, #156]	@ (80086f0 <stand_im_periodic_isr+0x304>)
 8008652:	6e05      	ldr	r5, [r0, #96]	@ 0x60
 8008654:	4035      	ands	r5, r6
 8008656:	6605      	str	r5, [r0, #96]	@ 0x60
			hadc1.Instance->OFR1 |= ADCOffsetAccum[0] & ADC_OFR1_OFFSET1;
 8008658:	6e05      	ldr	r5, [r0, #96]	@ 0x60
			ADCOffsetAccum[0] >>= ADCOffsetShift;
 800865a:	091b      	lsrs	r3, r3, #4
			ADCOffsetAccum[1] >>= ADCOffsetShift;
 800865c:	0912      	lsrs	r2, r2, #4
 800865e:	e9cc 3200 	strd	r3, r2, [ip]
			hadc1.Instance->OFR1 |= ADCOffsetAccum[0] & ADC_OFR1_OFFSET1;
 8008662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008666:	432b      	orrs	r3, r5
 8008668:	6603      	str	r3, [r0, #96]	@ 0x60
			hadc2.Instance->OFR1 &= ~ADC_OFR1_OFFSET1;
 800866a:	4b22      	ldr	r3, [pc, #136]	@ (80086f4 <stand_im_periodic_isr+0x308>)
			HrtimEnDis.In = x2cModel.outports.bOutPWMEnable;
 800866c:	f8d4 52f8 	ldr.w	r5, [r4, #760]	@ 0x2f8
			hadc2.Instance->OFR1 &= ~ADC_OFR1_OFFSET1;
 8008670:	681b      	ldr	r3, [r3, #0]
			HrtimEnDis.In = x2cModel.outports.bOutPWMEnable;
 8008672:	600d      	str	r5, [r1, #0]
			hadc2.Instance->OFR1 &= ~ADC_OFR1_OFFSET1;
 8008674:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8008676:	4030      	ands	r0, r6
 8008678:	6618      	str	r0, [r3, #96]	@ 0x60
			hadc2.Instance->OFR1 |= ADCOffsetAccum[1] & ADC_OFR1_OFFSET1;
 800867a:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 800867c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008680:	4302      	orrs	r2, r0
 8008682:	661a      	str	r2, [r3, #96]	@ 0x60
			TableStruct->DSPState = RUN_STATE_POWER_OFF;
 8008684:	2304      	movs	r3, #4
 8008686:	733b      	strb	r3, [r7, #12]
	if (*S->In) {
 8008688:	7828      	ldrb	r0, [r5, #0]
 800868a:	e72e      	b.n	80084ea <stand_im_periodic_isr+0xfe>
	if(x <= -0.999f) return 32;
 800868c:	2320      	movs	r3, #32
 800868e:	e78f      	b.n	80085b0 <stand_im_periodic_isr+0x1c4>
 8008690:	2320      	movs	r3, #32
 8008692:	e76d      	b.n	8008570 <stand_im_periodic_isr+0x184>
 8008694:	2320      	movs	r3, #32
 8008696:	e74a      	b.n	800852e <stand_im_periodic_isr+0x142>
 8008698:	200005e0 	.word	0x200005e0
 800869c:	40020094 	.word	0x40020094
 80086a0:	40013000 	.word	0x40013000
 80086a4:	48000400 	.word	0x48000400
 80086a8:	40016800 	.word	0x40016800
 80086ac:	38c90fdb 	.word	0x38c90fdb
 80086b0:	3d431827 	.word	0x3d431827
 80086b4:	3c4b13b1 	.word	0x3c4b13b1
 80086b8:	48000800 	.word	0x48000800
 80086bc:	20001a90 	.word	0x20001a90
 80086c0:	20001aa8 	.word	0x20001aa8
 80086c4:	20001748 	.word	0x20001748
 80086c8:	20001a8c 	.word	0x20001a8c
 80086cc:	2000000c 	.word	0x2000000c
 80086d0:	20001aa0 	.word	0x20001aa0
 80086d4:	3f7fbe77 	.word	0x3f7fbe77
 80086d8:	200002ec 	.word	0x200002ec
 80086dc:	bf7fbe77 	.word	0xbf7fbe77
 80086e0:	4684d000 	.word	0x4684d000
 80086e4:	40020000 	.word	0x40020000
 80086e8:	20000010 	.word	0x20000010
 80086ec:	20001a9c 	.word	0x20001a9c
 80086f0:	fffff000 	.word	0xfffff000
 80086f4:	20000574 	.word	0x20000574
 80086f8:	20001a94 	.word	0x20001a94

080086fc <memset>:
 80086fc:	4402      	add	r2, r0
 80086fe:	4603      	mov	r3, r0
 8008700:	4293      	cmp	r3, r2
 8008702:	d100      	bne.n	8008706 <memset+0xa>
 8008704:	4770      	bx	lr
 8008706:	f803 1b01 	strb.w	r1, [r3], #1
 800870a:	e7f9      	b.n	8008700 <memset+0x4>

0800870c <__libc_init_array>:
 800870c:	b570      	push	{r4, r5, r6, lr}
 800870e:	4d0d      	ldr	r5, [pc, #52]	@ (8008744 <__libc_init_array+0x38>)
 8008710:	4c0d      	ldr	r4, [pc, #52]	@ (8008748 <__libc_init_array+0x3c>)
 8008712:	1b64      	subs	r4, r4, r5
 8008714:	10a4      	asrs	r4, r4, #2
 8008716:	2600      	movs	r6, #0
 8008718:	42a6      	cmp	r6, r4
 800871a:	d109      	bne.n	8008730 <__libc_init_array+0x24>
 800871c:	4d0b      	ldr	r5, [pc, #44]	@ (800874c <__libc_init_array+0x40>)
 800871e:	4c0c      	ldr	r4, [pc, #48]	@ (8008750 <__libc_init_array+0x44>)
 8008720:	f000 fd48 	bl	80091b4 <_init>
 8008724:	1b64      	subs	r4, r4, r5
 8008726:	10a4      	asrs	r4, r4, #2
 8008728:	2600      	movs	r6, #0
 800872a:	42a6      	cmp	r6, r4
 800872c:	d105      	bne.n	800873a <__libc_init_array+0x2e>
 800872e:	bd70      	pop	{r4, r5, r6, pc}
 8008730:	f855 3b04 	ldr.w	r3, [r5], #4
 8008734:	4798      	blx	r3
 8008736:	3601      	adds	r6, #1
 8008738:	e7ee      	b.n	8008718 <__libc_init_array+0xc>
 800873a:	f855 3b04 	ldr.w	r3, [r5], #4
 800873e:	4798      	blx	r3
 8008740:	3601      	adds	r6, #1
 8008742:	e7f2      	b.n	800872a <__libc_init_array+0x1e>
 8008744:	08009acc 	.word	0x08009acc
 8008748:	08009acc 	.word	0x08009acc
 800874c:	08009acc 	.word	0x08009acc
 8008750:	08009ad0 	.word	0x08009ad0

08008754 <sinf>:
 8008754:	ee10 3a10 	vmov	r3, s0
 8008758:	b507      	push	{r0, r1, r2, lr}
 800875a:	4a1f      	ldr	r2, [pc, #124]	@ (80087d8 <sinf+0x84>)
 800875c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008760:	4293      	cmp	r3, r2
 8008762:	d807      	bhi.n	8008774 <sinf+0x20>
 8008764:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80087dc <sinf+0x88>
 8008768:	2000      	movs	r0, #0
 800876a:	b003      	add	sp, #12
 800876c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008770:	f000 b88e 	b.w	8008890 <__kernel_sinf>
 8008774:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008778:	d304      	bcc.n	8008784 <sinf+0x30>
 800877a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800877e:	b003      	add	sp, #12
 8008780:	f85d fb04 	ldr.w	pc, [sp], #4
 8008784:	4668      	mov	r0, sp
 8008786:	f000 f8cb 	bl	8008920 <__ieee754_rem_pio2f>
 800878a:	f000 0003 	and.w	r0, r0, #3
 800878e:	2801      	cmp	r0, #1
 8008790:	d00a      	beq.n	80087a8 <sinf+0x54>
 8008792:	2802      	cmp	r0, #2
 8008794:	d00f      	beq.n	80087b6 <sinf+0x62>
 8008796:	b9c0      	cbnz	r0, 80087ca <sinf+0x76>
 8008798:	eddd 0a01 	vldr	s1, [sp, #4]
 800879c:	ed9d 0a00 	vldr	s0, [sp]
 80087a0:	2001      	movs	r0, #1
 80087a2:	f000 f875 	bl	8008890 <__kernel_sinf>
 80087a6:	e7ea      	b.n	800877e <sinf+0x2a>
 80087a8:	eddd 0a01 	vldr	s1, [sp, #4]
 80087ac:	ed9d 0a00 	vldr	s0, [sp]
 80087b0:	f000 f816 	bl	80087e0 <__kernel_cosf>
 80087b4:	e7e3      	b.n	800877e <sinf+0x2a>
 80087b6:	eddd 0a01 	vldr	s1, [sp, #4]
 80087ba:	ed9d 0a00 	vldr	s0, [sp]
 80087be:	2001      	movs	r0, #1
 80087c0:	f000 f866 	bl	8008890 <__kernel_sinf>
 80087c4:	eeb1 0a40 	vneg.f32	s0, s0
 80087c8:	e7d9      	b.n	800877e <sinf+0x2a>
 80087ca:	eddd 0a01 	vldr	s1, [sp, #4]
 80087ce:	ed9d 0a00 	vldr	s0, [sp]
 80087d2:	f000 f805 	bl	80087e0 <__kernel_cosf>
 80087d6:	e7f5      	b.n	80087c4 <sinf+0x70>
 80087d8:	3f490fd8 	.word	0x3f490fd8
 80087dc:	00000000 	.word	0x00000000

080087e0 <__kernel_cosf>:
 80087e0:	ee10 3a10 	vmov	r3, s0
 80087e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80087e8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80087ec:	eef0 6a40 	vmov.f32	s13, s0
 80087f0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80087f4:	d204      	bcs.n	8008800 <__kernel_cosf+0x20>
 80087f6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80087fa:	ee17 2a90 	vmov	r2, s15
 80087fe:	b342      	cbz	r2, 8008852 <__kernel_cosf+0x72>
 8008800:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8008804:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8008870 <__kernel_cosf+0x90>
 8008808:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8008874 <__kernel_cosf+0x94>
 800880c:	4a1a      	ldr	r2, [pc, #104]	@ (8008878 <__kernel_cosf+0x98>)
 800880e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008812:	4293      	cmp	r3, r2
 8008814:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800887c <__kernel_cosf+0x9c>
 8008818:	eee6 7a07 	vfma.f32	s15, s12, s14
 800881c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8008880 <__kernel_cosf+0xa0>
 8008820:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008824:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8008884 <__kernel_cosf+0xa4>
 8008828:	eee6 7a07 	vfma.f32	s15, s12, s14
 800882c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8008888 <__kernel_cosf+0xa8>
 8008830:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008834:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8008838:	ee26 6a07 	vmul.f32	s12, s12, s14
 800883c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008840:	eee7 0a06 	vfma.f32	s1, s14, s12
 8008844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008848:	d804      	bhi.n	8008854 <__kernel_cosf+0x74>
 800884a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800884e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008852:	4770      	bx	lr
 8008854:	4a0d      	ldr	r2, [pc, #52]	@ (800888c <__kernel_cosf+0xac>)
 8008856:	4293      	cmp	r3, r2
 8008858:	bf9a      	itte	ls
 800885a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800885e:	ee07 3a10 	vmovls	s14, r3
 8008862:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8008866:	ee30 0a47 	vsub.f32	s0, s0, s14
 800886a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800886e:	e7ec      	b.n	800884a <__kernel_cosf+0x6a>
 8008870:	ad47d74e 	.word	0xad47d74e
 8008874:	310f74f6 	.word	0x310f74f6
 8008878:	3e999999 	.word	0x3e999999
 800887c:	b493f27c 	.word	0xb493f27c
 8008880:	37d00d01 	.word	0x37d00d01
 8008884:	bab60b61 	.word	0xbab60b61
 8008888:	3d2aaaab 	.word	0x3d2aaaab
 800888c:	3f480000 	.word	0x3f480000

08008890 <__kernel_sinf>:
 8008890:	ee10 3a10 	vmov	r3, s0
 8008894:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008898:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800889c:	d204      	bcs.n	80088a8 <__kernel_sinf+0x18>
 800889e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80088a2:	ee17 3a90 	vmov	r3, s15
 80088a6:	b35b      	cbz	r3, 8008900 <__kernel_sinf+0x70>
 80088a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80088ac:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008904 <__kernel_sinf+0x74>
 80088b0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8008908 <__kernel_sinf+0x78>
 80088b4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80088b8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800890c <__kernel_sinf+0x7c>
 80088bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80088c0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8008910 <__kernel_sinf+0x80>
 80088c4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80088c8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8008914 <__kernel_sinf+0x84>
 80088cc:	ee60 6a07 	vmul.f32	s13, s0, s14
 80088d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80088d4:	b930      	cbnz	r0, 80088e4 <__kernel_sinf+0x54>
 80088d6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8008918 <__kernel_sinf+0x88>
 80088da:	eea7 6a27 	vfma.f32	s12, s14, s15
 80088de:	eea6 0a26 	vfma.f32	s0, s12, s13
 80088e2:	4770      	bx	lr
 80088e4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80088e8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80088ec:	eee0 7a86 	vfma.f32	s15, s1, s12
 80088f0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80088f4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800891c <__kernel_sinf+0x8c>
 80088f8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80088fc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	2f2ec9d3 	.word	0x2f2ec9d3
 8008908:	b2d72f34 	.word	0xb2d72f34
 800890c:	3638ef1b 	.word	0x3638ef1b
 8008910:	b9500d01 	.word	0xb9500d01
 8008914:	3c088889 	.word	0x3c088889
 8008918:	be2aaaab 	.word	0xbe2aaaab
 800891c:	3e2aaaab 	.word	0x3e2aaaab

08008920 <__ieee754_rem_pio2f>:
 8008920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008922:	ee10 6a10 	vmov	r6, s0
 8008926:	4b88      	ldr	r3, [pc, #544]	@ (8008b48 <__ieee754_rem_pio2f+0x228>)
 8008928:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800892c:	429d      	cmp	r5, r3
 800892e:	b087      	sub	sp, #28
 8008930:	4604      	mov	r4, r0
 8008932:	d805      	bhi.n	8008940 <__ieee754_rem_pio2f+0x20>
 8008934:	2300      	movs	r3, #0
 8008936:	ed80 0a00 	vstr	s0, [r0]
 800893a:	6043      	str	r3, [r0, #4]
 800893c:	2000      	movs	r0, #0
 800893e:	e022      	b.n	8008986 <__ieee754_rem_pio2f+0x66>
 8008940:	4b82      	ldr	r3, [pc, #520]	@ (8008b4c <__ieee754_rem_pio2f+0x22c>)
 8008942:	429d      	cmp	r5, r3
 8008944:	d83a      	bhi.n	80089bc <__ieee754_rem_pio2f+0x9c>
 8008946:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800894a:	2e00      	cmp	r6, #0
 800894c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8008b50 <__ieee754_rem_pio2f+0x230>
 8008950:	4a80      	ldr	r2, [pc, #512]	@ (8008b54 <__ieee754_rem_pio2f+0x234>)
 8008952:	f023 030f 	bic.w	r3, r3, #15
 8008956:	dd18      	ble.n	800898a <__ieee754_rem_pio2f+0x6a>
 8008958:	4293      	cmp	r3, r2
 800895a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800895e:	bf09      	itett	eq
 8008960:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8008b58 <__ieee754_rem_pio2f+0x238>
 8008964:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8008b5c <__ieee754_rem_pio2f+0x23c>
 8008968:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8008b60 <__ieee754_rem_pio2f+0x240>
 800896c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8008970:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8008974:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008978:	ed80 7a00 	vstr	s14, [r0]
 800897c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008980:	edc0 7a01 	vstr	s15, [r0, #4]
 8008984:	2001      	movs	r0, #1
 8008986:	b007      	add	sp, #28
 8008988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800898a:	4293      	cmp	r3, r2
 800898c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008990:	bf09      	itett	eq
 8008992:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8008b58 <__ieee754_rem_pio2f+0x238>
 8008996:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8008b5c <__ieee754_rem_pio2f+0x23c>
 800899a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8008b60 <__ieee754_rem_pio2f+0x240>
 800899e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80089a2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80089a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089aa:	ed80 7a00 	vstr	s14, [r0]
 80089ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089b2:	edc0 7a01 	vstr	s15, [r0, #4]
 80089b6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ba:	e7e4      	b.n	8008986 <__ieee754_rem_pio2f+0x66>
 80089bc:	4b69      	ldr	r3, [pc, #420]	@ (8008b64 <__ieee754_rem_pio2f+0x244>)
 80089be:	429d      	cmp	r5, r3
 80089c0:	d873      	bhi.n	8008aaa <__ieee754_rem_pio2f+0x18a>
 80089c2:	f000 f8dd 	bl	8008b80 <fabsf>
 80089c6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8008b68 <__ieee754_rem_pio2f+0x248>
 80089ca:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80089ce:	eee0 7a07 	vfma.f32	s15, s0, s14
 80089d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80089d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80089da:	ee17 0a90 	vmov	r0, s15
 80089de:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8008b50 <__ieee754_rem_pio2f+0x230>
 80089e2:	eea7 0a67 	vfms.f32	s0, s14, s15
 80089e6:	281f      	cmp	r0, #31
 80089e8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8008b5c <__ieee754_rem_pio2f+0x23c>
 80089ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089f0:	eeb1 6a47 	vneg.f32	s12, s14
 80089f4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80089f8:	ee16 1a90 	vmov	r1, s13
 80089fc:	dc09      	bgt.n	8008a12 <__ieee754_rem_pio2f+0xf2>
 80089fe:	4a5b      	ldr	r2, [pc, #364]	@ (8008b6c <__ieee754_rem_pio2f+0x24c>)
 8008a00:	1e47      	subs	r7, r0, #1
 8008a02:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8008a06:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8008a0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d107      	bne.n	8008a22 <__ieee754_rem_pio2f+0x102>
 8008a12:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8008a16:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8008a1a:	2a08      	cmp	r2, #8
 8008a1c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8008a20:	dc14      	bgt.n	8008a4c <__ieee754_rem_pio2f+0x12c>
 8008a22:	6021      	str	r1, [r4, #0]
 8008a24:	ed94 7a00 	vldr	s14, [r4]
 8008a28:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008a2c:	2e00      	cmp	r6, #0
 8008a2e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008a32:	ed84 0a01 	vstr	s0, [r4, #4]
 8008a36:	daa6      	bge.n	8008986 <__ieee754_rem_pio2f+0x66>
 8008a38:	eeb1 7a47 	vneg.f32	s14, s14
 8008a3c:	eeb1 0a40 	vneg.f32	s0, s0
 8008a40:	ed84 7a00 	vstr	s14, [r4]
 8008a44:	ed84 0a01 	vstr	s0, [r4, #4]
 8008a48:	4240      	negs	r0, r0
 8008a4a:	e79c      	b.n	8008986 <__ieee754_rem_pio2f+0x66>
 8008a4c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8008b58 <__ieee754_rem_pio2f+0x238>
 8008a50:	eef0 6a40 	vmov.f32	s13, s0
 8008a54:	eee6 6a25 	vfma.f32	s13, s12, s11
 8008a58:	ee70 7a66 	vsub.f32	s15, s0, s13
 8008a5c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008a60:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008b60 <__ieee754_rem_pio2f+0x240>
 8008a64:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8008a68:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008a6c:	ee15 2a90 	vmov	r2, s11
 8008a70:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008a74:	1a5b      	subs	r3, r3, r1
 8008a76:	2b19      	cmp	r3, #25
 8008a78:	dc04      	bgt.n	8008a84 <__ieee754_rem_pio2f+0x164>
 8008a7a:	edc4 5a00 	vstr	s11, [r4]
 8008a7e:	eeb0 0a66 	vmov.f32	s0, s13
 8008a82:	e7cf      	b.n	8008a24 <__ieee754_rem_pio2f+0x104>
 8008a84:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8008b70 <__ieee754_rem_pio2f+0x250>
 8008a88:	eeb0 0a66 	vmov.f32	s0, s13
 8008a8c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008a90:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008a94:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8008b74 <__ieee754_rem_pio2f+0x254>
 8008a98:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008a9c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008aa0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008aa4:	ed84 7a00 	vstr	s14, [r4]
 8008aa8:	e7bc      	b.n	8008a24 <__ieee754_rem_pio2f+0x104>
 8008aaa:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8008aae:	d306      	bcc.n	8008abe <__ieee754_rem_pio2f+0x19e>
 8008ab0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008ab4:	edc0 7a01 	vstr	s15, [r0, #4]
 8008ab8:	edc0 7a00 	vstr	s15, [r0]
 8008abc:	e73e      	b.n	800893c <__ieee754_rem_pio2f+0x1c>
 8008abe:	15ea      	asrs	r2, r5, #23
 8008ac0:	3a86      	subs	r2, #134	@ 0x86
 8008ac2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8008ac6:	ee07 3a90 	vmov	s15, r3
 8008aca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ace:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8008b78 <__ieee754_rem_pio2f+0x258>
 8008ad2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008ad6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ada:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008ade:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008ae2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ae6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008aea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008aee:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008af2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008af6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008afe:	edcd 7a05 	vstr	s15, [sp, #20]
 8008b02:	d11e      	bne.n	8008b42 <__ieee754_rem_pio2f+0x222>
 8008b04:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b0c:	bf0c      	ite	eq
 8008b0e:	2301      	moveq	r3, #1
 8008b10:	2302      	movne	r3, #2
 8008b12:	491a      	ldr	r1, [pc, #104]	@ (8008b7c <__ieee754_rem_pio2f+0x25c>)
 8008b14:	9101      	str	r1, [sp, #4]
 8008b16:	2102      	movs	r1, #2
 8008b18:	9100      	str	r1, [sp, #0]
 8008b1a:	a803      	add	r0, sp, #12
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	f000 f837 	bl	8008b90 <__kernel_rem_pio2f>
 8008b22:	2e00      	cmp	r6, #0
 8008b24:	f6bf af2f 	bge.w	8008986 <__ieee754_rem_pio2f+0x66>
 8008b28:	edd4 7a00 	vldr	s15, [r4]
 8008b2c:	eef1 7a67 	vneg.f32	s15, s15
 8008b30:	edc4 7a00 	vstr	s15, [r4]
 8008b34:	edd4 7a01 	vldr	s15, [r4, #4]
 8008b38:	eef1 7a67 	vneg.f32	s15, s15
 8008b3c:	edc4 7a01 	vstr	s15, [r4, #4]
 8008b40:	e782      	b.n	8008a48 <__ieee754_rem_pio2f+0x128>
 8008b42:	2303      	movs	r3, #3
 8008b44:	e7e5      	b.n	8008b12 <__ieee754_rem_pio2f+0x1f2>
 8008b46:	bf00      	nop
 8008b48:	3f490fd8 	.word	0x3f490fd8
 8008b4c:	4016cbe3 	.word	0x4016cbe3
 8008b50:	3fc90f80 	.word	0x3fc90f80
 8008b54:	3fc90fd0 	.word	0x3fc90fd0
 8008b58:	37354400 	.word	0x37354400
 8008b5c:	37354443 	.word	0x37354443
 8008b60:	2e85a308 	.word	0x2e85a308
 8008b64:	43490f80 	.word	0x43490f80
 8008b68:	3f22f984 	.word	0x3f22f984
 8008b6c:	080096f4 	.word	0x080096f4
 8008b70:	2e85a300 	.word	0x2e85a300
 8008b74:	248d3132 	.word	0x248d3132
 8008b78:	43800000 	.word	0x43800000
 8008b7c:	08009774 	.word	0x08009774

08008b80 <fabsf>:
 8008b80:	ee10 3a10 	vmov	r3, s0
 8008b84:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b88:	ee00 3a10 	vmov	s0, r3
 8008b8c:	4770      	bx	lr
	...

08008b90 <__kernel_rem_pio2f>:
 8008b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b94:	ed2d 8b04 	vpush	{d8-d9}
 8008b98:	b0d9      	sub	sp, #356	@ 0x164
 8008b9a:	4690      	mov	r8, r2
 8008b9c:	9001      	str	r0, [sp, #4]
 8008b9e:	4ab6      	ldr	r2, [pc, #728]	@ (8008e78 <__kernel_rem_pio2f+0x2e8>)
 8008ba0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8008ba2:	f118 0f04 	cmn.w	r8, #4
 8008ba6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8008baa:	460f      	mov	r7, r1
 8008bac:	f103 3bff 	add.w	fp, r3, #4294967295
 8008bb0:	db26      	blt.n	8008c00 <__kernel_rem_pio2f+0x70>
 8008bb2:	f1b8 0203 	subs.w	r2, r8, #3
 8008bb6:	bf48      	it	mi
 8008bb8:	f108 0204 	addmi.w	r2, r8, #4
 8008bbc:	10d2      	asrs	r2, r2, #3
 8008bbe:	1c55      	adds	r5, r2, #1
 8008bc0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8008bc2:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8008e88 <__kernel_rem_pio2f+0x2f8>
 8008bc6:	00e8      	lsls	r0, r5, #3
 8008bc8:	eba2 060b 	sub.w	r6, r2, fp
 8008bcc:	9002      	str	r0, [sp, #8]
 8008bce:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8008bd2:	eb0a 0c0b 	add.w	ip, sl, fp
 8008bd6:	ac1c      	add	r4, sp, #112	@ 0x70
 8008bd8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8008bdc:	2000      	movs	r0, #0
 8008bde:	4560      	cmp	r0, ip
 8008be0:	dd10      	ble.n	8008c04 <__kernel_rem_pio2f+0x74>
 8008be2:	a91c      	add	r1, sp, #112	@ 0x70
 8008be4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8008be8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8008bec:	2600      	movs	r6, #0
 8008bee:	4556      	cmp	r6, sl
 8008bf0:	dc24      	bgt.n	8008c3c <__kernel_rem_pio2f+0xac>
 8008bf2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008bf6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8008e88 <__kernel_rem_pio2f+0x2f8>
 8008bfa:	4684      	mov	ip, r0
 8008bfc:	2400      	movs	r4, #0
 8008bfe:	e016      	b.n	8008c2e <__kernel_rem_pio2f+0x9e>
 8008c00:	2200      	movs	r2, #0
 8008c02:	e7dc      	b.n	8008bbe <__kernel_rem_pio2f+0x2e>
 8008c04:	42c6      	cmn	r6, r0
 8008c06:	bf5d      	ittte	pl
 8008c08:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8008c0c:	ee07 1a90 	vmovpl	s15, r1
 8008c10:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008c14:	eef0 7a47 	vmovmi.f32	s15, s14
 8008c18:	ece4 7a01 	vstmia	r4!, {s15}
 8008c1c:	3001      	adds	r0, #1
 8008c1e:	e7de      	b.n	8008bde <__kernel_rem_pio2f+0x4e>
 8008c20:	ecfe 6a01 	vldmia	lr!, {s13}
 8008c24:	ed3c 7a01 	vldmdb	ip!, {s14}
 8008c28:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008c2c:	3401      	adds	r4, #1
 8008c2e:	455c      	cmp	r4, fp
 8008c30:	ddf6      	ble.n	8008c20 <__kernel_rem_pio2f+0x90>
 8008c32:	ece9 7a01 	vstmia	r9!, {s15}
 8008c36:	3601      	adds	r6, #1
 8008c38:	3004      	adds	r0, #4
 8008c3a:	e7d8      	b.n	8008bee <__kernel_rem_pio2f+0x5e>
 8008c3c:	a908      	add	r1, sp, #32
 8008c3e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c42:	9104      	str	r1, [sp, #16]
 8008c44:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8008c46:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8008e84 <__kernel_rem_pio2f+0x2f4>
 8008c4a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8008e80 <__kernel_rem_pio2f+0x2f0>
 8008c4e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8008c52:	9203      	str	r2, [sp, #12]
 8008c54:	4654      	mov	r4, sl
 8008c56:	00a2      	lsls	r2, r4, #2
 8008c58:	9205      	str	r2, [sp, #20]
 8008c5a:	aa58      	add	r2, sp, #352	@ 0x160
 8008c5c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8008c60:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8008c64:	a944      	add	r1, sp, #272	@ 0x110
 8008c66:	aa08      	add	r2, sp, #32
 8008c68:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8008c6c:	4694      	mov	ip, r2
 8008c6e:	4626      	mov	r6, r4
 8008c70:	2e00      	cmp	r6, #0
 8008c72:	dc4c      	bgt.n	8008d0e <__kernel_rem_pio2f+0x17e>
 8008c74:	4628      	mov	r0, r5
 8008c76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008c7a:	f000 f9f1 	bl	8009060 <scalbnf>
 8008c7e:	eeb0 8a40 	vmov.f32	s16, s0
 8008c82:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8008c86:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008c8a:	f000 fa4f 	bl	800912c <floorf>
 8008c8e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8008c92:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008c96:	2d00      	cmp	r5, #0
 8008c98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008c9c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008ca0:	ee17 9a90 	vmov	r9, s15
 8008ca4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ca8:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008cac:	dd41      	ble.n	8008d32 <__kernel_rem_pio2f+0x1a2>
 8008cae:	f104 3cff 	add.w	ip, r4, #4294967295
 8008cb2:	a908      	add	r1, sp, #32
 8008cb4:	f1c5 0e08 	rsb	lr, r5, #8
 8008cb8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8008cbc:	fa46 f00e 	asr.w	r0, r6, lr
 8008cc0:	4481      	add	r9, r0
 8008cc2:	fa00 f00e 	lsl.w	r0, r0, lr
 8008cc6:	1a36      	subs	r6, r6, r0
 8008cc8:	f1c5 0007 	rsb	r0, r5, #7
 8008ccc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8008cd0:	4106      	asrs	r6, r0
 8008cd2:	2e00      	cmp	r6, #0
 8008cd4:	dd3c      	ble.n	8008d50 <__kernel_rem_pio2f+0x1c0>
 8008cd6:	f04f 0e00 	mov.w	lr, #0
 8008cda:	f109 0901 	add.w	r9, r9, #1
 8008cde:	4670      	mov	r0, lr
 8008ce0:	4574      	cmp	r4, lr
 8008ce2:	dc68      	bgt.n	8008db6 <__kernel_rem_pio2f+0x226>
 8008ce4:	2d00      	cmp	r5, #0
 8008ce6:	dd03      	ble.n	8008cf0 <__kernel_rem_pio2f+0x160>
 8008ce8:	2d01      	cmp	r5, #1
 8008cea:	d074      	beq.n	8008dd6 <__kernel_rem_pio2f+0x246>
 8008cec:	2d02      	cmp	r5, #2
 8008cee:	d07d      	beq.n	8008dec <__kernel_rem_pio2f+0x25c>
 8008cf0:	2e02      	cmp	r6, #2
 8008cf2:	d12d      	bne.n	8008d50 <__kernel_rem_pio2f+0x1c0>
 8008cf4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008cf8:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008cfc:	b340      	cbz	r0, 8008d50 <__kernel_rem_pio2f+0x1c0>
 8008cfe:	4628      	mov	r0, r5
 8008d00:	9306      	str	r3, [sp, #24]
 8008d02:	f000 f9ad 	bl	8009060 <scalbnf>
 8008d06:	9b06      	ldr	r3, [sp, #24]
 8008d08:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008d0c:	e020      	b.n	8008d50 <__kernel_rem_pio2f+0x1c0>
 8008d0e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008d12:	3e01      	subs	r6, #1
 8008d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d1c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008d20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008d24:	ecac 0a01 	vstmia	ip!, {s0}
 8008d28:	ed30 0a01 	vldmdb	r0!, {s0}
 8008d2c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008d30:	e79e      	b.n	8008c70 <__kernel_rem_pio2f+0xe0>
 8008d32:	d105      	bne.n	8008d40 <__kernel_rem_pio2f+0x1b0>
 8008d34:	1e60      	subs	r0, r4, #1
 8008d36:	a908      	add	r1, sp, #32
 8008d38:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8008d3c:	11f6      	asrs	r6, r6, #7
 8008d3e:	e7c8      	b.n	8008cd2 <__kernel_rem_pio2f+0x142>
 8008d40:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008d44:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d4c:	da31      	bge.n	8008db2 <__kernel_rem_pio2f+0x222>
 8008d4e:	2600      	movs	r6, #0
 8008d50:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d58:	f040 8098 	bne.w	8008e8c <__kernel_rem_pio2f+0x2fc>
 8008d5c:	1e60      	subs	r0, r4, #1
 8008d5e:	2200      	movs	r2, #0
 8008d60:	4550      	cmp	r0, sl
 8008d62:	da4b      	bge.n	8008dfc <__kernel_rem_pio2f+0x26c>
 8008d64:	2a00      	cmp	r2, #0
 8008d66:	d065      	beq.n	8008e34 <__kernel_rem_pio2f+0x2a4>
 8008d68:	3c01      	subs	r4, #1
 8008d6a:	ab08      	add	r3, sp, #32
 8008d6c:	3d08      	subs	r5, #8
 8008d6e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d0f8      	beq.n	8008d68 <__kernel_rem_pio2f+0x1d8>
 8008d76:	4628      	mov	r0, r5
 8008d78:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008d7c:	f000 f970 	bl	8009060 <scalbnf>
 8008d80:	1c63      	adds	r3, r4, #1
 8008d82:	aa44      	add	r2, sp, #272	@ 0x110
 8008d84:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8008e84 <__kernel_rem_pio2f+0x2f4>
 8008d88:	0099      	lsls	r1, r3, #2
 8008d8a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008d8e:	4623      	mov	r3, r4
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f280 80a9 	bge.w	8008ee8 <__kernel_rem_pio2f+0x358>
 8008d96:	4623      	mov	r3, r4
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	f2c0 80c7 	blt.w	8008f2c <__kernel_rem_pio2f+0x39c>
 8008d9e:	aa44      	add	r2, sp, #272	@ 0x110
 8008da0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8008da4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8008e7c <__kernel_rem_pio2f+0x2ec>
 8008da8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8008e88 <__kernel_rem_pio2f+0x2f8>
 8008dac:	2000      	movs	r0, #0
 8008dae:	1ae2      	subs	r2, r4, r3
 8008db0:	e0b1      	b.n	8008f16 <__kernel_rem_pio2f+0x386>
 8008db2:	2602      	movs	r6, #2
 8008db4:	e78f      	b.n	8008cd6 <__kernel_rem_pio2f+0x146>
 8008db6:	f852 1b04 	ldr.w	r1, [r2], #4
 8008dba:	b948      	cbnz	r0, 8008dd0 <__kernel_rem_pio2f+0x240>
 8008dbc:	b121      	cbz	r1, 8008dc8 <__kernel_rem_pio2f+0x238>
 8008dbe:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8008dc2:	f842 1c04 	str.w	r1, [r2, #-4]
 8008dc6:	2101      	movs	r1, #1
 8008dc8:	f10e 0e01 	add.w	lr, lr, #1
 8008dcc:	4608      	mov	r0, r1
 8008dce:	e787      	b.n	8008ce0 <__kernel_rem_pio2f+0x150>
 8008dd0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8008dd4:	e7f5      	b.n	8008dc2 <__kernel_rem_pio2f+0x232>
 8008dd6:	f104 3cff 	add.w	ip, r4, #4294967295
 8008dda:	aa08      	add	r2, sp, #32
 8008ddc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8008de0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008de4:	a908      	add	r1, sp, #32
 8008de6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8008dea:	e781      	b.n	8008cf0 <__kernel_rem_pio2f+0x160>
 8008dec:	f104 3cff 	add.w	ip, r4, #4294967295
 8008df0:	aa08      	add	r2, sp, #32
 8008df2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8008df6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008dfa:	e7f3      	b.n	8008de4 <__kernel_rem_pio2f+0x254>
 8008dfc:	a908      	add	r1, sp, #32
 8008dfe:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008e02:	3801      	subs	r0, #1
 8008e04:	430a      	orrs	r2, r1
 8008e06:	e7ab      	b.n	8008d60 <__kernel_rem_pio2f+0x1d0>
 8008e08:	3201      	adds	r2, #1
 8008e0a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8008e0e:	2e00      	cmp	r6, #0
 8008e10:	d0fa      	beq.n	8008e08 <__kernel_rem_pio2f+0x278>
 8008e12:	9905      	ldr	r1, [sp, #20]
 8008e14:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8008e18:	eb0d 0001 	add.w	r0, sp, r1
 8008e1c:	18e6      	adds	r6, r4, r3
 8008e1e:	a91c      	add	r1, sp, #112	@ 0x70
 8008e20:	f104 0c01 	add.w	ip, r4, #1
 8008e24:	384c      	subs	r0, #76	@ 0x4c
 8008e26:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8008e2a:	4422      	add	r2, r4
 8008e2c:	4562      	cmp	r2, ip
 8008e2e:	da04      	bge.n	8008e3a <__kernel_rem_pio2f+0x2aa>
 8008e30:	4614      	mov	r4, r2
 8008e32:	e710      	b.n	8008c56 <__kernel_rem_pio2f+0xc6>
 8008e34:	9804      	ldr	r0, [sp, #16]
 8008e36:	2201      	movs	r2, #1
 8008e38:	e7e7      	b.n	8008e0a <__kernel_rem_pio2f+0x27a>
 8008e3a:	9903      	ldr	r1, [sp, #12]
 8008e3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008e40:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8008e44:	9105      	str	r1, [sp, #20]
 8008e46:	ee07 1a90 	vmov	s15, r1
 8008e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e4e:	2400      	movs	r4, #0
 8008e50:	ece6 7a01 	vstmia	r6!, {s15}
 8008e54:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8008e88 <__kernel_rem_pio2f+0x2f8>
 8008e58:	46b1      	mov	r9, r6
 8008e5a:	455c      	cmp	r4, fp
 8008e5c:	dd04      	ble.n	8008e68 <__kernel_rem_pio2f+0x2d8>
 8008e5e:	ece0 7a01 	vstmia	r0!, {s15}
 8008e62:	f10c 0c01 	add.w	ip, ip, #1
 8008e66:	e7e1      	b.n	8008e2c <__kernel_rem_pio2f+0x29c>
 8008e68:	ecfe 6a01 	vldmia	lr!, {s13}
 8008e6c:	ed39 7a01 	vldmdb	r9!, {s14}
 8008e70:	3401      	adds	r4, #1
 8008e72:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008e76:	e7f0      	b.n	8008e5a <__kernel_rem_pio2f+0x2ca>
 8008e78:	08009ab8 	.word	0x08009ab8
 8008e7c:	08009a8c 	.word	0x08009a8c
 8008e80:	43800000 	.word	0x43800000
 8008e84:	3b800000 	.word	0x3b800000
 8008e88:	00000000 	.word	0x00000000
 8008e8c:	9b02      	ldr	r3, [sp, #8]
 8008e8e:	eeb0 0a48 	vmov.f32	s0, s16
 8008e92:	eba3 0008 	sub.w	r0, r3, r8
 8008e96:	f000 f8e3 	bl	8009060 <scalbnf>
 8008e9a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8008e80 <__kernel_rem_pio2f+0x2f0>
 8008e9e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8008ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ea6:	db19      	blt.n	8008edc <__kernel_rem_pio2f+0x34c>
 8008ea8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8008e84 <__kernel_rem_pio2f+0x2f4>
 8008eac:	ee60 7a27 	vmul.f32	s15, s0, s15
 8008eb0:	aa08      	add	r2, sp, #32
 8008eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008eb6:	3508      	adds	r5, #8
 8008eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ebc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8008ec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ec4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008ec8:	ee10 3a10 	vmov	r3, s0
 8008ecc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008ed0:	ee17 3a90 	vmov	r3, s15
 8008ed4:	3401      	adds	r4, #1
 8008ed6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008eda:	e74c      	b.n	8008d76 <__kernel_rem_pio2f+0x1e6>
 8008edc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008ee0:	aa08      	add	r2, sp, #32
 8008ee2:	ee10 3a10 	vmov	r3, s0
 8008ee6:	e7f6      	b.n	8008ed6 <__kernel_rem_pio2f+0x346>
 8008ee8:	a808      	add	r0, sp, #32
 8008eea:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8008eee:	9001      	str	r0, [sp, #4]
 8008ef0:	ee07 0a90 	vmov	s15, r0
 8008ef4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008efe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8008f02:	ed62 7a01 	vstmdb	r2!, {s15}
 8008f06:	e743      	b.n	8008d90 <__kernel_rem_pio2f+0x200>
 8008f08:	ecfc 6a01 	vldmia	ip!, {s13}
 8008f0c:	ecb5 7a01 	vldmia	r5!, {s14}
 8008f10:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008f14:	3001      	adds	r0, #1
 8008f16:	4550      	cmp	r0, sl
 8008f18:	dc01      	bgt.n	8008f1e <__kernel_rem_pio2f+0x38e>
 8008f1a:	4290      	cmp	r0, r2
 8008f1c:	ddf4      	ble.n	8008f08 <__kernel_rem_pio2f+0x378>
 8008f1e:	a858      	add	r0, sp, #352	@ 0x160
 8008f20:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008f24:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	e735      	b.n	8008d98 <__kernel_rem_pio2f+0x208>
 8008f2c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	dc09      	bgt.n	8008f46 <__kernel_rem_pio2f+0x3b6>
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	dc27      	bgt.n	8008f86 <__kernel_rem_pio2f+0x3f6>
 8008f36:	d040      	beq.n	8008fba <__kernel_rem_pio2f+0x42a>
 8008f38:	f009 0007 	and.w	r0, r9, #7
 8008f3c:	b059      	add	sp, #356	@ 0x164
 8008f3e:	ecbd 8b04 	vpop	{d8-d9}
 8008f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f46:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8008f48:	2b03      	cmp	r3, #3
 8008f4a:	d1f5      	bne.n	8008f38 <__kernel_rem_pio2f+0x3a8>
 8008f4c:	aa30      	add	r2, sp, #192	@ 0xc0
 8008f4e:	1f0b      	subs	r3, r1, #4
 8008f50:	4413      	add	r3, r2
 8008f52:	461a      	mov	r2, r3
 8008f54:	4620      	mov	r0, r4
 8008f56:	2800      	cmp	r0, #0
 8008f58:	dc50      	bgt.n	8008ffc <__kernel_rem_pio2f+0x46c>
 8008f5a:	4622      	mov	r2, r4
 8008f5c:	2a01      	cmp	r2, #1
 8008f5e:	dc5d      	bgt.n	800901c <__kernel_rem_pio2f+0x48c>
 8008f60:	ab30      	add	r3, sp, #192	@ 0xc0
 8008f62:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8008e88 <__kernel_rem_pio2f+0x2f8>
 8008f66:	440b      	add	r3, r1
 8008f68:	2c01      	cmp	r4, #1
 8008f6a:	dc67      	bgt.n	800903c <__kernel_rem_pio2f+0x4ac>
 8008f6c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8008f70:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8008f74:	2e00      	cmp	r6, #0
 8008f76:	d167      	bne.n	8009048 <__kernel_rem_pio2f+0x4b8>
 8008f78:	edc7 6a00 	vstr	s13, [r7]
 8008f7c:	ed87 7a01 	vstr	s14, [r7, #4]
 8008f80:	edc7 7a02 	vstr	s15, [r7, #8]
 8008f84:	e7d8      	b.n	8008f38 <__kernel_rem_pio2f+0x3a8>
 8008f86:	ab30      	add	r3, sp, #192	@ 0xc0
 8008f88:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8008e88 <__kernel_rem_pio2f+0x2f8>
 8008f8c:	440b      	add	r3, r1
 8008f8e:	4622      	mov	r2, r4
 8008f90:	2a00      	cmp	r2, #0
 8008f92:	da24      	bge.n	8008fde <__kernel_rem_pio2f+0x44e>
 8008f94:	b34e      	cbz	r6, 8008fea <__kernel_rem_pio2f+0x45a>
 8008f96:	eef1 7a47 	vneg.f32	s15, s14
 8008f9a:	edc7 7a00 	vstr	s15, [r7]
 8008f9e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8008fa2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008fa6:	aa31      	add	r2, sp, #196	@ 0xc4
 8008fa8:	2301      	movs	r3, #1
 8008faa:	429c      	cmp	r4, r3
 8008fac:	da20      	bge.n	8008ff0 <__kernel_rem_pio2f+0x460>
 8008fae:	b10e      	cbz	r6, 8008fb4 <__kernel_rem_pio2f+0x424>
 8008fb0:	eef1 7a67 	vneg.f32	s15, s15
 8008fb4:	edc7 7a01 	vstr	s15, [r7, #4]
 8008fb8:	e7be      	b.n	8008f38 <__kernel_rem_pio2f+0x3a8>
 8008fba:	ab30      	add	r3, sp, #192	@ 0xc0
 8008fbc:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8008e88 <__kernel_rem_pio2f+0x2f8>
 8008fc0:	440b      	add	r3, r1
 8008fc2:	2c00      	cmp	r4, #0
 8008fc4:	da05      	bge.n	8008fd2 <__kernel_rem_pio2f+0x442>
 8008fc6:	b10e      	cbz	r6, 8008fcc <__kernel_rem_pio2f+0x43c>
 8008fc8:	eef1 7a67 	vneg.f32	s15, s15
 8008fcc:	edc7 7a00 	vstr	s15, [r7]
 8008fd0:	e7b2      	b.n	8008f38 <__kernel_rem_pio2f+0x3a8>
 8008fd2:	ed33 7a01 	vldmdb	r3!, {s14}
 8008fd6:	3c01      	subs	r4, #1
 8008fd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008fdc:	e7f1      	b.n	8008fc2 <__kernel_rem_pio2f+0x432>
 8008fde:	ed73 7a01 	vldmdb	r3!, {s15}
 8008fe2:	3a01      	subs	r2, #1
 8008fe4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008fe8:	e7d2      	b.n	8008f90 <__kernel_rem_pio2f+0x400>
 8008fea:	eef0 7a47 	vmov.f32	s15, s14
 8008fee:	e7d4      	b.n	8008f9a <__kernel_rem_pio2f+0x40a>
 8008ff0:	ecb2 7a01 	vldmia	r2!, {s14}
 8008ff4:	3301      	adds	r3, #1
 8008ff6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008ffa:	e7d6      	b.n	8008faa <__kernel_rem_pio2f+0x41a>
 8008ffc:	ed72 7a01 	vldmdb	r2!, {s15}
 8009000:	edd2 6a01 	vldr	s13, [r2, #4]
 8009004:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009008:	3801      	subs	r0, #1
 800900a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800900e:	ed82 7a00 	vstr	s14, [r2]
 8009012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009016:	edc2 7a01 	vstr	s15, [r2, #4]
 800901a:	e79c      	b.n	8008f56 <__kernel_rem_pio2f+0x3c6>
 800901c:	ed73 7a01 	vldmdb	r3!, {s15}
 8009020:	edd3 6a01 	vldr	s13, [r3, #4]
 8009024:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8009028:	3a01      	subs	r2, #1
 800902a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800902e:	ed83 7a00 	vstr	s14, [r3]
 8009032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009036:	edc3 7a01 	vstr	s15, [r3, #4]
 800903a:	e78f      	b.n	8008f5c <__kernel_rem_pio2f+0x3cc>
 800903c:	ed33 7a01 	vldmdb	r3!, {s14}
 8009040:	3c01      	subs	r4, #1
 8009042:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009046:	e78f      	b.n	8008f68 <__kernel_rem_pio2f+0x3d8>
 8009048:	eef1 6a66 	vneg.f32	s13, s13
 800904c:	eeb1 7a47 	vneg.f32	s14, s14
 8009050:	edc7 6a00 	vstr	s13, [r7]
 8009054:	ed87 7a01 	vstr	s14, [r7, #4]
 8009058:	eef1 7a67 	vneg.f32	s15, s15
 800905c:	e790      	b.n	8008f80 <__kernel_rem_pio2f+0x3f0>
 800905e:	bf00      	nop

08009060 <scalbnf>:
 8009060:	ee10 3a10 	vmov	r3, s0
 8009064:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009068:	d02b      	beq.n	80090c2 <scalbnf+0x62>
 800906a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800906e:	d302      	bcc.n	8009076 <scalbnf+0x16>
 8009070:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009074:	4770      	bx	lr
 8009076:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800907a:	d123      	bne.n	80090c4 <scalbnf+0x64>
 800907c:	4b24      	ldr	r3, [pc, #144]	@ (8009110 <scalbnf+0xb0>)
 800907e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8009114 <scalbnf+0xb4>
 8009082:	4298      	cmp	r0, r3
 8009084:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009088:	db17      	blt.n	80090ba <scalbnf+0x5a>
 800908a:	ee10 3a10 	vmov	r3, s0
 800908e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009092:	3a19      	subs	r2, #25
 8009094:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009098:	4288      	cmp	r0, r1
 800909a:	dd15      	ble.n	80090c8 <scalbnf+0x68>
 800909c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8009118 <scalbnf+0xb8>
 80090a0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800911c <scalbnf+0xbc>
 80090a4:	ee10 3a10 	vmov	r3, s0
 80090a8:	eeb0 7a67 	vmov.f32	s14, s15
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	bfb8      	it	lt
 80090b0:	eef0 7a66 	vmovlt.f32	s15, s13
 80090b4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80090b8:	4770      	bx	lr
 80090ba:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009120 <scalbnf+0xc0>
 80090be:	ee27 0a80 	vmul.f32	s0, s15, s0
 80090c2:	4770      	bx	lr
 80090c4:	0dd2      	lsrs	r2, r2, #23
 80090c6:	e7e5      	b.n	8009094 <scalbnf+0x34>
 80090c8:	4410      	add	r0, r2
 80090ca:	28fe      	cmp	r0, #254	@ 0xfe
 80090cc:	dce6      	bgt.n	800909c <scalbnf+0x3c>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	dd06      	ble.n	80090e0 <scalbnf+0x80>
 80090d2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80090d6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80090da:	ee00 3a10 	vmov	s0, r3
 80090de:	4770      	bx	lr
 80090e0:	f110 0f16 	cmn.w	r0, #22
 80090e4:	da09      	bge.n	80090fa <scalbnf+0x9a>
 80090e6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8009120 <scalbnf+0xc0>
 80090ea:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8009124 <scalbnf+0xc4>
 80090ee:	ee10 3a10 	vmov	r3, s0
 80090f2:	eeb0 7a67 	vmov.f32	s14, s15
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	e7d9      	b.n	80090ae <scalbnf+0x4e>
 80090fa:	3019      	adds	r0, #25
 80090fc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009100:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8009104:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8009128 <scalbnf+0xc8>
 8009108:	ee07 3a90 	vmov	s15, r3
 800910c:	e7d7      	b.n	80090be <scalbnf+0x5e>
 800910e:	bf00      	nop
 8009110:	ffff3cb0 	.word	0xffff3cb0
 8009114:	4c000000 	.word	0x4c000000
 8009118:	7149f2ca 	.word	0x7149f2ca
 800911c:	f149f2ca 	.word	0xf149f2ca
 8009120:	0da24260 	.word	0x0da24260
 8009124:	8da24260 	.word	0x8da24260
 8009128:	33000000 	.word	0x33000000

0800912c <floorf>:
 800912c:	ee10 3a10 	vmov	r3, s0
 8009130:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009134:	3a7f      	subs	r2, #127	@ 0x7f
 8009136:	2a16      	cmp	r2, #22
 8009138:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800913c:	dc2b      	bgt.n	8009196 <floorf+0x6a>
 800913e:	2a00      	cmp	r2, #0
 8009140:	da12      	bge.n	8009168 <floorf+0x3c>
 8009142:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80091a8 <floorf+0x7c>
 8009146:	ee30 0a27 	vadd.f32	s0, s0, s15
 800914a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800914e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009152:	dd06      	ble.n	8009162 <floorf+0x36>
 8009154:	2b00      	cmp	r3, #0
 8009156:	da24      	bge.n	80091a2 <floorf+0x76>
 8009158:	2900      	cmp	r1, #0
 800915a:	4b14      	ldr	r3, [pc, #80]	@ (80091ac <floorf+0x80>)
 800915c:	bf08      	it	eq
 800915e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8009162:	ee00 3a10 	vmov	s0, r3
 8009166:	4770      	bx	lr
 8009168:	4911      	ldr	r1, [pc, #68]	@ (80091b0 <floorf+0x84>)
 800916a:	4111      	asrs	r1, r2
 800916c:	420b      	tst	r3, r1
 800916e:	d0fa      	beq.n	8009166 <floorf+0x3a>
 8009170:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80091a8 <floorf+0x7c>
 8009174:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009178:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800917c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009180:	ddef      	ble.n	8009162 <floorf+0x36>
 8009182:	2b00      	cmp	r3, #0
 8009184:	bfbe      	ittt	lt
 8009186:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800918a:	fa40 f202 	asrlt.w	r2, r0, r2
 800918e:	189b      	addlt	r3, r3, r2
 8009190:	ea23 0301 	bic.w	r3, r3, r1
 8009194:	e7e5      	b.n	8009162 <floorf+0x36>
 8009196:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800919a:	d3e4      	bcc.n	8009166 <floorf+0x3a>
 800919c:	ee30 0a00 	vadd.f32	s0, s0, s0
 80091a0:	4770      	bx	lr
 80091a2:	2300      	movs	r3, #0
 80091a4:	e7dd      	b.n	8009162 <floorf+0x36>
 80091a6:	bf00      	nop
 80091a8:	7149f2ca 	.word	0x7149f2ca
 80091ac:	bf800000 	.word	0xbf800000
 80091b0:	007fffff 	.word	0x007fffff

080091b4 <_init>:
 80091b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b6:	bf00      	nop
 80091b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ba:	bc08      	pop	{r3}
 80091bc:	469e      	mov	lr, r3
 80091be:	4770      	bx	lr

080091c0 <_fini>:
 80091c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c2:	bf00      	nop
 80091c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091c6:	bc08      	pop	{r3}
 80091c8:	469e      	mov	lr, r3
 80091ca:	4770      	bx	lr
